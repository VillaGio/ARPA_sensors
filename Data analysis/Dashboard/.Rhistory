#clean and reshape caserate data
caserate <- caserate %>% dplyr::select(-c(2:7))
caserate <- vroom("coronavirus-data-master/trends/caserate-by-modzcta.csv")
## CLEAN DATA
#clean and reshape caserate data
caserate <- caserate %>% dplyr::select(-c(2:7))
caserate_long <- caserate %>%
pivot_longer(2:178, names_to = "modzcta",
names_prefix = "CASERATE_", values_to ="caserate")
View(caserate)
View(caserate_long)
View(caserate)
#clean and reshape testrate data
testrates <- testrate %>% select(-c(2:7))
#clean and reshape testrate data
testrates <- testrate %>%  dplyr::select(-c(2:7))
testrates_long <- testrates %>%
pivot_longer(2:178, names_to = "modzcta",
names_prefix = "TESTRATE_", values_to ="testrate")
#clean and reshape percentpos data
percentpositives <- percentpos %>%  dplyr::select(-c(2:7))
percentpositives_long <- percentpositives %>%
pivot_longer(2:178, names_to = "modzcta",
names_prefix = "PCTPOS_", values_to ="pctpos")
### MERGE IN GEOGRAPHY DATA
#combine all three long data frames into one df
all <- caserate_long %>%
left_join(percentpositives_long, by = c("week_ending", "modzcta")) %>%
left_join(testrates_long, by = c("week_ending", "modzcta"))
View(all)
#merge covid data with zcta shapefile
all_modzcta <- geo_join(modzcta, all, "MODZCTA", "modzcta", how = "inner")
View(all_modzcta)
#covert week_ending from string to date
all_modzcta$week_ending <- as.Date(all_modzcta$week_ending, format = "%m/%d/%Y")
all_modzcta %>%
ggplot(aes(x=as.numeric(caserate))) +
geom_histogram(bins = 20, fill = "#69b3a2", color ="white")
shapef <- st_read("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\Limiti01012022\\Limiti01012022\\Com01012022\\Com01012022_WGS84.shp")
shapef <- shapef[, c(8,13)]
##scarico e raggruppo i dati
dati2021<-read.csv("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\dati_sensori_1968_2020\\mod_2021.csv")
d2021 <- merge(dati2021, stazioni, by.x="idsensore", by.y="IdSensore")
d2021pm10 <- d2021[d2021$NomeTipoSensore=="Particelle sospese PM2.5",]
d2021pm10 <- d2021pm10[d2021pm10$valore > 0,]
d2021pm2p5_g <- d2021pm2p5_grouped <- d2021pm2p5 %>%
group_by(idsensore, Comune, lat, lng) %>%
summarise_at(vars(valore), list(pm2p5 = mean))
d2021pm2p5_grouped["year"] = 2021
d2021pm2p5_g <- d2021pm2p5_grouped <- d2021pm2p5 %>%
group_by(idsensore, Comune, lat, lng) %>%
summarise_at(vars(valore), list(pm2p5 = mean))
##scarico e raggruppo i dati
dati2021<-read.csv("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\dati_sensori_1968_2020\\mod_2021.csv")
d2021 <- merge(dati2021, stazioni, by.x="idsensore", by.y="IdSensore")
d2021pm2p5 <- d2021[d2021$NomeTipoSensore=="Particelle sospese PM2.5",]
d2021pm2p5 <- d2021pm2p5[d2021pm2p5$valore > 0,]
d2021pm2p5_g <- d2021pm2p5_grouped <- d2021pm2p5 %>%
group_by(idsensore, Comune, lat, lng) %>%
summarise_at(vars(valore), list(pm2p5 = mean))
d2021pm2p5_grouped["year"] = 2021
stazioni<-read.csv('C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\Mappe\\REGIONE_LOMBARDIA\\Stazioni_qualit__dell_aria.csv')
stazioni$NomeTipoSensore <- as.factor(stazioni$NomeTipoSensore)
##scarico e raggruppo i dati
dati2021<-read.csv("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\dati_sensori_1968_2020\\mod_2021.csv")
d2021 <- merge(dati2021, stazioni, by.x="idsensore", by.y="IdSensore")
d2021pm2p5 <- d2021[d2021$NomeTipoSensore=="Particelle sospese PM2.5",]
d2021pm2p5 <- d2021pm2p5[d2021pm2p5$valore > 0,]
d2021pm2p5_g <- d2021pm2p5_grouped <- d2021pm2p5 %>%
group_by(idsensore, Comune, lat, lng) %>%
summarise_at(vars(valore), list(pm2p5 = mean))
d2021pm2p5_grouped["year"] = 2021
df_all <- geo_join(shapef, d2021pm2p5_grouped, "COMUNE", "Comune", how = "inner")
df_all$lng = NULL
df_all$lat = NULL
#LABESL
labels <- sprintf(
"<strong>%s</strong><br/>%g Cpncentration",
df_all$Comune, df_all$pm2p5) %>%
lapply(htmltools::HTML)
#PALETTE
pal = colorBin(palette = "OrRd", 9, domain = df_all$pm2p5)
df_all%>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet() %>%
addProviderTiles(provider = "CartoDB.Position") %>%
addPolygons(label = labels,
stroke = FALSE,
smoothFactor = .5,
opacity = 1,
fillOpacity = 0.7,
fillColor = ~pal(pm2p5),
highlightOptions = highlightOptions(weight = 5,
fillOpacity = 1,
color = "black",
opacity = 1,
bringToFront = TRUE))%>%
addLegend("bottomright",
pal = pal,
values = ~ pm2p5,
title = "Concentration",
opacity = 0.7)
df_all%>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet() %>%
addProviderTiles(provider = "CartoDB.Position") %>%
addPolygons(label = labels,
stroke = FALSE,
smoothFactor = .5,
opacity = 1,
fillOpacity = 0.7,
fillColor = ~pal(pm2p5),
highlightOptions = highlightOptions(weight = 5,
fillOpacity = 1,
color = "black",
opacity = 1,
bringToFront = TRUE))
#LABESL
labels <- sprintf(
"<strong>%s</strong><br/>%g Cpncentration",
df_all$Comune, df_all$pm2p5) %>%
lapply(htmltools::HTML)
labels <- sprintf(
"<strong>%s</strong><br/>%g Cpncentration",
df_all$Comune, df_all$pm2p5) %>%
lapply(htmltools::HTML)
# MAKE INTERACTIVE MAP OF CASERATE
labels <- sprintf(
"<strong>%s</strong><br/>%g cases per 100,00 people",
all_modzcta$MODZCTA, all_modzcta$caserate) %>%
lapply(htmltools::HTML)
#LABESL
labels <- sprintf(
"<strong>%s</strong><br/>%g Cpncentration",
df_all$COMUNE, df_all$pm2p5) %>%
lapply(htmltools::HTML)
#PALETTE
pal = colorBin(palette = "OrRd", 9, domain = df_all$pm2p5)
df_all%>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet() %>%
addProviderTiles(provider = "CartoDB.Position") %>%
addPolygons(label = labels,
stroke = FALSE,
smoothFactor = .5,
opacity = 1,
fillOpacity = 0.7,
fillColor = ~pal(pm2p5),
highlightOptions = highlightOptions(weight = 5,
fillOpacity = 1,
color = "black",
opacity = 1,
bringToFront = TRUE))%>%
addLegend("bottomright",
pal = pal,
values = ~ pm2p5,
title = "Concentration",
opacity = 0.7)
library(shiny); runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/map1.R')
shapef <- st_read("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\Limiti01012022\\Limiti01012022\\ProvCM01012022\\ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
dati_all <- read.csv( "C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\dati_all.csv")
df_all <- geo_join(shapef, dati_all, "SIGLA", "Provincia", how = "inner")
df_all <- df_all %>% drop_na(ProvinciaLong)
df_max <- read.csv("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\df_max.csv")
staz <- read.csv("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\staz.csv")
staz <- geo_join(shapef, staz, "SIGLA", "Provincia", how = "inner")
staz <- staz %>% drop_na(ProvinciaLong)
w <- df_all %>% filter(anno == 2015, NomeTipoSensoreENG == "PM10")
View(df_all)
colnames(df_all)
w <- df_all %>% filter(anno == 2015, NomeTipoSensoreENG == "PM10")
library(dplyr)
w <- df_all %>% filter(anno == 2015, NomeTipoSensoreENG == "PM10")
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/map1.R')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/map1.R')
View(df_all)
w <- df_all %>% filter(anno == 2015, NomeTipoSensoreENG ==  "O3 - Ozone")
View(w)
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/map1.R')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/map1.R')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/map1.R')
library(shiny); runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/map2.R')
save(staz, "C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\stazioni.rData")
save(staz, "stazioni.rData")
save(staz, "C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\stazioni.RData")
save(staz, "stazioni.RData")
save(staz, file ="stazioni.RData")
save(staz, file = "C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\stazioni.RData")
save(df_all, file = "C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\inquinanti.RData")
save(df_max, file = "C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\legend.RData")
df_all <- readRDS("inquinanti.RData")
df_all <- load("inquinanti.RData")
df_all <- load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\inquinanti.RData")
df_max <- load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\legenda.RData")
df_max <- load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\legend.RData")
staz <- load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\stazioni.RData")
ls
load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\inquinanti.RData")
load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\legend.RData")
load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\stazioni.RData")
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/map2.R')
View(df_max)
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/map2.R')
#STATIONS INFO
stazioni<-read.csv('C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\Mappe\\REGIONE_LOMBARDIA\\Stazioni_qualit__dell_aria.csv')
#STATIONS INFO
stazioni<-read.csv('C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\Mappe\\REGIONE_LOMBARDIA\\Stazioni_qualit__dell_aria.csv')
stazioni$NomeTipoSensore <- as.factor(stazioni$NomeTipoSensore)
staz <- stazioni[, c(1,2,4,5,7,9,14,15)]
staz <- staz %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
staz <- staz %>% mutate(NomeTipoSensoreENG =
case_when(NomeTipoSensore == "Particelle sospese PM2.5" ~ "PM2.5",
NomeTipoSensore == "PM10 (SM2005)" ~ "PM10",
NomeTipoSensore == "PM10" ~ "PM10",
NomeTipoSensore == "Ozono" ~ "Ozone",
NomeTipoSensore == "Biossido di Azoto" ~ "Nitrogen Dioxide",
NomeTipoSensore == "Ossidi di Azoto" ~ "Nitric Oxide",
NomeTipoSensore == "Monossido di Carbonio" ~ "Carbon Monoxide",
NomeTipoSensore == "Ammoniaca" ~ "Ammonia",
NomeTipoSensore == "Arsenico" ~ "Arsenic",
NomeTipoSensore == "Benzene" ~ "Benzene",
NomeTipoSensore == "Benzopirene" ~ "Benzopyrene",
NomeTipoSensore == "Cadmio" ~ "Cadmium",
NomeTipoSensore == "BlackCarbon" ~ "Black Carbon",
NomeTipoSensore == "Nikel" ~ "Nickel",
NomeTipoSensore == "Monossido di Azoto" ~ "Nitrogen Monoxide",
NomeTipoSensore == "Piombo" ~ "Lead"
))
#ci sono alcuni inquinanti in più
staz <- staz %>% drop_na(NomeTipoSensoreENG)
staz <- staz %>% mutate(color =
case_when(NomeTipoSensore == "Particelle sospese PM2.5" ~ "#C51B7D",
NomeTipoSensore == "PM10 (SM2005)" ~ "#1A9850",
NomeTipoSensore == "PM10" ~ "#1A9850",
NomeTipoSensore == "Ozono" ~ "#B2182B",
NomeTipoSensore == "Biossido di Azoto" ~ "#FFFF99",
NomeTipoSensore == "Ossidi di Azoto" ~ "#CAB2D6",
NomeTipoSensore == "Monossido di Carbonio" ~ "#E31A1C",
NomeTipoSensore == "Ammoniaca" ~"#A6CEE3",
NomeTipoSensore == "Arsenico" ~ "#1F78B4",
NomeTipoSensore == "Benzene" ~ "#B2DF8A",
NomeTipoSensore == "Benzopirene" ~ "#6a3d9a",
NomeTipoSensore == "Cadmio" ~ "#FB9A99",
NomeTipoSensore == "BlackCarbon" ~ "#33A02C",
NomeTipoSensore == "Nikel" ~ "#FF7F00",
NomeTipoSensore == "Monossido di Azoto" ~ "#B15928",
NomeTipoSensore == "Piombo" ~ "#FDBF6F"))
staz <- geo_join(shapef, staz, "SIGLA", "Provincia", how = "inner")
#SHAPEFILES FOR POLYGONS
shapef <- st_read("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\Limiti01012022\\Limiti01012022\\ProvCM01012022\\ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
staz <- geo_join(shapef, staz, "SIGLA", "Provincia", how = "inner")
staz <- staz %>% drop_na(ProvinciaLong)
write.csv(staz, "C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\staz.csv", row.names = FALSE)
save(staz, file = "C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\stazioni.RData")
save(staz, file = "C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\stazioni.RData")
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/map2.R')
gc()
sensori <- na.omit(read.csv("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\arpa_dashboard\\sensori_2022.csv"))
stazioni <- read.csv("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\arpa_dashboard\\stazioni.csv")
load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\inquinanti.RData")
load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\legend.RData")
load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\stazioni.RData")
colnames(df_max) <- c("NO2 - Nitrogen Dioxide", "O3 - Ozone", "CO - Carbon Monoxide", "NO - Nitric Oxide", "PM10", "PM2.5")
df_all$geometry= NULL
filtered <- df_all %>% filter(anno == 2021, NomeTipoSensoreENG == "Ozone" )
library(plotly)
library(tidyr)
library(dplyr)
filtered <- df_all %>% filter(anno == 2021, NomeTipoSensoreENG == "Ozone" )
View(df_all)
filtered <- df_all %>% filter(anno == 2021, NomeTipoSensoreENG == "O3 - Ozone" )
df_all %>% filter(anno == 2021, NomeTipoSensoreENG == "O3 - Ozone" )
rlang::last_error()
rlang::last_trace()
library(plotly)
library(dplyr)
filtered <- df_all %>% filter(anno == 2021, NomeTipoSensoreENG == "O3 - Ozone" )
filtered <- df_all %>% filter(anno == 2021, NomeTipoSensoreENG == "O3 - Ozone" )
library(dplyr)
library(plotly)
sensori <- na.omit(read.csv("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\arpa_dashboard\\sensori_2022.csv"))
stazioni <- read.csv("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\arpa_dashboard\\stazioni.csv")
load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\inquinanti.RData")
load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\legend.RData")
load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\stazioni.RData")
colnames(df_max) <- c("NO2 - Nitrogen Dioxide", "O3 - Ozone", "CO - Carbon Monoxide", "NO - Nitric Oxide", "PM10", "PM2.5")
df_all$geometry= NULL
library(dplyr)
filtered <- df_all %>% filter(anno == 2021, NomeTipoSensoreENG == "O3 - Ozone" )
library(sf)
filtered <- df_all %>% filter(anno == 2021, NomeTipoSensoreENG == "O3 - Ozone" )
plot_ly(filtered, x = ~anno, y = ~valore, name = "Ozone", mode = "line+markers")
f$anno <- filtered$anno
f <- data.frame()
f$anno <- filtered$anno
f <- data.frame(51, 2)
View(f)
f <- setNames(data.frame(matrix(ncol= 2, nrow = 51)), c("anno", "valore"))
plot_ly(f, x = ~anno, y = ~valore, name = "Ozone", mode = "line+markers")
trace_0 <- rnorm(100, mean = 5)
trace_1 <- rnorm(100, mean = 0)
trace_2 <- rnorm(100, mean = -5)
x <- c(1:100)
data <- data.frame(x, trace_0, trace_1, trace_2)
fig <- plot_ly(data, x = ~x)
fig <- fig %>% add_trace(y = ~trace_0, name = 'trace 0',mode = 'lines')
fig <- fig %>% add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers')
fig <- fig %>% add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers')
fig
library(ggplot)
library(ggplot2)
ggplot2::diamonds
fig <- plot_ly(df_all, y = ~valore, color=~anno, type = "box")
fig
View(df_all)
st_set_geometry(df_all, NULL)
View(df_all)
df_all <- as.data.frame(df_all)
df_all@sf_column = NULL
load("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\inquinanti.RData")
attr(df_all$geometry, "sf_column") = NULL
df_all$geometry = NULL
f <- setNames(data.frame(matrix(ncol= 2, nrow = 51)), c("anno", "valore"))
f$anno <- filtered$anno
plot_ly(f, x = ~anno, y = ~valore, name = "Ozone", mode = "line+markers")
fig <- plot_ly(df_all, y = ~valore, color=~anno, type = "box")
fig
fig <- plot_ly(df_all, y = ~valore, color=~as.factor(anno), type = "box")
fig
#SHAPEFILES FOR POLYGONS
shapef <- st_read("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\Limiti01012022\\Limiti01012022\\ProvCM01012022\\ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
#STATIONS INFO
stazioni<-read.csv('C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\Mappe\\REGIONE_LOMBARDIA\\Stazioni_qualit__dell_aria.csv')
stazioni$NomeTipoSensore <- as.factor(stazioni$NomeTipoSensore)
#base df
dati_all <- setNames(data.frame(matrix(ncol = 6, nrow = 0)), c("idesensore", "Comune", "Provincia", "NomeTipoSensore", "valore", "anno"))
#single years
for(year in 2021:2011){
path = paste("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\dati_sensori_1968_2020\\mod_", year, ".csv", sep="")
dati <- read.csv(path)
dati_merged <- merge(dati, stazioni, by.x="idsensore", by.y="IdSensore")
dati_filtered <- dati_merged[dati_merged$NomeTipoSensore=="Particelle sospese PM2.5" | dati_merged$NomeTipoSensore=="PM10" |
dati_merged$NomeTipoSensore=="PM10 (SM2005)" | dati_merged$NomeTipoSensore=="Ozono" | dati_merged$NomeTipoSensore=="Biossido di Azoto" |
dati_merged$NomeTipoSensore=="Ossidi di Azoto" | dati_merged$NomeTipoSensore=="Monossido di Carbonio",]
dati_filtered <- dati_filtered[dati_filtered$valore > 0,]
dati_grouped <- dati_filtered %>%
group_by(idsensore, Comune, Provincia, NomeTipoSensore) %>%
summarise_at(vars(valore), list(valore = mean))
dati_grouped["anno"] = year
dati_all <- rbind(dati_all, dati_grouped)
dati_all <- dati_all %>% mutate(NomeTipoSensoreENG =
case_when(NomeTipoSensore == "Particelle sospese PM2.5" ~ "PM2.5",
NomeTipoSensore == "PM10 (SM2005)" ~ "PM10",
NomeTipoSensore == "PM10" ~ "PM10",
NomeTipoSensore == "Ozono" ~ "O3 - Ozone",
NomeTipoSensore == "Biossido di Azoto" ~ "NO2 - Nitrogen Dioxide",
NomeTipoSensore == "Ossidi di Azoto" ~ "NO - Nitric Oxide",
NomeTipoSensore == "Monossido di Carbonio" ~ "CO - Carbon Monoxide"
))
dati_all <- dati_all %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
print(year)
}
#single years
for(year in 2013:2011){
path = paste("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\dati_sensori_1968_2020\\mod_", year, ".csv", sep="")
dati <- read.csv(path)
dati_merged <- merge(dati, stazioni, by.x="idsensore", by.y="IdSensore")
dati_filtered <- dati_merged[dati_merged$NomeTipoSensore=="Particelle sospese PM2.5" | dati_merged$NomeTipoSensore=="PM10" |
dati_merged$NomeTipoSensore=="PM10 (SM2005)" | dati_merged$NomeTipoSensore=="Ozono" | dati_merged$NomeTipoSensore=="Biossido di Azoto" |
dati_merged$NomeTipoSensore=="Ossidi di Azoto" | dati_merged$NomeTipoSensore=="Monossido di Carbonio",]
dati_filtered <- dati_filtered[dati_filtered$valore > 0,]
dati_grouped <- dati_filtered %>%
group_by(idsensore, Comune, Provincia, NomeTipoSensore) %>%
summarise_at(vars(valore), list(valore = mean))
dati_grouped["anno"] = year
dati_all <- rbind(dati_all, dati_grouped)
dati_all <- dati_all %>% mutate(NomeTipoSensoreENG =
case_when(NomeTipoSensore == "Particelle sospese PM2.5" ~ "PM2.5",
NomeTipoSensore == "PM10 (SM2005)" ~ "PM10",
NomeTipoSensore == "PM10" ~ "PM10",
NomeTipoSensore == "Ozono" ~ "O3 - Ozone",
NomeTipoSensore == "Biossido di Azoto" ~ "NO2 - Nitrogen Dioxide",
NomeTipoSensore == "Ossidi di Azoto" ~ "NO - Nitric Oxide",
NomeTipoSensore == "Monossido di Carbonio" ~ "CO - Carbon Monoxide"
))
dati_all <- dati_all %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))

print(year)
}
View(dati_all)
library(rgdal)
library(plyr)
library(tidyverse) #tidy data wrangling
library(vroom) # fats reading/importing csv data
library(sf) #spatial data
library(tigris) #geojoin
shapef <- st_read("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\Limiti01012022\\Limiti01012022\\ProvCM01012022\\ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
stazioni<-read.csv('C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\Mappe\\REGIONE_LOMBARDIA\\Stazioni_qualit__dell_aria.csv')
stazioni$NomeTipoSensore <- as.factor(stazioni$NomeTipoSensore)
#Base df
dati_all <- setNames(data.frame(matrix(ncol = 6, nrow = 0)), c("idesensore", "Comune", "Provincia", "NomeTipoSensore", "valore", "anno"))
#Single years csv
for(year in 2021:2011){
path = paste("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\dati_sensori_1968_2020\\mod_", year, ".csv", sep="")
dati <- read.csv(path)
dati_merged <- merge(dati, stazioni, by.x="idsensore", by.y="IdSensore")
dati_filtered <- dati_merged[dati_merged$NomeTipoSensore=="Particelle sospese PM2.5" | dati_merged$NomeTipoSensore=="PM10" |
dati_merged$NomeTipoSensore=="PM10 (SM2005)" | dati_merged$NomeTipoSensore=="Ozono" | dati_merged$NomeTipoSensore=="Biossido di Azoto" |
dati_merged$NomeTipoSensore=="Ossidi di Azoto" | dati_merged$NomeTipoSensore=="Monossido di Carbonio",]
dati_filtered <- dati_filtered[dati_filtered$valore > 0,]
dati_grouped <- dati_filtered %>%
group_by(idsensore, dataora, Comune, Provincia, NomeTipoSensore) %>%
summarise_at(vars(valore), list(valore = mean))
dati_grouped["anno"] = year
dati_all <- rbind(dati_all, dati_grouped)
dati_all <- dati_all %>% mutate(NomeTipoSensoreENG =
case_when(NomeTipoSensore == "Particelle sospese PM2.5" ~ "PM2.5",
NomeTipoSensore == "PM10 (SM2005)" ~ "PM10",
NomeTipoSensore == "PM10" ~ "PM10",
NomeTipoSensore == "Ozono" ~ "O3 - Ozone",
NomeTipoSensore == "Biossido di Azoto" ~ "NO2 - Nitrogen Dioxide",
NomeTipoSensore == "Ossidi di Azoto" ~ "NO - Nitric Oxide",
NomeTipoSensore == "Monossido di Carbonio" ~ "CO - Carbon Monoxide"
))
dati_all <- dati_all %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
print(year)
}
View(dati_all)
shiny::runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
View(df_max)
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
max(dati_day$NomeTipoSensoreENG[dati_day$NomeTipoSensoreENG=="PM10"])
max(dati_day$valore[dati_day$NomeTipoSensoreENG=="PM10"])
max(dati_day$valore[dati_day$NomeTipoSensoreENG=="PM2.5"])
max(dati_day$valore[dati_day$NomeTipoSensoreENG=="CO - Carbon Monoxide"])
View(df_all)
View(dati_day)
shiny::runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/ARPA_sensors/Dashboard')

shiny::runApp()
runApp()
runApp()
stations_sens <- read.csv("./data/stations_sens.csv")
stations_sens <- read.csv("./data/stations_sens.csv")
stations_weather <- read.csv("./data/stations_weather.csv")
runApp()
dati_small <- read.csv("./data/dati_small.csv")
View(dati_small)
View(df_all)
View(staz)
save(df_all, file = "./data/sensors_map.RData")
load("./data/sensors_map.RData")
stationsSens_map <- staz
load("./data/staz.RData")
stationsSens_map <- staz
stations_sens_map <- staz
stations_sens_map <- staz
load("./data/staz.RData")
stations_sens_map <- staz
save(stations_sens_map, file = "./data/stations_sens_map.RData")
load("./data/inquinanti.RData")
sensors_map <- df_all
save(sensors_map, file = "./data/sensors_map.RData")
runApp()
load("./data/df_max.RData")
View(df_max)
write.csv(df_max, "./data/sens_utils.csv", row.names = FALSE)
View(df_max)
runApp()
runApp()
for(year in 2021:2011){
path = paste(".../Data engineering/Data/Sensors/modifiedForBulk/mod_", year, ".csv", sep="")
print(path)}
View(stations_sens_map)
View(stations_sens_map)
library(rgdal)
library(plyr)
library(tidyverse) # tidy data wrangling
library(vroom)     # fats reading/importing csv data
library(sf)        # read spatial data
library(tigris)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
shapef <- st_read("./ProvCM01012022/ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
stationsW<-read.csv("..../Data engineering/Data/Stations/Sensors/stationsW.csv")
stationsW<-read.csv("..../Data engineering/Data/Stations/Weather/stationsW.csv")
stationsW<-read.csv("..../Data engineering/Data/Stations/stationsW.csv")
stationsW<-read.csv("..../Data engineering/Data/Stations/stationsW.csv")
stationsW<-read.csv("..../Data engineering/Data/Stations")
stationsW<-read.csv(".../Data engineering/Data/Stations")
stationsW<-read.csv("../Data engineering/")
stationsW<-read.csv("./data/")
stationsW<-read.csv("..../Data engineering/Data/Stations/stationsW.csv")
stationsW<-read.csv(file.path("..../Data engineering/Data/Stations", "stationsW.csv"))
stationsW<-read.csv(file.path(".../Data engineering/Data/Stations", "stationsW.csv"))
stationsW<-read.csv(file.path(".../", "stationsW.csv"))
stationsW<-read.csv(file.path("...", "stationsW.csv"))
stationsW<-read.csv(file.path("....", "stationsW.csv"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
stationsW<-read.csv(file.path("...", "stationsW.csv"))
stationsW<-read.csv(file.path(".././", "stationsW.csv"))
stationsW<-read.csv(file.path("../../", "stationsW.csv"))
stationsW<-read.csv(file.path("../../Data engineering/Data/Stations", "stationsW.csv"))
shapef <- st_read("./ProvCM01012022/ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
stationsW<-read.csv("../../Data engineering/Data/Stations/stationsW.csv")
View(stationsW)
stationsS$tipologia <- as.factor(stationsS$tipologia)
stationsS$tipologia <- as.factor(stationsW$tipologia)
stationsW$tipologia <- as.factor(stationsW$tipologia)
stationsW<-read.csv("../../Data engineering/Data/Stations/stationsW.csv")
stationsW$tipologia <- as.factor(stationsW$tipologia)
View(stationsW)
stationsW<-read.csv("../../Data engineering/Data/Stations/stationsW.csv")
stationsW$tipologia <- as.factor(stationsW$tipologia)
as.factor(stationsW$tipologia)
stationsW$Tipologia <- as.factor(stationsW$Tipologia)
#Add columns
stations_weather_map <- stationsW[, c(1,2,4,5,7,9,14,15)]
View(stationsW)
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
View(stationsW)
levels(stations_weather_map$Tipologia)
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
Tipologia == "Umidita' Relativa" ~ "Relative Humidity",
Tipologia == "Velocita' Vento" ~ "Wind Speed"
))
View(stationsW)
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
unique(stations_weather_map$Provincia)
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "AL" ~ "Alessandria"
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "AL" ~ "Alessandria",
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
library(dplyr)     # for pipe operator & data manipulations
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "AL" ~ "Alessandria",
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
View(stations_weather_map)
View(stations_weather_map)
levels(stations_weather_map$Tipologia)
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
Tipologia == "Umidita'  Relativa" ~ "Relative Humidity",
Tipologia == "Velocita'  Vento" ~ "Wind Speed"
))
Tipologia == "Temperatura" ~ "Temperature",
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
str_detect(Tipologia, "Umidit") ~ "Relative Humidity",
Tipologia == "Velocita'  Vento" ~ "Wind Speed"
))
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
str_detect(Tipologia, "Umidit") ~ "Relative Humidity",
str_detect(Tipologia, "Velocit") ~ "Wind Speed"
))
View(stations_weather_map)
View(stations_weather_map)
anyNA(stations_weather_map)
#Add colors for palette
stations_weather_map <- v %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#C51B7D",
Tipologia == "Direzione Vento" ~ "#1A9850",
Tipologia == "Livello Idrometrico" ~ "#B2182B",
Tipologia == "Precipitazione" ~ "#FFFF99",
Tipologia == "Radiazione Globale" ~ "#CAB2D6",
Tipologia == "Temperatura" ~ "#E31A1C",
Tipologia == "Umidita' Relativa" ~ "#A6CEE3",
Tipologia == "Velocita' Vento" ~ "#1F78B4"
))
stations_weather_map <- v %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#C51B7D",
Tipologia == "Direzione Vento" ~ "#1A9850",
Tipologia == "Livello Idrometrico" ~ "#B2182B",
Tipologia == "Precipitazione" ~ "#FFFF99",
Tipologia == "Radiazione Globale" ~ "#CAB2D6",
Tipologia == "Temperatura" ~ "#E31A1C",
Tipologia == "Umidita' Relativa" ~ "#A6CEE3",
Tipologia == "Velocita' Vento" ~ "#1F78B4"
))
#Add colors for palette
stations_weather_map <- v %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#C51B7D",
Tipologia == "Direzione Vento" ~ "#1A9850",
Tipologia == "Livello Idrometrico" ~ "#B2182B",
Tipologia == "Precipitazione" ~ "#FFFF99",
Tipologia == "Radiazione Globale" ~ "#CAB2D6",
Tipologia == "Temperatura" ~ "#E31A1C",
str_detect(Tipologia, "Umidit") ~ "#A6CEE3",
str_detect(Tipologia, "Velocit") ~ "#1F78B4"
))
#Add colors for palette
stations_weather_map <-stations_weather_map  %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#C51B7D",
Tipologia == "Direzione Vento" ~ "#1A9850",
Tipologia == "Livello Idrometrico" ~ "#B2182B",
Tipologia == "Precipitazione" ~ "#FFFF99",
Tipologia == "Radiazione Globale" ~ "#CAB2D6",
Tipologia == "Temperatura" ~ "#E31A1C",
str_detect(Tipologia, "Umidit") ~ "#A6CEE3",
str_detect(Tipologia, "Velocit") ~ "#1F78B4"
))
View(shapef)
#Join with shape file
stations_weather_map <- stations_weather_map(shapef, stations_sens_map, "SIGLA", "Provincia", how = "inner")
#Join with shape file
stations_weather_map <- geo_join(shapef, stations_sens_map, "SIGLA", "Provincia", how = "inner")
#Join with shape file
stations_weather_map <- geo_join(shapef, stations_weather_map, "SIGLA", "Provincia", how = "inner")
View(stations_weather_map)
#Add columns
stations_weather_map <- stationsW[, c(1,2,4,5,7,9,14,15)]
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
str_detect(Tipologia, "Umidit") ~ "Relative Humidity",
str_detect(Tipologia, "Velocit") ~ "Wind Speed"
))
#Add colors for palette
stations_weather_map <-stations_weather_map  %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#C51B7D",
Tipologia == "Direzione Vento" ~ "#1A9850",
Tipologia == "Livello Idrometrico" ~ "#B2182B",
Tipologia == "Precipitazione" ~ "#FFFF99",
Tipologia == "Radiazione Globale" ~ "#CAB2D6",
Tipologia == "Temperatura" ~ "#E31A1C",
str_detect(Tipologia, "Umidit") ~ "#A6CEE3",
str_detect(Tipologia, "Velocit") ~ "#1F78B4"
))
#Join with shape file
stations_weather_map <- geo_join(shapef, stations_weather_map, "SIGLA", "Provincia", how = "inner")
#Drop extra province: AL
stations_sens_map <- stations_sens_map %>% drop_na(ProvinciaLong)
#Drop extra province: AL
stations_weather_map <- stations_weather_map %>% drop_na(ProvinciaLong)
#Save for shiny app
save(stations_weather_map, file = "./data/stations_weather_map.RData")
runApp()
runApp()
runApp()
View(stations_sens)
View(stations_weather)
load("./data/weather_sens_map.RData")
stations_weather_map.RData
load("./data/stations_weather_map.RData")
View(stations_weather_map)
runApp()
View(stations_weather_map)
View(stations_weather_map)
stationsW<-read.csv("../../Data engineering/Data/Stations/stationsW.csv")
stationsW$Tipologia <- as.factor(stationsW$Tipologia)
#Add columns
stations_weather_map <- stationsW[, c(1,2,4,5,7,9,14,15)]
View(stations_weather_map)
View(stationsW)
#Add columns
stations_weather_map <- stationsW[, c(1,2,4,5,7,9,13,14,15)]
View(stations_weather_map)
#Add columns
stations_weather_map <- stationsW[, c(1,2,4,5,7,13,14,15)]
View(stations_weather_map)
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
str_detect(Tipologia, "Umidit") ~ "Relative Humidity",
str_detect(Tipologia, "Velocit") ~ "Wind Speed"
))
#Add colors for palette
stations_weather_map <-stations_weather_map  %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#C51B7D",
Tipologia == "Direzione Vento" ~ "#1A9850",
Tipologia == "Livello Idrometrico" ~ "#B2182B",
Tipologia == "Precipitazione" ~ "#FFFF99",
Tipologia == "Radiazione Globale" ~ "#CAB2D6",
Tipologia == "Temperatura" ~ "#E31A1C",
str_detect(Tipologia, "Umidit") ~ "#A6CEE3",
str_detect(Tipologia, "Velocit") ~ "#1F78B4"
))
#Join with shape file
stations_weather_map <- geo_join(shapef, stations_weather_map, "SIGLA", "Provincia", how = "inner")
shapef <- st_read("./ProvCM01012022/ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
#Join with shape file
stations_weather_map <- geo_join(shapef, stations_weather_map, "SIGLA", "Provincia", how = "inner")
#Drop extra province: AL
stations_weather_map <- stations_weather_map %>% drop_na(ProvinciaLong)
#Save for shiny app
save(stations_weather_map, file = "./data/stations_weather_map.RData")
runApp()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
shapef <- st_read("./ProvCM01012022/ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
stationsW<-read.csv("../../Data engineering/Data/Stations/stationsW.csv")
stationsW$Tipologia <- as.factor(stationsW$Tipologia)
#Add columns
stations_weather_map <- stationsW[, c(1,2,4,5,7,13,14,15)]
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
str_detect(Tipologia, "Umidit") ~ "Relative Humidity",
str_detect(Tipologia, "Velocit") ~ "Wind Speed"
))
#Add colors for palette
stations_weather_map <-stations_weather_map  %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#FB9A99",
Tipologia == "Direzione Vento" ~ "#FDBF6F",
Tipologia == "Livello Idrometrico" ~ "#1F78B4",
Tipologia == "Precipitazione" ~ "#B2DF8A",
Tipologia == "Radiazione Globale" ~ "#A6CEE3",
Tipologia == "Temperatura" ~ "#E31A1C",
str_detect(Tipologia, "Umidit") ~ "#33A02C",
str_detect(Tipologia, "Velocit") ~ "#FF7F00"
))
#Join with shape file
stations_weather_map <- geo_join(shapef, stations_weather_map, "SIGLA", "Provincia", how = "inner")
#Drop extra province: AL
stations_weather_map <- stations_weather_map %>% drop_na(ProvinciaLong)
#Save for shiny app
save(stations_weather_map, file = "./data/stations_weather_map.RData")
runApp()
runApp()
runApp()

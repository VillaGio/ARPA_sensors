print(year)
}
View(dati_all)
library(rgdal)
library(plyr)
library(tidyverse) #tidy data wrangling
library(vroom) # fats reading/importing csv data
library(sf) #spatial data
library(tigris) #geojoin
shapef <- st_read("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\shiny\\arpa_maps\\Limiti01012022\\Limiti01012022\\ProvCM01012022\\ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
stazioni<-read.csv('C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\Mappe\\REGIONE_LOMBARDIA\\Stazioni_qualit__dell_aria.csv')
stazioni$NomeTipoSensore <- as.factor(stazioni$NomeTipoSensore)
#Base df
dati_all <- setNames(data.frame(matrix(ncol = 6, nrow = 0)), c("idesensore", "Comune", "Provincia", "NomeTipoSensore", "valore", "anno"))
#Single years csv
for(year in 2021:2011){
path = paste("C:\\Users\\giorg\\OneDrive\\Desktop\\Final Thesis\\ARPA_sensors\\dati_sensori_1968_2020\\mod_", year, ".csv", sep="")
dati <- read.csv(path)
dati_merged <- merge(dati, stazioni, by.x="idsensore", by.y="IdSensore")
dati_filtered <- dati_merged[dati_merged$NomeTipoSensore=="Particelle sospese PM2.5" | dati_merged$NomeTipoSensore=="PM10" |
dati_merged$NomeTipoSensore=="PM10 (SM2005)" | dati_merged$NomeTipoSensore=="Ozono" | dati_merged$NomeTipoSensore=="Biossido di Azoto" |
dati_merged$NomeTipoSensore=="Ossidi di Azoto" | dati_merged$NomeTipoSensore=="Monossido di Carbonio",]
dati_filtered <- dati_filtered[dati_filtered$valore > 0,]
dati_grouped <- dati_filtered %>%
group_by(idsensore, dataora, Comune, Provincia, NomeTipoSensore) %>%
summarise_at(vars(valore), list(valore = mean))
dati_grouped["anno"] = year
dati_all <- rbind(dati_all, dati_grouped)
dati_all <- dati_all %>% mutate(NomeTipoSensoreENG =
case_when(NomeTipoSensore == "Particelle sospese PM2.5" ~ "PM2.5",
NomeTipoSensore == "PM10 (SM2005)" ~ "PM10",
NomeTipoSensore == "PM10" ~ "PM10",
NomeTipoSensore == "Ozono" ~ "O3 - Ozone",
NomeTipoSensore == "Biossido di Azoto" ~ "NO2 - Nitrogen Dioxide",
NomeTipoSensore == "Ossidi di Azoto" ~ "NO - Nitric Oxide",
NomeTipoSensore == "Monossido di Carbonio" ~ "CO - Carbon Monoxide"
))
dati_all <- dati_all %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
print(year)
}
View(dati_all)
shiny::runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
View(df_max)
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/shiny/arpa_maps/arpa_dashboard')
max(dati_day$NomeTipoSensoreENG[dati_day$NomeTipoSensoreENG=="PM10"])
max(dati_day$valore[dati_day$NomeTipoSensoreENG=="PM10"])
max(dati_day$valore[dati_day$NomeTipoSensoreENG=="PM2.5"])
max(dati_day$valore[dati_day$NomeTipoSensoreENG=="CO - Carbon Monoxide"])
View(df_all)
View(dati_day)
shiny::runApp('C:/Users/giorg/OneDrive/Desktop/Final Thesis/ARPA_sensors/Dashboard')
shiny::runApp()
runApp()
runApp()
stations_sens <- read.csv("./data/stations_sens.csv")
stations_sens <- read.csv("./data/stations_sens.csv")
stations_weather <- read.csv("./data/stations_weather.csv")
runApp()
dati_small <- read.csv("./data/dati_small.csv")
View(dati_small)
View(df_all)
View(staz)
save(df_all, file = "./data/sensors_map.RData")
load("./data/sensors_map.RData")
stationsSens_map <- staz
load("./data/staz.RData")
stationsSens_map <- staz
stations_sens_map <- staz
stations_sens_map <- staz
load("./data/staz.RData")
stations_sens_map <- staz
save(stations_sens_map, file = "./data/stations_sens_map.RData")
load("./data/inquinanti.RData")
sensors_map <- df_all
save(sensors_map, file = "./data/sensors_map.RData")
runApp()
load("./data/df_max.RData")
View(df_max)
write.csv(df_max, "./data/sens_utils.csv", row.names = FALSE)
View(df_max)
runApp()
runApp()
for(year in 2021:2011){
path = paste(".../Data engineering/Data/Sensors/modifiedForBulk/mod_", year, ".csv", sep="")
print(path)}
View(stations_sens_map)
View(stations_sens_map)
library(rgdal)
library(plyr)
library(tidyverse) # tidy data wrangling
library(vroom)     # fats reading/importing csv data
library(sf)        # read spatial data
library(tigris)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
shapef <- st_read("./ProvCM01012022/ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
stationsW<-read.csv("..../Data engineering/Data/Stations/Sensors/stationsW.csv")
stationsW<-read.csv("..../Data engineering/Data/Stations/Weather/stationsW.csv")
stationsW<-read.csv("..../Data engineering/Data/Stations/stationsW.csv")
stationsW<-read.csv("..../Data engineering/Data/Stations/stationsW.csv")
stationsW<-read.csv("..../Data engineering/Data/Stations")
stationsW<-read.csv(".../Data engineering/Data/Stations")
stationsW<-read.csv("../Data engineering/")
stationsW<-read.csv("./data/")
stationsW<-read.csv("..../Data engineering/Data/Stations/stationsW.csv")
stationsW<-read.csv(file.path("..../Data engineering/Data/Stations", "stationsW.csv"))
stationsW<-read.csv(file.path(".../Data engineering/Data/Stations", "stationsW.csv"))
stationsW<-read.csv(file.path(".../", "stationsW.csv"))
stationsW<-read.csv(file.path("...", "stationsW.csv"))
stationsW<-read.csv(file.path("....", "stationsW.csv"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
stationsW<-read.csv(file.path("...", "stationsW.csv"))
stationsW<-read.csv(file.path(".././", "stationsW.csv"))
stationsW<-read.csv(file.path("../../", "stationsW.csv"))
stationsW<-read.csv(file.path("../../Data engineering/Data/Stations", "stationsW.csv"))
shapef <- st_read("./ProvCM01012022/ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
stationsW<-read.csv("../../Data engineering/Data/Stations/stationsW.csv")
View(stationsW)
stationsS$tipologia <- as.factor(stationsS$tipologia)
stationsS$tipologia <- as.factor(stationsW$tipologia)
stationsW$tipologia <- as.factor(stationsW$tipologia)
stationsW<-read.csv("../../Data engineering/Data/Stations/stationsW.csv")
stationsW$tipologia <- as.factor(stationsW$tipologia)
View(stationsW)
stationsW<-read.csv("../../Data engineering/Data/Stations/stationsW.csv")
stationsW$tipologia <- as.factor(stationsW$tipologia)
as.factor(stationsW$tipologia)
stationsW$Tipologia <- as.factor(stationsW$Tipologia)
#Add columns
stations_weather_map <- stationsW[, c(1,2,4,5,7,9,14,15)]
View(stationsW)
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
View(stationsW)
levels(stations_weather_map$Tipologia)
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
Tipologia == "Umidita' Relativa" ~ "Relative Humidity",
Tipologia == "Velocita' Vento" ~ "Wind Speed"
))
View(stationsW)
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
unique(stations_weather_map$Provincia)
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "AL" ~ "Alessandria"
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "AL" ~ "Alessandria",
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
library(dplyr)     # for pipe operator & data manipulations
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "AL" ~ "Alessandria",
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
View(stations_weather_map)
View(stations_weather_map)
levels(stations_weather_map$Tipologia)
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
Tipologia == "Umidita'  Relativa" ~ "Relative Humidity",
Tipologia == "Velocita'  Vento" ~ "Wind Speed"
))
Tipologia == "Temperatura" ~ "Temperature",
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
str_detect(Tipologia, "Umidit") ~ "Relative Humidity",
Tipologia == "Velocita'  Vento" ~ "Wind Speed"
))
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
str_detect(Tipologia, "Umidit") ~ "Relative Humidity",
str_detect(Tipologia, "Velocit") ~ "Wind Speed"
))
View(stations_weather_map)
View(stations_weather_map)
anyNA(stations_weather_map)
#Add colors for palette
stations_weather_map <- v %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#C51B7D",
Tipologia == "Direzione Vento" ~ "#1A9850",
Tipologia == "Livello Idrometrico" ~ "#B2182B",
Tipologia == "Precipitazione" ~ "#FFFF99",
Tipologia == "Radiazione Globale" ~ "#CAB2D6",
Tipologia == "Temperatura" ~ "#E31A1C",
Tipologia == "Umidita' Relativa" ~ "#A6CEE3",
Tipologia == "Velocita' Vento" ~ "#1F78B4"
))
stations_weather_map <- v %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#C51B7D",
Tipologia == "Direzione Vento" ~ "#1A9850",
Tipologia == "Livello Idrometrico" ~ "#B2182B",
Tipologia == "Precipitazione" ~ "#FFFF99",
Tipologia == "Radiazione Globale" ~ "#CAB2D6",
Tipologia == "Temperatura" ~ "#E31A1C",
Tipologia == "Umidita' Relativa" ~ "#A6CEE3",
Tipologia == "Velocita' Vento" ~ "#1F78B4"
))
#Add colors for palette
stations_weather_map <- v %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#C51B7D",
Tipologia == "Direzione Vento" ~ "#1A9850",
Tipologia == "Livello Idrometrico" ~ "#B2182B",
Tipologia == "Precipitazione" ~ "#FFFF99",
Tipologia == "Radiazione Globale" ~ "#CAB2D6",
Tipologia == "Temperatura" ~ "#E31A1C",
str_detect(Tipologia, "Umidit") ~ "#A6CEE3",
str_detect(Tipologia, "Velocit") ~ "#1F78B4"
))
#Add colors for palette
stations_weather_map <-stations_weather_map  %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#C51B7D",
Tipologia == "Direzione Vento" ~ "#1A9850",
Tipologia == "Livello Idrometrico" ~ "#B2182B",
Tipologia == "Precipitazione" ~ "#FFFF99",
Tipologia == "Radiazione Globale" ~ "#CAB2D6",
Tipologia == "Temperatura" ~ "#E31A1C",
str_detect(Tipologia, "Umidit") ~ "#A6CEE3",
str_detect(Tipologia, "Velocit") ~ "#1F78B4"
))
View(shapef)
#Join with shape file
stations_weather_map <- stations_weather_map(shapef, stations_sens_map, "SIGLA", "Provincia", how = "inner")
#Join with shape file
stations_weather_map <- geo_join(shapef, stations_sens_map, "SIGLA", "Provincia", how = "inner")
#Join with shape file
stations_weather_map <- geo_join(shapef, stations_weather_map, "SIGLA", "Provincia", how = "inner")
View(stations_weather_map)
#Add columns
stations_weather_map <- stationsW[, c(1,2,4,5,7,9,14,15)]
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
str_detect(Tipologia, "Umidit") ~ "Relative Humidity",
str_detect(Tipologia, "Velocit") ~ "Wind Speed"
))
#Add colors for palette
stations_weather_map <-stations_weather_map  %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#C51B7D",
Tipologia == "Direzione Vento" ~ "#1A9850",
Tipologia == "Livello Idrometrico" ~ "#B2182B",
Tipologia == "Precipitazione" ~ "#FFFF99",
Tipologia == "Radiazione Globale" ~ "#CAB2D6",
Tipologia == "Temperatura" ~ "#E31A1C",
str_detect(Tipologia, "Umidit") ~ "#A6CEE3",
str_detect(Tipologia, "Velocit") ~ "#1F78B4"
))
#Join with shape file
stations_weather_map <- geo_join(shapef, stations_weather_map, "SIGLA", "Provincia", how = "inner")
#Drop extra province: AL
stations_sens_map <- stations_sens_map %>% drop_na(ProvinciaLong)
#Drop extra province: AL
stations_weather_map <- stations_weather_map %>% drop_na(ProvinciaLong)
#Save for shiny app
save(stations_weather_map, file = "./data/stations_weather_map.RData")
runApp()
runApp()
runApp()
View(stations_sens)
View(stations_weather)
load("./data/weather_sens_map.RData")
stations_weather_map.RData
load("./data/stations_weather_map.RData")
View(stations_weather_map)
runApp()
View(stations_weather_map)
View(stations_weather_map)
stationsW<-read.csv("../../Data engineering/Data/Stations/stationsW.csv")
stationsW$Tipologia <- as.factor(stationsW$Tipologia)
#Add columns
stations_weather_map <- stationsW[, c(1,2,4,5,7,9,14,15)]
View(stations_weather_map)
View(stationsW)
#Add columns
stations_weather_map <- stationsW[, c(1,2,4,5,7,9,13,14,15)]
View(stations_weather_map)
#Add columns
stations_weather_map <- stationsW[, c(1,2,4,5,7,13,14,15)]
View(stations_weather_map)
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
str_detect(Tipologia, "Umidit") ~ "Relative Humidity",
str_detect(Tipologia, "Velocit") ~ "Wind Speed"
))
#Add colors for palette
stations_weather_map <-stations_weather_map  %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#C51B7D",
Tipologia == "Direzione Vento" ~ "#1A9850",
Tipologia == "Livello Idrometrico" ~ "#B2182B",
Tipologia == "Precipitazione" ~ "#FFFF99",
Tipologia == "Radiazione Globale" ~ "#CAB2D6",
Tipologia == "Temperatura" ~ "#E31A1C",
str_detect(Tipologia, "Umidit") ~ "#A6CEE3",
str_detect(Tipologia, "Velocit") ~ "#1F78B4"
))
#Join with shape file
stations_weather_map <- geo_join(shapef, stations_weather_map, "SIGLA", "Provincia", how = "inner")
shapef <- st_read("./ProvCM01012022/ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
#Join with shape file
stations_weather_map <- geo_join(shapef, stations_weather_map, "SIGLA", "Provincia", how = "inner")
#Drop extra province: AL
stations_weather_map <- stations_weather_map %>% drop_na(ProvinciaLong)
#Save for shiny app
save(stations_weather_map, file = "./data/stations_weather_map.RData")
runApp()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
shapef <- st_read("./ProvCM01012022/ProvCM01012022_WGS84.shp")
shapef <- shapef[, c(9,13)]
stationsW<-read.csv("../../Data engineering/Data/Stations/stationsW.csv")
stationsW$Tipologia <- as.factor(stationsW$Tipologia)
#Add columns
stations_weather_map <- stationsW[, c(1,2,4,5,7,13,14,15)]
stations_weather_map <- stations_weather_map %>% mutate(ProvinciaLong =
case_when(
Provincia == "BG" ~ "Bergamo",
Provincia == "BS" ~ "Brescia",
Provincia == "CO" ~ "Como",
Provincia == "CR" ~ "Cremona",
Provincia == "LC" ~ "Lecco",
Provincia == "LO" ~ "Lodi",
Provincia == "MN" ~ "Mantova",
Provincia == "MI" ~ "Milano",
Provincia == "MB" ~ "Monza e Brianza",
Provincia == "PV" ~ "Pavia",
Provincia == "SO" ~ "Sondrio",
Provincia == "VA" ~ "Varese"
))
stations_weather_map <- stations_weather_map %>% mutate(TipologiaENG =
case_when(Tipologia == "Altezza Neve" ~ "Snow Level",
Tipologia == "Direzione Vento" ~ "Wind Direction",
Tipologia == "Livello Idrometrico" ~ "Hydrometric Level",
Tipologia == "Precipitazione" ~ "Rain",
Tipologia == "Radiazione Globale" ~ "Global Radiation",
Tipologia == "Temperatura" ~ "Temperature",
str_detect(Tipologia, "Umidit") ~ "Relative Humidity",
str_detect(Tipologia, "Velocit") ~ "Wind Speed"
))
#Add colors for palette
stations_weather_map <-stations_weather_map  %>% mutate(color =
case_when(Tipologia == "Altezza Neve" ~ "#FB9A99",
Tipologia == "Direzione Vento" ~ "#FDBF6F",
Tipologia == "Livello Idrometrico" ~ "#1F78B4",
Tipologia == "Precipitazione" ~ "#B2DF8A",
Tipologia == "Radiazione Globale" ~ "#A6CEE3",
Tipologia == "Temperatura" ~ "#E31A1C",
str_detect(Tipologia, "Umidit") ~ "#33A02C",
str_detect(Tipologia, "Velocit") ~ "#FF7F00"
))
#Join with shape file
stations_weather_map <- geo_join(shapef, stations_weather_map, "SIGLA", "Provincia", how = "inner")
#Drop extra province: AL
stations_weather_map <- stations_weather_map %>% drop_na(ProvinciaLong)
#Save for shiny app
save(stations_weather_map, file = "./data/stations_weather_map.RData")
runApp()
runApp()
runApp()

// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package arpa_data.bulkinserts_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.GetLastSundayMarch;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaFlex_1
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: bulkInsertS Purpose: <br>
 * Description: Performs ingestion of sensors data from 1968 to 2021 stored in
 * csv files. Those are splitted into smaller-size csv to enhance performance by
 * calling splitCsvBulk job. Removes duplicates and handles the issue of
 * daylight saving time change. Writes job logs in postgres db table by calling
 * finalizeBulk job and cleans csv files generated in the splitting process.
 * <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class bulkInsertS implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (main_path != null) {

				this.setProperty("main_path", main_path.toString());

			}

			if (path_bulk != null) {

				this.setProperty("path_bulk", path_bulk.toString());

			}

			if (path_original != null) {

				this.setProperty("path_original", path_original.toString());

			}

			if (path_splitted != null) {

				this.setProperty("path_splitted", path_splitted.toString());

			}

			if (regex_file_to_read != null) {

				this.setProperty("regex_file_to_read", regex_file_to_read.toString());

			}

			if (sensors_path_input != null) {

				this.setProperty("sensors_path_input", sensors_path_input.toString());

			}

			if (sensors_path_input_splitted != null) {

				this.setProperty("sensors_path_input_splitted", sensors_path_input_splitted.toString());

			}

			if (sensors_path_output != null) {

				this.setProperty("sensors_path_output", sensors_path_output.toString());

			}

			if (weather_path_input != null) {

				this.setProperty("weather_path_input", weather_path_input.toString());

			}

			if (weather_path_input_splitted != null) {

				this.setProperty("weather_path_input_splitted", weather_path_input_splitted.toString());

			}

			if (weather_path_output != null) {

				this.setProperty("weather_path_output", weather_path_output.toString());

			}

			if (postgresWoneli_AdditionalParams != null) {

				this.setProperty("postgresWoneli_AdditionalParams", postgresWoneli_AdditionalParams.toString());

			}

			if (postgresWoneli_Database != null) {

				this.setProperty("postgresWoneli_Database", postgresWoneli_Database.toString());

			}

			if (postgresWoneli_Login != null) {

				this.setProperty("postgresWoneli_Login", postgresWoneli_Login.toString());

			}

			if (postgresWoneli_Password != null) {

				this.setProperty("postgresWoneli_Password", postgresWoneli_Password.toString());

			}

			if (postgresWoneli_Port != null) {

				this.setProperty("postgresWoneli_Port", postgresWoneli_Port.toString());

			}

			if (postgresWoneli_Schema != null) {

				this.setProperty("postgresWoneli_Schema", postgresWoneli_Schema.toString());

			}

			if (postgresWoneli_Server != null) {

				this.setProperty("postgresWoneli_Server", postgresWoneli_Server.toString());

			}

			if (category != null) {

				this.setProperty("category", category.toString());

			}

			if (csv_to_split != null) {

				this.setProperty("csv_to_split", csv_to_split.toString());

			}

			if (duration != null) {

				this.setProperty("duration", duration.toString());

			}

			if (num_rows != null) {

				this.setProperty("num_rows", num_rows.toString());

			}

			if (operation != null) {

				this.setProperty("operation", operation.toString());

			}

			if (table_name != null) {

				this.setProperty("table_name", table_name.toString());

			}

			if (truncate != null) {

				this.setProperty("truncate", truncate.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String main_path;

		public String getMain_path() {
			return this.main_path;
		}

		public String path_bulk;

		public String getPath_bulk() {
			return this.path_bulk;
		}

		public String path_original;

		public String getPath_original() {
			return this.path_original;
		}

		public String path_splitted;

		public String getPath_splitted() {
			return this.path_splitted;
		}

		public String regex_file_to_read;

		public String getRegex_file_to_read() {
			return this.regex_file_to_read;
		}

		public String sensors_path_input;

		public String getSensors_path_input() {
			return this.sensors_path_input;
		}

		public String sensors_path_input_splitted;

		public String getSensors_path_input_splitted() {
			return this.sensors_path_input_splitted;
		}

		public String sensors_path_output;

		public String getSensors_path_output() {
			return this.sensors_path_output;
		}

		public String weather_path_input;

		public String getWeather_path_input() {
			return this.weather_path_input;
		}

		public String weather_path_input_splitted;

		public String getWeather_path_input_splitted() {
			return this.weather_path_input_splitted;
		}

		public String weather_path_output;

		public String getWeather_path_output() {
			return this.weather_path_output;
		}

		public String postgresWoneli_AdditionalParams;

		public String getPostgresWoneli_AdditionalParams() {
			return this.postgresWoneli_AdditionalParams;
		}

		public String postgresWoneli_Database;

		public String getPostgresWoneli_Database() {
			return this.postgresWoneli_Database;
		}

		public String postgresWoneli_Login;

		public String getPostgresWoneli_Login() {
			return this.postgresWoneli_Login;
		}

		public java.lang.String postgresWoneli_Password;

		public java.lang.String getPostgresWoneli_Password() {
			return this.postgresWoneli_Password;
		}

		public String postgresWoneli_Port;

		public String getPostgresWoneli_Port() {
			return this.postgresWoneli_Port;
		}

		public String postgresWoneli_Schema;

		public String getPostgresWoneli_Schema() {
			return this.postgresWoneli_Schema;
		}

		public String postgresWoneli_Server;

		public String getPostgresWoneli_Server() {
			return this.postgresWoneli_Server;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String csv_to_split;

		public String getCsv_to_split() {
			return this.csv_to_split;
		}

		public Integer duration;

		public Integer getDuration() {
			return this.duration;
		}

		public Integer num_rows;

		public Integer getNum_rows() {
			return this.num_rows;
		}

		public String operation;

		public String getOperation() {
			return this.operation;
		}

		public String table_name;

		public String getTable_name() {
			return this.table_name;
		}

		public Boolean truncate;

		public Boolean getTruncate() {
			return this.truncate;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "bulkInsertS";
	private final String projectName = "ARPA_DATA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					bulkInsertS.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(bulkInsertS.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileList_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutputBulkExec_2_tPOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tDBOutputBulkExec_2_tPBE_error(exception, errorComponent, globalMap);

	}

	public void tDBOutputBulkExec_2_tPBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileList_2 begin ] start
				 */

				int NB_ITERATE_tRunJob_1 = 0; // for statistics

				ok_Hash.put("tFileList_2", false);
				start_Hash.put("tFileList_2", System.currentTimeMillis());

				currentComponent = "tFileList_2";

				int tos_count_tFileList_2 = 0;

				String directory_tFileList_2 = context.main_path + context.sensors_path_input;
				final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_2.add(context.regex_file_to_read);
				for (final String filemask_tFileList_2 : maskList_tFileList_2) {
					String filemask_compile_tFileList_2 = filemask_tFileList_2;

					java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_2);
					patternList_tFileList_2.add(fileNamePattern_tFileList_2);
				}
				int NB_FILEtFileList_2 = 0;

				final boolean case_sensitive_tFileList_2 = true;

				final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
				java.io.File file_tFileList_2 = new java.io.File(directory_tFileList_2);

				file_tFileList_2.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_2 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
								if (fileNamePattern_tFileList_2.matcher(fileName_tFileList_2).matches()) {
									if (!filePath_tFileList_2.contains(file.getAbsolutePath())) {
										list_tFileList_2.add(file);
										filePath_tFileList_2.add(file.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				Comparator<java.io.File> fileNameASC_tFileList_2 = new Comparator<java.io.File>() {

					public int compare(java.io.File o1, java.io.File o2) {
						boolean bO1IsFile = o1.isFile();
						boolean bO2IsFile = o2.isFile();

						if (bO1IsFile && bO2IsFile) {
							return (o1.getName()).compareTo(o2.getName());
						} else if (bO1IsFile && (!bO2IsFile)) {
							return 1;
						} else if ((!bO1IsFile) && bO2IsFile) {
							return -1;
						} else if (!bO1IsFile && !bO2IsFile) {
							return (o1.getName()).compareTo(o2.getName());
						} else {
							return 0;
						}
					}
				};
				java.util.Collections.sort(list_tFileList_2, fileNameASC_tFileList_2);

				for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2.size(); i_tFileList_2++) {
					java.io.File files_tFileList_2 = list_tFileList_2.get(i_tFileList_2);
					String fileName_tFileList_2 = files_tFileList_2.getName();

					String currentFileName_tFileList_2 = files_tFileList_2.getName();
					String currentFilePath_tFileList_2 = files_tFileList_2.getAbsolutePath();
					String currentFileDirectory_tFileList_2 = files_tFileList_2.getParent();
					String currentFileExtension_tFileList_2 = null;

					if (files_tFileList_2.getName().contains(".") && files_tFileList_2.isFile()) {
						currentFileExtension_tFileList_2 = files_tFileList_2.getName()
								.substring(files_tFileList_2.getName().lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_2 = "";
					}

					NB_FILEtFileList_2++;
					globalMap.put("tFileList_2_CURRENT_FILE", currentFileName_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEPATH", currentFilePath_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_2);
					globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

					/**
					 * [tFileList_2 begin ] stop
					 */

					/**
					 * [tFileList_2 main ] start
					 */

					currentComponent = "tFileList_2";

					tos_count_tFileList_2++;

					/**
					 * [tFileList_2 main ] stop
					 */

					/**
					 * [tFileList_2 process_data_begin ] start
					 */

					currentComponent = "tFileList_2";

					/**
					 * [tFileList_2 process_data_begin ] stop
					 */
					NB_ITERATE_tRunJob_1++;

					if (execStat) {
						runStat.updateStatOnConnection("weather_data", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("DateChanged", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("uniques", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk7", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk13", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk11", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk10", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnSubjobOk1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("data", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tRunJob_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tRunJob_1 begin ] start
					 */

					ok_Hash.put("tRunJob_1", false);
					start_Hash.put("tRunJob_1", System.currentTimeMillis());

					currentComponent = "tRunJob_1";

					int tos_count_tRunJob_1 = 0;

					/**
					 * [tRunJob_1 begin ] stop
					 */

					/**
					 * [tRunJob_1 main ] start
					 */

					currentComponent = "tRunJob_1";

					java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

					paraList_tRunJob_1.add("--father_pid=" + pid);

					paraList_tRunJob_1.add("--root_pid=" + rootPid);

					paraList_tRunJob_1.add("--father_node=tRunJob_1");

					paraList_tRunJob_1.add("--context=Default");

					if (enableLogStash) {
						paraList_tRunJob_1.add("--audit.enabled=" + enableLogStash);
					}

					// for feature:10589

					paraList_tRunJob_1.add("--stat_port=" + portStats);

					if (resuming_logs_dir_path != null) {
						paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
					}
					String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
					String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
					if ("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null) {
						paraList_tRunJob_1.add("--resuming_checkpoint_path="
								+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
					}
					paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");

					java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

					Object obj_tRunJob_1 = null;

					obj_tRunJob_1 = ((String) globalMap.get("tFileList_2_CURRENT_FILE"));
					if (obj_tRunJob_1 != null) {
						if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
							paraList_tRunJob_1
									.add("--context_param csv_to_split=" + ((java.util.Date) obj_tRunJob_1).getTime());
						} else {
							paraList_tRunJob_1.add("--context_param csv_to_split="
									+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
						}
					} else {
						paraList_tRunJob_1.add("--context_param csv_to_split="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

					parentContextMap_tRunJob_1.put("csv_to_split", obj_tRunJob_1);

					obj_tRunJob_1 = "sens_data_";
					if (obj_tRunJob_1 != null) {
						if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
							paraList_tRunJob_1
									.add("--context_param category=" + ((java.util.Date) obj_tRunJob_1).getTime());
						} else {
							paraList_tRunJob_1.add(
									"--context_param category=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
						}
					} else {
						paraList_tRunJob_1.add("--context_param category="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

					parentContextMap_tRunJob_1.put("category", obj_tRunJob_1);

					obj_tRunJob_1 = context.main_path + context.sensors_path_input_splitted;
					if (obj_tRunJob_1 != null) {
						if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
							paraList_tRunJob_1
									.add("--context_param path_splitted=" + ((java.util.Date) obj_tRunJob_1).getTime());
						} else {
							paraList_tRunJob_1.add("--context_param path_splitted="
									+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
						}
					} else {
						paraList_tRunJob_1.add("--context_param path_splitted="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

					parentContextMap_tRunJob_1.put("path_splitted", obj_tRunJob_1);

					obj_tRunJob_1 = context.main_path + context.sensors_path_input;
					if (obj_tRunJob_1 != null) {
						if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
							paraList_tRunJob_1
									.add("--context_param path_original=" + ((java.util.Date) obj_tRunJob_1).getTime());
						} else {
							paraList_tRunJob_1.add("--context_param path_original="
									+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
						}
					} else {
						paraList_tRunJob_1.add("--context_param path_original="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

					parentContextMap_tRunJob_1.put("path_original", obj_tRunJob_1);

					arpa_data.splitcsv_0_1.splitCsv childJob_tRunJob_1 = new arpa_data.splitcsv_0_1.splitCsv();
					// pass DataSources
					java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (null != talendDataSources_tRunJob_1) {
						java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
						for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
								.entrySet()) {
							dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
									talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
						}
						childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
					}

					childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

					String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
							.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

					if (childJob_tRunJob_1.getErrorCode() == null) {
						globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null
								&& ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
					} else {
						globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
					}
					if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
						globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
								childJob_tRunJob_1.getExceptionStackTrace());
					}
					errorCode = childJob_tRunJob_1.getErrorCode();
					if (childJob_tRunJob_1.getErrorCode() != null
							|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
						java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
						throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1 != null)
								? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage())
								: ""));
					}

					tos_count_tRunJob_1++;

					/**
					 * [tRunJob_1 main ] stop
					 */

					/**
					 * [tRunJob_1 process_data_begin ] start
					 */

					currentComponent = "tRunJob_1";

					/**
					 * [tRunJob_1 process_data_begin ] stop
					 */

					/**
					 * [tRunJob_1 process_data_end ] start
					 */

					currentComponent = "tRunJob_1";

					/**
					 * [tRunJob_1 process_data_end ] stop
					 */

					/**
					 * [tRunJob_1 end ] start
					 */

					currentComponent = "tRunJob_1";

					ok_Hash.put("tRunJob_1", true);
					end_Hash.put("tRunJob_1", System.currentTimeMillis());

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
					}
					tDBConnection_1Process(globalMap);

					/**
					 * [tRunJob_1 end ] stop
					 */
					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tRunJob_1);
					}

					/**
					 * [tFileList_2 process_data_end ] start
					 */

					currentComponent = "tFileList_2";

					/**
					 * [tFileList_2 process_data_end ] stop
					 */

					/**
					 * [tFileList_2 end ] start
					 */

					currentComponent = "tFileList_2";

				}
				globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

				ok_Hash.put("tFileList_2", true);
				end_Hash.put("tFileList_2", System.currentTimeMillis());

				/**
				 * [tFileList_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_2 finally ] start
				 */

				currentComponent = "tFileList_2";

				/**
				 * [tFileList_2 finally ] stop
				 */

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String dbProperties_tDBConnection_1 = context.postgresWoneli_AdditionalParams;
				String url_tDBConnection_1 = "jdbc:postgresql://" + context.postgresWoneli_Server + ":"
						+ context.postgresWoneli_Port + "/" + context.postgresWoneli_Database;

				if (dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
					url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
				}
				String dbUser_tDBConnection_1 = context.postgresWoneli_Login;

				final String decryptedPassword_tDBConnection_1 = context.postgresWoneli_Password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
					if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							globalMap.put("tDBConnection_1_ERROR_MESSAGE", e_tDBConnection_1.getMessage());
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", context.postgresWoneli_Schema);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileList_3Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class DateChangedStruct implements routines.system.IPersistableRow<DateChangedStruct> {
		final static byte[] commonByteArrayLock_ARPA_DATA_bulkInsertS = new byte[0];
		static byte[] commonByteArray_ARPA_DATA_bulkInsertS = new byte[0];

		public Long idsensore;

		public Long getIdsensore() {
			return this.idsensore;
		}

		public java.util.Date dataora;

		public java.util.Date getDataora() {
			return this.dataora;
		}

		public Float valore;

		public Float getValore() {
			return this.valore;
		}

		public String stato;

		public String getStato() {
			return this.stato;
		}

		public Integer idoperatore;

		public Integer getIdoperatore() {
			return this.idoperatore;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ARPA_DATA_bulkInsertS.length) {
					if (length < 1024 && commonByteArray_ARPA_DATA_bulkInsertS.length == 0) {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[1024];
					} else {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ARPA_DATA_bulkInsertS, 0, length);
				strReturn = new String(commonByteArray_ARPA_DATA_bulkInsertS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ARPA_DATA_bulkInsertS.length) {
					if (length < 1024 && commonByteArray_ARPA_DATA_bulkInsertS.length == 0) {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[1024];
					} else {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ARPA_DATA_bulkInsertS, 0, length);
				strReturn = new String(commonByteArray_ARPA_DATA_bulkInsertS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ARPA_DATA_bulkInsertS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.idsensore = null;
					} else {
						this.idsensore = dis.readLong();
					}

					this.dataora = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valore = null;
					} else {
						this.valore = dis.readFloat();
					}

					this.stato = readString(dis);

					this.idoperatore = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ARPA_DATA_bulkInsertS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.idsensore = null;
					} else {
						this.idsensore = dis.readLong();
					}

					this.dataora = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valore = null;
					} else {
						this.valore = dis.readFloat();
					}

					this.stato = readString(dis);

					this.idoperatore = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.idsensore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.idsensore);
				}

				// java.util.Date

				writeDate(this.dataora, dos);

				// Float

				if (this.valore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.valore);
				}

				// String

				writeString(this.stato, dos);

				// Integer

				writeInteger(this.idoperatore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.idsensore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.idsensore);
				}

				// java.util.Date

				writeDate(this.dataora, dos);

				// Float

				if (this.valore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.valore);
				}

				// String

				writeString(this.stato, dos);

				// Integer

				writeInteger(this.idoperatore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idsensore=" + String.valueOf(idsensore));
			sb.append(",dataora=" + String.valueOf(dataora));
			sb.append(",valore=" + String.valueOf(valore));
			sb.append(",stato=" + stato);
			sb.append(",idoperatore=" + String.valueOf(idoperatore));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DateChangedStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class dataStruct implements routines.system.IPersistableRow<dataStruct> {
		final static byte[] commonByteArrayLock_ARPA_DATA_bulkInsertS = new byte[0];
		static byte[] commonByteArray_ARPA_DATA_bulkInsertS = new byte[0];

		public Long IdSensore;

		public Long getIdSensore() {
			return this.IdSensore;
		}

		public String Data;

		public String getData() {
			return this.Data;
		}

		public Float Valore;

		public Float getValore() {
			return this.Valore;
		}

		public String Stato;

		public String getStato() {
			return this.Stato;
		}

		public Integer idOperatore;

		public Integer getIdOperatore() {
			return this.idOperatore;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ARPA_DATA_bulkInsertS.length) {
					if (length < 1024 && commonByteArray_ARPA_DATA_bulkInsertS.length == 0) {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[1024];
					} else {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ARPA_DATA_bulkInsertS, 0, length);
				strReturn = new String(commonByteArray_ARPA_DATA_bulkInsertS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ARPA_DATA_bulkInsertS.length) {
					if (length < 1024 && commonByteArray_ARPA_DATA_bulkInsertS.length == 0) {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[1024];
					} else {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ARPA_DATA_bulkInsertS, 0, length);
				strReturn = new String(commonByteArray_ARPA_DATA_bulkInsertS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ARPA_DATA_bulkInsertS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.IdSensore = null;
					} else {
						this.IdSensore = dis.readLong();
					}

					this.Data = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Valore = null;
					} else {
						this.Valore = dis.readFloat();
					}

					this.Stato = readString(dis);

					this.idOperatore = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ARPA_DATA_bulkInsertS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.IdSensore = null;
					} else {
						this.IdSensore = dis.readLong();
					}

					this.Data = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Valore = null;
					} else {
						this.Valore = dis.readFloat();
					}

					this.Stato = readString(dis);

					this.idOperatore = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.IdSensore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.IdSensore);
				}

				// String

				writeString(this.Data, dos);

				// Float

				if (this.Valore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Valore);
				}

				// String

				writeString(this.Stato, dos);

				// Integer

				writeInteger(this.idOperatore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.IdSensore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.IdSensore);
				}

				// String

				writeString(this.Data, dos);

				// Float

				if (this.Valore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Valore);
				}

				// String

				writeString(this.Stato, dos);

				// Integer

				writeInteger(this.idOperatore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IdSensore=" + String.valueOf(IdSensore));
			sb.append(",Data=" + Data);
			sb.append(",Valore=" + String.valueOf(Valore));
			sb.append(",Stato=" + Stato);
			sb.append(",idOperatore=" + String.valueOf(idOperatore));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dataStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class uniquesStruct implements routines.system.IPersistableRow<uniquesStruct> {
		final static byte[] commonByteArrayLock_ARPA_DATA_bulkInsertS = new byte[0];
		static byte[] commonByteArray_ARPA_DATA_bulkInsertS = new byte[0];

		public Long IdSensore;

		public Long getIdSensore() {
			return this.IdSensore;
		}

		public String Data;

		public String getData() {
			return this.Data;
		}

		public Float Valore;

		public Float getValore() {
			return this.Valore;
		}

		public String Stato;

		public String getStato() {
			return this.Stato;
		}

		public Integer idOperatore;

		public Integer getIdOperatore() {
			return this.idOperatore;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ARPA_DATA_bulkInsertS.length) {
					if (length < 1024 && commonByteArray_ARPA_DATA_bulkInsertS.length == 0) {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[1024];
					} else {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ARPA_DATA_bulkInsertS, 0, length);
				strReturn = new String(commonByteArray_ARPA_DATA_bulkInsertS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ARPA_DATA_bulkInsertS.length) {
					if (length < 1024 && commonByteArray_ARPA_DATA_bulkInsertS.length == 0) {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[1024];
					} else {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ARPA_DATA_bulkInsertS, 0, length);
				strReturn = new String(commonByteArray_ARPA_DATA_bulkInsertS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ARPA_DATA_bulkInsertS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.IdSensore = null;
					} else {
						this.IdSensore = dis.readLong();
					}

					this.Data = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Valore = null;
					} else {
						this.Valore = dis.readFloat();
					}

					this.Stato = readString(dis);

					this.idOperatore = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ARPA_DATA_bulkInsertS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.IdSensore = null;
					} else {
						this.IdSensore = dis.readLong();
					}

					this.Data = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Valore = null;
					} else {
						this.Valore = dis.readFloat();
					}

					this.Stato = readString(dis);

					this.idOperatore = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.IdSensore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.IdSensore);
				}

				// String

				writeString(this.Data, dos);

				// Float

				if (this.Valore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Valore);
				}

				// String

				writeString(this.Stato, dos);

				// Integer

				writeInteger(this.idOperatore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.IdSensore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.IdSensore);
				}

				// String

				writeString(this.Data, dos);

				// Float

				if (this.Valore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Valore);
				}

				// String

				writeString(this.Stato, dos);

				// Integer

				writeInteger(this.idOperatore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IdSensore=" + String.valueOf(IdSensore));
			sb.append(",Data=" + Data);
			sb.append(",Valore=" + String.valueOf(Valore));
			sb.append(",Stato=" + Stato);
			sb.append(",idOperatore=" + String.valueOf(idOperatore));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(uniquesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class weather_dataStruct implements routines.system.IPersistableRow<weather_dataStruct> {
		final static byte[] commonByteArrayLock_ARPA_DATA_bulkInsertS = new byte[0];
		static byte[] commonByteArray_ARPA_DATA_bulkInsertS = new byte[0];

		public Long IdSensore;

		public Long getIdSensore() {
			return this.IdSensore;
		}

		public String Data;

		public String getData() {
			return this.Data;
		}

		public Float Valore;

		public Float getValore() {
			return this.Valore;
		}

		public String Stato;

		public String getStato() {
			return this.Stato;
		}

		public Integer idOperatore;

		public Integer getIdOperatore() {
			return this.idOperatore;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ARPA_DATA_bulkInsertS.length) {
					if (length < 1024 && commonByteArray_ARPA_DATA_bulkInsertS.length == 0) {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[1024];
					} else {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ARPA_DATA_bulkInsertS, 0, length);
				strReturn = new String(commonByteArray_ARPA_DATA_bulkInsertS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ARPA_DATA_bulkInsertS.length) {
					if (length < 1024 && commonByteArray_ARPA_DATA_bulkInsertS.length == 0) {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[1024];
					} else {
						commonByteArray_ARPA_DATA_bulkInsertS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ARPA_DATA_bulkInsertS, 0, length);
				strReturn = new String(commonByteArray_ARPA_DATA_bulkInsertS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ARPA_DATA_bulkInsertS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.IdSensore = null;
					} else {
						this.IdSensore = dis.readLong();
					}

					this.Data = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Valore = null;
					} else {
						this.Valore = dis.readFloat();
					}

					this.Stato = readString(dis);

					this.idOperatore = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ARPA_DATA_bulkInsertS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.IdSensore = null;
					} else {
						this.IdSensore = dis.readLong();
					}

					this.Data = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Valore = null;
					} else {
						this.Valore = dis.readFloat();
					}

					this.Stato = readString(dis);

					this.idOperatore = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.IdSensore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.IdSensore);
				}

				// String

				writeString(this.Data, dos);

				// Float

				if (this.Valore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Valore);
				}

				// String

				writeString(this.Stato, dos);

				// Integer

				writeInteger(this.idOperatore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.IdSensore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.IdSensore);
				}

				// String

				writeString(this.Data, dos);

				// Float

				if (this.Valore == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Valore);
				}

				// String

				writeString(this.Stato, dos);

				// Integer

				writeInteger(this.idOperatore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IdSensore=" + String.valueOf(IdSensore));
			sb.append(",Data=" + Data);
			sb.append(",Valore=" + String.valueOf(Valore));
			sb.append(",Stato=" + Stato);
			sb.append(",idOperatore=" + String.valueOf(idOperatore));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(weather_dataStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileList_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileList_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				weather_dataStruct weather_data = new weather_dataStruct();
				uniquesStruct uniques = new uniquesStruct();
				dataStruct data = new dataStruct();
				DateChangedStruct DateChanged = new DateChangedStruct();

				/**
				 * [tFileList_3 begin ] start
				 */

				int NB_ITERATE_tFileInputDelimited_1 = 0; // for statistics

				ok_Hash.put("tFileList_3", false);
				start_Hash.put("tFileList_3", System.currentTimeMillis());

				currentComponent = "tFileList_3";

				int tos_count_tFileList_3 = 0;

				String directory_tFileList_3 = context.main_path + context.sensors_path_input_splitted;
				final java.util.List<String> maskList_tFileList_3 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_3 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_3.add(".*.csv");
				for (final String filemask_tFileList_3 : maskList_tFileList_3) {
					String filemask_compile_tFileList_3 = filemask_tFileList_3;

					java.util.regex.Pattern fileNamePattern_tFileList_3 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_3);
					patternList_tFileList_3.add(fileNamePattern_tFileList_3);
				}
				int NB_FILEtFileList_3 = 0;

				final boolean case_sensitive_tFileList_3 = true;

				final java.util.List<java.io.File> list_tFileList_3 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_3 = new java.util.HashSet<String>();
				java.io.File file_tFileList_3 = new java.io.File(directory_tFileList_3);

				file_tFileList_3.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_3 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_3 : patternList_tFileList_3) {
								if (fileNamePattern_tFileList_3.matcher(fileName_tFileList_3).matches()) {
									if (!filePath_tFileList_3.contains(file.getAbsolutePath())) {
										list_tFileList_3.add(file);
										filePath_tFileList_3.add(file.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				Comparator<java.io.File> fileNameASC_tFileList_3 = new Comparator<java.io.File>() {

					public int compare(java.io.File o1, java.io.File o2) {
						boolean bO1IsFile = o1.isFile();
						boolean bO2IsFile = o2.isFile();

						if (bO1IsFile && bO2IsFile) {
							return (o1.getName()).compareTo(o2.getName());
						} else if (bO1IsFile && (!bO2IsFile)) {
							return 1;
						} else if ((!bO1IsFile) && bO2IsFile) {
							return -1;
						} else if (!bO1IsFile && !bO2IsFile) {
							return (o1.getName()).compareTo(o2.getName());
						} else {
							return 0;
						}
					}
				};
				java.util.Collections.sort(list_tFileList_3, fileNameASC_tFileList_3);

				for (int i_tFileList_3 = 0; i_tFileList_3 < list_tFileList_3.size(); i_tFileList_3++) {
					java.io.File files_tFileList_3 = list_tFileList_3.get(i_tFileList_3);
					String fileName_tFileList_3 = files_tFileList_3.getName();

					String currentFileName_tFileList_3 = files_tFileList_3.getName();
					String currentFilePath_tFileList_3 = files_tFileList_3.getAbsolutePath();
					String currentFileDirectory_tFileList_3 = files_tFileList_3.getParent();
					String currentFileExtension_tFileList_3 = null;

					if (files_tFileList_3.getName().contains(".") && files_tFileList_3.isFile()) {
						currentFileExtension_tFileList_3 = files_tFileList_3.getName()
								.substring(files_tFileList_3.getName().lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_3 = "";
					}

					NB_FILEtFileList_3++;
					globalMap.put("tFileList_3_CURRENT_FILE", currentFileName_tFileList_3);
					globalMap.put("tFileList_3_CURRENT_FILEPATH", currentFilePath_tFileList_3);
					globalMap.put("tFileList_3_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_3);
					globalMap.put("tFileList_3_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_3);
					globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);

					/**
					 * [tFileList_3 begin ] stop
					 */

					/**
					 * [tFileList_3 main ] start
					 */

					currentComponent = "tFileList_3";

					tos_count_tFileList_3++;

					/**
					 * [tFileList_3 main ] stop
					 */

					/**
					 * [tFileList_3 process_data_begin ] start
					 */

					currentComponent = "tFileList_3";

					/**
					 * [tFileList_3 process_data_begin ] stop
					 */
					NB_ITERATE_tFileInputDelimited_1++;

					if (execStat) {
						runStat.updateStatOnConnection("weather_data", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("DateChanged", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("uniques", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk7", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk13", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("data", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tFileInputDelimited_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tDBOutputBulkExec_2_tPOB begin ] start
					 */

					ok_Hash.put("tDBOutputBulkExec_2_tPOB", false);
					start_Hash.put("tDBOutputBulkExec_2_tPOB", System.currentTimeMillis());

					currentVirtualComponent = "tDBOutputBulkExec_2";

					currentComponent = "tDBOutputBulkExec_2_tPOB";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "DateChanged");
					}

					int tos_count_tDBOutputBulkExec_2_tPOB = 0;

					int nb_line_tDBOutputBulkExec_2_tPOB = 0;

					final Character OUT_DELIM_tDBOutputBulkExec_2_tPOB = /**
																			 * Start field
																			 * tDBOutputBulkExec_2_tPOB:FIELDSEPARATOR
																			 */
							";"/** End field tDBOutputBulkExec_2_tPOB:FIELDSEPARATOR */
									.charAt(0);

					final String OUT_DELIM_ROWSEP_tDBOutputBulkExec_2_tPOB = /**
																				 * Start field
																				 * tDBOutputBulkExec_2_tPOB:ROWSEPARATOR
																				 */
							"\n"/** End field tDBOutputBulkExec_2_tPOB:ROWSEPARATOR */
					;

					java.io.File file_tDBOutputBulkExec_2_tPOB = new java.io.File(/**
																					 * Start field
																					 * tDBOutputBulkExec_2_tPOB:FILENAME
																					 */
							context.main_path + context.sensors_path_output + "mod_int_" + ((String) globalMap
									.get("tFileList_2_CURRENT_FILE"))/** End field tDBOutputBulkExec_2_tPOB:FILENAME */
					);
					final java.io.BufferedWriter outtDBOutputBulkExec_2_tPOB = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(file_tDBOutputBulkExec_2_tPOB, false), "ISO-8859-15"));
					resourceMap.put("outtDBOutputBulkExec_2_tPOB", outtDBOutputBulkExec_2_tPOB);
					char escapeChar_tDBOutputBulkExec_2_tPOB = "\\".charAt(0);

					char textEnclosure_tDBOutputBulkExec_2_tPOB = "\"".charAt(0);

					int escape_mode_tDBOutputBulkExec_2_tPOB = 0; // 0: double quotes; 1: backslash
					if (escapeChar_tDBOutputBulkExec_2_tPOB == '\\') {
						escape_mode_tDBOutputBulkExec_2_tPOB = 1;
					} else if (escapeChar_tDBOutputBulkExec_2_tPOB == textEnclosure_tDBOutputBulkExec_2_tPOB) {
						escape_mode_tDBOutputBulkExec_2_tPOB = 0;
					} else {
						throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
					}
					if (file_tDBOutputBulkExec_2_tPOB.length() == 0) {
						outtDBOutputBulkExec_2_tPOB.write("idsensore");
						outtDBOutputBulkExec_2_tPOB.write(OUT_DELIM_tDBOutputBulkExec_2_tPOB.toString());
						outtDBOutputBulkExec_2_tPOB.write("dataora");
						outtDBOutputBulkExec_2_tPOB.write(OUT_DELIM_tDBOutputBulkExec_2_tPOB.toString());
						outtDBOutputBulkExec_2_tPOB.write("valore");
						outtDBOutputBulkExec_2_tPOB.write(OUT_DELIM_tDBOutputBulkExec_2_tPOB.toString());
						outtDBOutputBulkExec_2_tPOB.write("stato");
						outtDBOutputBulkExec_2_tPOB.write(OUT_DELIM_tDBOutputBulkExec_2_tPOB.toString());
						outtDBOutputBulkExec_2_tPOB.write("idoperatore");

						outtDBOutputBulkExec_2_tPOB.write(OUT_DELIM_ROWSEP_tDBOutputBulkExec_2_tPOB);
					}

					/**
					 * [tDBOutputBulkExec_2_tPOB begin ] stop
					 */

					/**
					 * [tMap_2 begin ] start
					 */

					ok_Hash.put("tMap_2", false);
					start_Hash.put("tMap_2", System.currentTimeMillis());

					currentComponent = "tMap_2";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "data");
					}

					int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
					class Var__tMap_2__Struct {
						java.util.Date Data;
					}
					Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
					DateChangedStruct DateChanged_tmp = new DateChangedStruct();
// ###############################

					/**
					 * [tMap_2 begin ] stop
					 */

					/**
					 * [tJavaFlex_1 begin ] start
					 */

					ok_Hash.put("tJavaFlex_1", false);
					start_Hash.put("tJavaFlex_1", System.currentTimeMillis());

					currentComponent = "tJavaFlex_1";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "uniques");
					}

					int tos_count_tJavaFlex_1 = 0;

// start part of your Java code

					/**
					 * [tJavaFlex_1 begin ] stop
					 */

					/**
					 * [tUniqRow_2 begin ] start
					 */

					ok_Hash.put("tUniqRow_2", false);
					start_Hash.put("tUniqRow_2", System.currentTimeMillis());

					currentComponent = "tUniqRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "weather_data");
					}

					int tos_count_tUniqRow_2 = 0;

					class KeyStruct_tUniqRow_2 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						Long IdSensore;
						String Data;
						Float Valore;
						String Stato;
						Integer idOperatore;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime * result + ((this.IdSensore == null) ? 0 : this.IdSensore.hashCode());

								result = prime * result + ((this.Data == null) ? 0 : this.Data.hashCode());

								result = prime * result + ((this.Valore == null) ? 0 : this.Valore.hashCode());

								result = prime * result + ((this.Stato == null) ? 0 : this.Stato.hashCode());

								result = prime * result
										+ ((this.idOperatore == null) ? 0 : this.idOperatore.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

							if (this.IdSensore == null) {
								if (other.IdSensore != null)
									return false;

							} else if (!this.IdSensore.equals(other.IdSensore))

								return false;

							if (this.Data == null) {
								if (other.Data != null)
									return false;

							} else if (!this.Data.equals(other.Data))

								return false;

							if (this.Valore == null) {
								if (other.Valore != null)
									return false;

							} else if (!this.Valore.equals(other.Valore))

								return false;

							if (this.Stato == null) {
								if (other.Stato != null)
									return false;

							} else if (!this.Stato.equals(other.Stato))

								return false;

							if (this.idOperatore == null) {
								if (other.idOperatore != null)
									return false;

							} else if (!this.idOperatore.equals(other.idOperatore))

								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_2 = 0;
					int nb_duplicates_tUniqRow_2 = 0;
					KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
					java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

					/**
					 * [tUniqRow_2 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_1", false);
					start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

					currentComponent = "tFileInputDelimited_1";

					int tos_count_tFileInputDelimited_1 = 0;

					final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

					int nb_line_tFileInputDelimited_1 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
					int limit_tFileInputDelimited_1 = -1;
					try {

						Object filename_tFileInputDelimited_1 = context.main_path + context.sensors_path_input_splitted
								+ ((String) globalMap.get("tFileList_3_CURRENT_FILE"));
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
							if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
									context.main_path + context.sensors_path_input_splitted
											+ ((String) globalMap.get("tFileList_3_CURRENT_FILE")),
									"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_1, -1, false);
						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
							rowstate_tFileInputDelimited_1.reset();

							weather_data = null;

							boolean whetherReject_tFileInputDelimited_1 = false;
							weather_data = new weather_dataStruct();
							try {

								int columnIndexWithD_tFileInputDelimited_1 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_1 = 0;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										weather_data.IdSensore = ParserUtils.parseTo_Long(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
												ex_tFileInputDelimited_1.getMessage());
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IdSensore", "weather_data", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									weather_data.IdSensore = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								weather_data.Data = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 2;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										weather_data.Valore = ParserUtils.parseTo_Float(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
												ex_tFileInputDelimited_1.getMessage());
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Valore", "weather_data", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									weather_data.Valore = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								weather_data.Stato = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 4;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										weather_data.idOperatore = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
												ex_tFileInputDelimited_1.getMessage());
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"idOperatore", "weather_data", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									weather_data.idOperatore = null;

								}

								if (rowstate_tFileInputDelimited_1.getException() != null) {
									throw rowstate_tFileInputDelimited_1.getException();
								}

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputDelimited_1 = true;

								System.err.println(e.getMessage());
								weather_data = null;

							}

							/**
							 * [tFileInputDelimited_1 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_1 main ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							tos_count_tFileInputDelimited_1++;

							/**
							 * [tFileInputDelimited_1 main ] stop
							 */

							/**
							 * [tFileInputDelimited_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							/**
							 * [tFileInputDelimited_1 process_data_begin ] stop
							 */
// Start of branch "weather_data"
							if (weather_data != null) {

								/**
								 * [tUniqRow_2 main ] start
								 */

								currentComponent = "tUniqRow_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "weather_data"

									);
								}

								uniques = null;
								finder_tUniqRow_2.IdSensore = weather_data.IdSensore;
								if (weather_data.Data == null) {
									finder_tUniqRow_2.Data = null;
								} else {
									finder_tUniqRow_2.Data = weather_data.Data.toLowerCase();
								}
								finder_tUniqRow_2.Valore = weather_data.Valore;
								if (weather_data.Stato == null) {
									finder_tUniqRow_2.Stato = null;
								} else {
									finder_tUniqRow_2.Stato = weather_data.Stato.toLowerCase();
								}
								finder_tUniqRow_2.idOperatore = weather_data.idOperatore;
								finder_tUniqRow_2.hashCodeDirty = true;
								if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
									KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

									new_tUniqRow_2.IdSensore = weather_data.IdSensore;
									if (weather_data.Data == null) {
										new_tUniqRow_2.Data = null;
									} else {
										new_tUniqRow_2.Data = weather_data.Data.toLowerCase();
									}
									new_tUniqRow_2.Valore = weather_data.Valore;
									if (weather_data.Stato == null) {
										new_tUniqRow_2.Stato = null;
									} else {
										new_tUniqRow_2.Stato = weather_data.Stato.toLowerCase();
									}
									new_tUniqRow_2.idOperatore = weather_data.idOperatore;

									keystUniqRow_2.add(new_tUniqRow_2);
									if (uniques == null) {

										uniques = new uniquesStruct();
									}
									uniques.IdSensore = weather_data.IdSensore;
									uniques.Data = weather_data.Data;
									uniques.Valore = weather_data.Valore;
									uniques.Stato = weather_data.Stato;
									uniques.idOperatore = weather_data.idOperatore;
									nb_uniques_tUniqRow_2++;
								} else {
									nb_duplicates_tUniqRow_2++;
								}

								tos_count_tUniqRow_2++;

								/**
								 * [tUniqRow_2 main ] stop
								 */

								/**
								 * [tUniqRow_2 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_2";

								/**
								 * [tUniqRow_2 process_data_begin ] stop
								 */
// Start of branch "uniques"
								if (uniques != null) {

									/**
									 * [tJavaFlex_1 main ] start
									 */

									currentComponent = "tJavaFlex_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "uniques"

										);
									}

									data.IdSensore = uniques.IdSensore;
									data.Data = uniques.Data;
									data.Valore = uniques.Valore;
									data.Stato = uniques.Stato;
									data.idOperatore = uniques.idOperatore;

// here is the main part of the component,
// a piece of code executed in the row
// loop

									String yearGlobS = ((String) globalMap.get("change_time_date"));
									Integer yearGlob = Integer.parseInt(yearGlobS.split("/")[2].split(" ")[0]);
//System.out.println("YearGlog: " + yearGlob);

									String yearS = uniques.Data.split("/")[2].split(" ")[0];
									Integer year = Integer.parseInt(yearS);
//System.out.println("Year: " + year);

									if (year > 1982 && !year.equals(yearGlob)) {
										int day = GetLastSundayMarch.getLastSundayMarch(year);

										String res = Integer.toString(day) + "/03/" + year + " 02:00:00";
										globalMap.put("change_time_date", res);

									}

									tos_count_tJavaFlex_1++;

									/**
									 * [tJavaFlex_1 main ] stop
									 */

									/**
									 * [tJavaFlex_1 process_data_begin ] start
									 */

									currentComponent = "tJavaFlex_1";

									/**
									 * [tJavaFlex_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_2 main ] start
									 */

									currentComponent = "tMap_2";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "data"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_2 = false;
									boolean mainRowRejected_tMap_2 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_2__Struct Var = Var__tMap_2;
										Var.Data = data.Data.equals("26/05/1968 02:00:00")
												? TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "1968-05-26 01:59:00")
												: data.Data.equals("01/06/1969 02:00:00")
														? TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",
																"1969-06-01 01:59:00")
														: data.Data.equals("31/05/1970 02:00:00")
																? TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",
																		"1970-05-31 01:59:00")
																: data.Data.equals("23/05/1971 02:00:00")
																		? TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",
																				"1971-05-23 01:59:00")
																		: data.Data.equals("28/05/1972 02:00:00")
																				? TalendDate.parseDate(
																						"yyyy-MM-dd HH:mm:ss",
																						"1971-05-28 01:59:00")
																				: data.Data
																						.equals("03/06/1973 02:00:00")
																								? TalendDate.parseDate(
																										"yyyy-MM-dd HH:mm:ss",
																										"1973-06-03 01:59:00")
																								: data.Data.equals(
																										"26/05/1974 02:00:00")
																												? TalendDate
																														.parseDate(
																																"yyyy-MM-dd HH:mm:ss",
																																"1974-05-26 01:59:00")
																												: data.Data
																														.equals("01/06/1975 02:00:00")
																																? TalendDate
																																		.parseDate(
																																				"yyyy-MM-dd HH:mm:ss",
																																				"1975-06-01 01:59:00")
																																: data.Data
																																		.equals("30/05/1976 02:00:00")
																																				? TalendDate
																																						.parseDate(
																																								"yyyy-MM-dd HH:mm:ss",
																																								"1976-05-30 01:59:00")
																																				: data.Data
																																						.equals("22/05/1977 02:00:00")
																																								? TalendDate
																																										.parseDate(
																																												"yyyy-MM-dd HH:mm:ss",
																																												"1977-05-22 01:59:00")
																																								: data.Data
																																										.equals("28/05/1978 02:00:00")
																																												? TalendDate
																																														.parseDate(
																																																"yyyy-MM-dd HH:mm:ss",
																																																"1978-05-28 01:59:00")
																																												: data.Data
																																														.equals("27/05/1979 02:00:00")
																																																? TalendDate
																																																		.parseDate(
																																																				"yyyy-MM-dd HH:mm:ss",
																																																				"1979-05-27 01:59:00")
																																																: data.Data
																																																		.equals("06/04/1980 02:00:00")
																																																				? TalendDate
																																																						.parseDate(
																																																								"yyyy-MM-dd HH:mm:ss",
																																																								"1980-04-06 01:59:00")
																																																				: data.Data
																																																						.equals("29/03/1981 02:00:00")
																																																								? TalendDate
																																																										.parseDate(
																																																												"yyyy-MM-dd HH:mm:ss",
																																																												"1981-03-29 01:59:00")
																																																								: data.Data
																																																										.equals(((String) globalMap
																																																												.get("change_time_date")))
																																																														? TalendDate
																																																																.parseDate(
																																																																		"yyyy-MM-dd HH:mm:ss",
																																																																		TalendDate
																																																																				.formatDate(
																																																																						"yyyy-MM-dd HH:mm:ss",
																																																																						TalendDate
																																																																								.parseDate(
																																																																										"dd/MM/yyyy HH:mm:ss",
																																																																										StringHandling
																																																																												.CHANGE(((String) globalMap
																																																																														.get("change_time_date")),
																																																																														"02:00:00",
																																																																														" 01:59:00"))))
																																																														: TalendDate
																																																																.parseDate(
																																																																		"yyyy-MM-dd HH:mm:ss",
																																																																		TalendDate
																																																																				.formatDate(
																																																																						"yyyy-MM-dd HH:mm:ss",
																																																																						TalendDate
																																																																								.parseDate(
																																																																										"dd/MM/yyyy HH:mm:ss",
																																																																										data.Data)));// ###############################
										// ###############################
										// # Output tables

										DateChanged = null;

// # Output table : 'DateChanged'
										DateChanged_tmp.idsensore = data.IdSensore;
										DateChanged_tmp.dataora = Var.Data;
										DateChanged_tmp.valore = data.Valore;
										DateChanged_tmp.stato = data.Stato;
										DateChanged_tmp.idoperatore = data.idOperatore;
										DateChanged = DateChanged_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_2 = false;

									tos_count_tMap_2++;

									/**
									 * [tMap_2 main ] stop
									 */

									/**
									 * [tMap_2 process_data_begin ] start
									 */

									currentComponent = "tMap_2";

									/**
									 * [tMap_2 process_data_begin ] stop
									 */
// Start of branch "DateChanged"
									if (DateChanged != null) {

										/**
										 * [tDBOutputBulkExec_2_tPOB main ] start
										 */

										currentVirtualComponent = "tDBOutputBulkExec_2";

										currentComponent = "tDBOutputBulkExec_2_tPOB";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "DateChanged"

											);
										}

										String[] row_tDBOutputBulkExec_2_tPOB = new String[] { "", "", "", "", "" };
										if (DateChanged.idsensore != null) {
											row_tDBOutputBulkExec_2_tPOB[0] = String.valueOf(DateChanged.idsensore);
										}
										if (DateChanged.dataora != null) {
											row_tDBOutputBulkExec_2_tPOB[1] = FormatterUtils
													.format_Date(DateChanged.dataora, "yyyy-MM-dd HH:mm:ss");
										}
										if (DateChanged.valore != null) {
											row_tDBOutputBulkExec_2_tPOB[2] = String.valueOf(DateChanged.valore);
										}
										if (DateChanged.stato != null) {
											row_tDBOutputBulkExec_2_tPOB[3] = DateChanged.stato;
										}
										if (DateChanged.idoperatore != null) {
											row_tDBOutputBulkExec_2_tPOB[4] = String.valueOf(DateChanged.idoperatore);
										}
										for (int i_tDBOutputBulkExec_2_tPOB = 0; i_tDBOutputBulkExec_2_tPOB < row_tDBOutputBulkExec_2_tPOB.length; i_tDBOutputBulkExec_2_tPOB++) {
											if (i_tDBOutputBulkExec_2_tPOB != 0) {
												outtDBOutputBulkExec_2_tPOB
														.write(OUT_DELIM_tDBOutputBulkExec_2_tPOB.toString());
											}
											String temp_tDBOutputBulkExec_2_tPOB = row_tDBOutputBulkExec_2_tPOB[i_tDBOutputBulkExec_2_tPOB];
											if (!"".equals(temp_tDBOutputBulkExec_2_tPOB)) {
												if (escape_mode_tDBOutputBulkExec_2_tPOB == 0) { // double quotes
													temp_tDBOutputBulkExec_2_tPOB = temp_tDBOutputBulkExec_2_tPOB
															.replace("" + textEnclosure_tDBOutputBulkExec_2_tPOB,
																	"" + textEnclosure_tDBOutputBulkExec_2_tPOB
																			+ textEnclosure_tDBOutputBulkExec_2_tPOB);
												} else {
													temp_tDBOutputBulkExec_2_tPOB = temp_tDBOutputBulkExec_2_tPOB
															.replace("\\", "\\\\");
													temp_tDBOutputBulkExec_2_tPOB = temp_tDBOutputBulkExec_2_tPOB
															.replace("" + textEnclosure_tDBOutputBulkExec_2_tPOB,
																	"\\" + textEnclosure_tDBOutputBulkExec_2_tPOB);
												}
												outtDBOutputBulkExec_2_tPOB
														.append(textEnclosure_tDBOutputBulkExec_2_tPOB);
												outtDBOutputBulkExec_2_tPOB.write(temp_tDBOutputBulkExec_2_tPOB);
												outtDBOutputBulkExec_2_tPOB
														.append(textEnclosure_tDBOutputBulkExec_2_tPOB);
											} else {
												outtDBOutputBulkExec_2_tPOB.write(temp_tDBOutputBulkExec_2_tPOB);
											}
										}
										outtDBOutputBulkExec_2_tPOB.write(OUT_DELIM_ROWSEP_tDBOutputBulkExec_2_tPOB);
										nb_line_tDBOutputBulkExec_2_tPOB++;

										tos_count_tDBOutputBulkExec_2_tPOB++;

										/**
										 * [tDBOutputBulkExec_2_tPOB main ] stop
										 */

										/**
										 * [tDBOutputBulkExec_2_tPOB process_data_begin ] start
										 */

										currentVirtualComponent = "tDBOutputBulkExec_2";

										currentComponent = "tDBOutputBulkExec_2_tPOB";

										/**
										 * [tDBOutputBulkExec_2_tPOB process_data_begin ] stop
										 */

										/**
										 * [tDBOutputBulkExec_2_tPOB process_data_end ] start
										 */

										currentVirtualComponent = "tDBOutputBulkExec_2";

										currentComponent = "tDBOutputBulkExec_2_tPOB";

										/**
										 * [tDBOutputBulkExec_2_tPOB process_data_end ] stop
										 */

									} // End of branch "DateChanged"

									/**
									 * [tMap_2 process_data_end ] start
									 */

									currentComponent = "tMap_2";

									/**
									 * [tMap_2 process_data_end ] stop
									 */

									/**
									 * [tJavaFlex_1 process_data_end ] start
									 */

									currentComponent = "tJavaFlex_1";

									/**
									 * [tJavaFlex_1 process_data_end ] stop
									 */

								} // End of branch "uniques"

								/**
								 * [tUniqRow_2 process_data_end ] start
								 */

								currentComponent = "tUniqRow_2";

								/**
								 * [tUniqRow_2 process_data_end ] stop
								 */

							} // End of branch "weather_data"

							/**
							 * [tFileInputDelimited_1 process_data_end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							/**
							 * [tFileInputDelimited_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputDelimited_1 end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

						}
					} finally {
						if (!((Object) (context.main_path + context.sensors_path_input_splitted + ((String) globalMap
								.get("tFileList_3_CURRENT_FILE"))) instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_1 != null) {
								fid_tFileInputDelimited_1.close();
							}
						}
						if (fid_tFileInputDelimited_1 != null) {
							globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

						}
					}

					ok_Hash.put("tFileInputDelimited_1", true);
					end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_1 end ] stop
					 */

					/**
					 * [tUniqRow_2 end ] start
					 */

					currentComponent = "tUniqRow_2";

					globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
					globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "weather_data");
					}

					ok_Hash.put("tUniqRow_2", true);
					end_Hash.put("tUniqRow_2", System.currentTimeMillis());

					/**
					 * [tUniqRow_2 end ] stop
					 */

					/**
					 * [tJavaFlex_1 end ] start
					 */

					currentComponent = "tJavaFlex_1";

// end of the component, outside/closing the loop

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "uniques");
					}

					ok_Hash.put("tJavaFlex_1", true);
					end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

					/**
					 * [tJavaFlex_1 end ] stop
					 */

					/**
					 * [tMap_2 end ] start
					 */

					currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "data");
					}

					ok_Hash.put("tMap_2", true);
					end_Hash.put("tMap_2", System.currentTimeMillis());

					/**
					 * [tMap_2 end ] stop
					 */

					/**
					 * [tDBOutputBulkExec_2_tPOB end ] start
					 */

					currentVirtualComponent = "tDBOutputBulkExec_2";

					currentComponent = "tDBOutputBulkExec_2_tPOB";

					outtDBOutputBulkExec_2_tPOB.close();
					resourceMap.put("finish_tDBOutputBulkExec_2_tPOB", true);
					globalMap.put("tDBOutputBulkExec_2_tPOB_NB_LINE", nb_line_tDBOutputBulkExec_2_tPOB);

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "DateChanged");
					}

					ok_Hash.put("tDBOutputBulkExec_2_tPOB", true);
					end_Hash.put("tDBOutputBulkExec_2_tPOB", System.currentTimeMillis());

					/**
					 * [tDBOutputBulkExec_2_tPOB end ] stop
					 */

					/**
					 * [tDBOutputBulkExec_2_tPBE begin ] start
					 */

					ok_Hash.put("tDBOutputBulkExec_2_tPBE", false);
					start_Hash.put("tDBOutputBulkExec_2_tPBE", System.currentTimeMillis());

					currentVirtualComponent = "tDBOutputBulkExec_2";

					currentComponent = "tDBOutputBulkExec_2_tPBE";

					int tos_count_tDBOutputBulkExec_2_tPBE = 0;

					int deletedCount_tDBOutputBulkExec_2_tPBE = 0;
					String tableName_tDBOutputBulkExec_2_tPBE = null;
					String dbschema_tDBOutputBulkExec_2_tPBE = null;
					dbschema_tDBOutputBulkExec_2_tPBE = context.postgresWoneli_Schema;

					if (dbschema_tDBOutputBulkExec_2_tPBE == null
							|| dbschema_tDBOutputBulkExec_2_tPBE.trim().length() == 0) {
						tableName_tDBOutputBulkExec_2_tPBE = "sens_data_"
								+ ((String) globalMap.get("tFileList_2_CURRENT_FILE")).substring(0,
										((String) globalMap.get("tFileList_2_CURRENT_FILE")).length() - 4);
					} else {
						tableName_tDBOutputBulkExec_2_tPBE = dbschema_tDBOutputBulkExec_2_tPBE + "\".\"" + "sens_data_"
								+ ((String) globalMap.get("tFileList_2_CURRENT_FILE")).substring(0,
										((String) globalMap.get("tFileList_2_CURRENT_FILE")).length() - 4);
					}
					String bulkSQL_tDBOutputBulkExec_2_tPBE = "COPY \"" + tableName_tDBOutputBulkExec_2_tPBE
							+ "\" (\"idsensore\",\"dataora\",\"valore\",\"stato\",\"idoperatore\") FROM " + "STDIN"
							+ " WITH ";
					Character field_separator_tDBOutputBulkExec_2_tPBE = (";").charAt(0);
					bulkSQL_tDBOutputBulkExec_2_tPBE += " " + "DELIMITER AS '"
							+ field_separator_tDBOutputBulkExec_2_tPBE + "' ";

					bulkSQL_tDBOutputBulkExec_2_tPBE += "NULL AS '" + "" + "' ";

					Character text_enclosure_tDBOutputBulkExec_2_tPBE = ("\"").charAt(0);
					bulkSQL_tDBOutputBulkExec_2_tPBE += "CSV HEADER QUOTE AS "
							+ ("'".equals(text_enclosure_tDBOutputBulkExec_2_tPBE.toString()) ? "E" : "") + "'"
							+ ("'".equals(text_enclosure_tDBOutputBulkExec_2_tPBE) ? "\\" : "")
							+ text_enclosure_tDBOutputBulkExec_2_tPBE + "' ";

					bulkSQL_tDBOutputBulkExec_2_tPBE += "ESCAPE AS '" + "\\" + "' ";

					bulkSQL_tDBOutputBulkExec_2_tPBE += "";
					java.sql.Connection conn_tDBOutputBulkExec_2_tPBE = null;

					String driverClass_tDBOutputBulkExec_2_tPBE = "org.postgresql.Driver";

					String url_tDBOutputBulkExec_2_tPBE = "jdbc:postgresql://" + context.postgresWoneli_Server + ":"
							+ context.postgresWoneli_Port + "/" + context.postgresWoneli_Database + "?"
							+ context.postgresWoneli_AdditionalParams;

					String dbUser_tDBOutputBulkExec_2_tPBE = context.postgresWoneli_Login;
					java.lang.Class.forName(driverClass_tDBOutputBulkExec_2_tPBE).newInstance();

					final String decryptedPassword_tDBOutputBulkExec_2_tPBE = context.postgresWoneli_Password;

					String dbPwd_tDBOutputBulkExec_2_tPBE = decryptedPassword_tDBOutputBulkExec_2_tPBE;

					conn_tDBOutputBulkExec_2_tPBE = java.sql.DriverManager.getConnection(url_tDBOutputBulkExec_2_tPBE,
							dbUser_tDBOutputBulkExec_2_tPBE, dbPwd_tDBOutputBulkExec_2_tPBE);

					java.sql.Statement stmtClear_tDBOutputBulkExec_2_tPBE = conn_tDBOutputBulkExec_2_tPBE
							.createStatement();

					stmtClear_tDBOutputBulkExec_2_tPBE
							.executeUpdate("DELETE FROM \"" + tableName_tDBOutputBulkExec_2_tPBE + "\"");

					stmtClear_tDBOutputBulkExec_2_tPBE.close();

					// in mysql when autoCommit=true don't commit.
					if (!conn_tDBOutputBulkExec_2_tPBE.getAutoCommit()) {
						conn_tDBOutputBulkExec_2_tPBE.commit();
					}

					java.sql.CallableStatement cs_tDBOutputBulkExec_2_tPBE = conn_tDBOutputBulkExec_2_tPBE
							.prepareCall("set standard_conforming_strings=on");
					cs_tDBOutputBulkExec_2_tPBE.execute();
					cs_tDBOutputBulkExec_2_tPBE.close();

					try (java.io.FileReader fileReader = new java.io.FileReader(
							context.main_path + context.sensors_path_output + "mod_int_"
									+ ((String) globalMap.get("tFileList_2_CURRENT_FILE")))) {
						org.postgresql.copy.CopyManager copyManager = new org.postgresql.copy.CopyManager(
								(org.postgresql.core.BaseConnection) conn_tDBOutputBulkExec_2_tPBE);
						copyManager.copyIn(bulkSQL_tDBOutputBulkExec_2_tPBE, fileReader);
					}

					conn_tDBOutputBulkExec_2_tPBE.close();

					if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
							&& routines.system.BundleUtils.inOSGi()) {
						Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").getMethod("checkedShutdown")
								.invoke(null, (Object[]) null);
					}

					/**
					 * [tDBOutputBulkExec_2_tPBE begin ] stop
					 */

					/**
					 * [tDBOutputBulkExec_2_tPBE main ] start
					 */

					currentVirtualComponent = "tDBOutputBulkExec_2";

					currentComponent = "tDBOutputBulkExec_2_tPBE";

					tos_count_tDBOutputBulkExec_2_tPBE++;

					/**
					 * [tDBOutputBulkExec_2_tPBE main ] stop
					 */

					/**
					 * [tDBOutputBulkExec_2_tPBE process_data_begin ] start
					 */

					currentVirtualComponent = "tDBOutputBulkExec_2";

					currentComponent = "tDBOutputBulkExec_2_tPBE";

					/**
					 * [tDBOutputBulkExec_2_tPBE process_data_begin ] stop
					 */

					/**
					 * [tDBOutputBulkExec_2_tPBE process_data_end ] start
					 */

					currentVirtualComponent = "tDBOutputBulkExec_2";

					currentComponent = "tDBOutputBulkExec_2_tPBE";

					/**
					 * [tDBOutputBulkExec_2_tPBE process_data_end ] stop
					 */

					/**
					 * [tDBOutputBulkExec_2_tPBE end ] start
					 */

					currentVirtualComponent = "tDBOutputBulkExec_2";

					currentComponent = "tDBOutputBulkExec_2_tPBE";

					ok_Hash.put("tDBOutputBulkExec_2_tPBE", true);
					end_Hash.put("tDBOutputBulkExec_2_tPBE", System.currentTimeMillis());

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
					}
					tDBCommit_2Process(globalMap);

					/**
					 * [tDBOutputBulkExec_2_tPBE end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tFileInputDelimited_1);
					}

					/**
					 * [tFileList_3 process_data_end ] start
					 */

					currentComponent = "tFileList_3";

					/**
					 * [tFileList_3 process_data_end ] stop
					 */

					/**
					 * [tFileList_3 end ] start
					 */

					currentComponent = "tFileList_3";

				}
				globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);

				ok_Hash.put("tFileList_3", true);
				end_Hash.put("tFileList_3", System.currentTimeMillis());

				/**
				 * [tFileList_3 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_3 finally ] start
				 */

				currentComponent = "tFileList_3";

				/**
				 * [tFileList_3 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tJavaFlex_1 finally ] start
				 */

				currentComponent = "tJavaFlex_1";

				/**
				 * [tJavaFlex_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutputBulkExec_2_tPOB finally ] start
				 */

				currentVirtualComponent = "tDBOutputBulkExec_2";

				currentComponent = "tDBOutputBulkExec_2_tPOB";

				if (resourceMap.get("finish_tDBOutputBulkExec_2_tPOB") == null) {
					if (resourceMap.get("outtDBOutputBulkExec_2_tPOB") != null) {
						((java.io.BufferedWriter) resourceMap.get("outtDBOutputBulkExec_2_tPOB")).close();
					}
				}

				/**
				 * [tDBOutputBulkExec_2_tPOB finally ] stop
				 */

				/**
				 * [tDBOutputBulkExec_2_tPBE finally ] start
				 */

				currentVirtualComponent = "tDBOutputBulkExec_2";

				currentComponent = "tDBOutputBulkExec_2_tPBE";

				/**
				 * [tDBOutputBulkExec_2_tPBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_3_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_2 begin ] start
				 */

				ok_Hash.put("tDBCommit_2", false);
				start_Hash.put("tDBCommit_2", System.currentTimeMillis());

				currentComponent = "tDBCommit_2";

				int tos_count_tDBCommit_2 = 0;

				/**
				 * [tDBCommit_2 begin ] stop
				 */

				/**
				 * [tDBCommit_2 main ] start
				 */

				currentComponent = "tDBCommit_2";

				java.sql.Connection conn_tDBCommit_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBCommit_2 != null && !conn_tDBCommit_2.isClosed()) {

					conn_tDBCommit_2.commit();

				}

				tos_count_tDBCommit_2++;

				/**
				 * [tDBCommit_2 main ] stop
				 */

				/**
				 * [tDBCommit_2 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_2 process_data_end ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_2 end ] start
				 */

				currentComponent = "tDBCommit_2";

				ok_Hash.put("tDBCommit_2", true);
				end_Hash.put("tDBCommit_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tRunJob_3Process(globalMap);

				/**
				 * [tDBCommit_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_2 finally ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_3.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_3 = null;

				obj_tRunJob_3 = context.main_path + context.sensors_path_output;
				if (obj_tRunJob_3 != null) {
					if (obj_tRunJob_3.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_3
								.add("--context_param path_bulk=" + ((java.util.Date) obj_tRunJob_3).getTime());
					} else {
						paraList_tRunJob_3
								.add("--context_param path_bulk=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
					}
				} else {
					paraList_tRunJob_3.add(
							"--context_param path_bulk=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_3.put("path_bulk", obj_tRunJob_3);

				arpa_data.combinesplittedcsv_0_1.combineSplittedCsv childJob_tRunJob_3 = new arpa_data.combinesplittedcsv_0_1.combineSplittedCsv();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}

				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_3.getErrorCode();
				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
					java.lang.Exception ce_tRunJob_3 = childJob_tRunJob_3.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_3 != null)
							? (ce_tRunJob_3.getClass().getName() + ": " + ce_tRunJob_3.getMessage())
							: ""));
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 process_data_begin ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_3 process_data_end ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_end ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {
					conn_tDBClose_1.close();
				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tJava_3Process(globalMap);

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				int prevTime = (Integer) globalMap.get("prev_time");
				int totTime = Math.toIntExact(TalendDate.getCurrentDate().getTime() - startTime) / 1000;
				int intermTime = totTime - prevTime;

				int newPrevTime = prevTime + intermTime;

				globalMap.put("interm_time", intermTime);
				globalMap.put("prev_time", newPrevTime);

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 process_data_begin ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 process_data_begin ] stop
				 */

				/**
				 * [tJava_3 process_data_end ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 process_data_end ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tRunJob_2Process(globalMap);

				/**
				 * [tJava_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_2.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_2 = null;

				obj_tRunJob_2 = ((Integer) globalMap.get("interm_time"));
				if (obj_tRunJob_2 != null) {
					if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_2
								.add("--context_param duration=" + ((java.util.Date) obj_tRunJob_2).getTime());
					} else {
						paraList_tRunJob_2
								.add("--context_param duration=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					}
				} else {
					paraList_tRunJob_2.add(
							"--context_param duration=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("duration", obj_tRunJob_2);

				obj_tRunJob_2 = ((Integer) globalMap.get("tUniqRow_2_NB_UNIQUES"));
				if (obj_tRunJob_2 != null) {
					if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_2
								.add("--context_param num_rows=" + ((java.util.Date) obj_tRunJob_2).getTime());
					} else {
						paraList_tRunJob_2
								.add("--context_param num_rows=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					}
				} else {
					paraList_tRunJob_2.add(
							"--context_param num_rows=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("num_rows", obj_tRunJob_2);

				obj_tRunJob_2 = "Bulk Insert";
				if (obj_tRunJob_2 != null) {
					if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_2
								.add("--context_param operation=" + ((java.util.Date) obj_tRunJob_2).getTime());
					} else {
						paraList_tRunJob_2
								.add("--context_param operation=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					}
				} else {
					paraList_tRunJob_2.add(
							"--context_param operation=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("operation", obj_tRunJob_2);

				obj_tRunJob_2 = "sens_data_" + ((String) globalMap.get("tFileList_2_CURRENT_FILE")).substring(0,
						((String) globalMap.get("tFileList_2_CURRENT_FILE")).length() - 4);
				if (obj_tRunJob_2 != null) {
					if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_2
								.add("--context_param table_name=" + ((java.util.Date) obj_tRunJob_2).getTime());
					} else {
						paraList_tRunJob_2
								.add("--context_param table_name=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					}
				} else {
					paraList_tRunJob_2.add(
							"--context_param table_name=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("table_name", obj_tRunJob_2);

				obj_tRunJob_2 = context.main_path + context.sensors_path_input_splitted;
				if (obj_tRunJob_2 != null) {
					if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_2
								.add("--context_param path_splitted=" + ((java.util.Date) obj_tRunJob_2).getTime());
					} else {
						paraList_tRunJob_2.add(
								"--context_param path_splitted=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					}
				} else {
					paraList_tRunJob_2.add("--context_param path_splitted="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("path_splitted", obj_tRunJob_2);

				arpa_data.finalbulk_0_1.finalBulk childJob_tRunJob_2 = new arpa_data.finalbulk_0_1.finalBulk();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}

				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_2.getErrorCode();
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
					java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2 != null)
							? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage())
							: ""));
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 process_data_begin ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_2 process_data_end ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_end ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 main ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				globalMap.put("change_time_date", "31/12/0001 00:00:00");
				globalMap.put("prev_time", 0);

				tos_count_tSetGlobalVar_1++;

				/**
				 * [tSetGlobalVar_1 main ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_begin ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final bulkInsertS bulkInsertSClass = new bulkInsertS();

		int exitCode = bulkInsertSClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = bulkInsertS.class.getClassLoader()
					.getResourceAsStream("arpa_data/bulkinserts_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = bulkInsertS.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("main_path", "id_Directory");
					if (context.getStringValue("main_path") == null) {
						context.main_path = null;
					} else {
						context.main_path = (String) context.getProperty("main_path");
					}
					context.setContextType("path_bulk", "id_Directory");
					if (context.getStringValue("path_bulk") == null) {
						context.path_bulk = null;
					} else {
						context.path_bulk = (String) context.getProperty("path_bulk");
					}
					context.setContextType("path_original", "id_Directory");
					if (context.getStringValue("path_original") == null) {
						context.path_original = null;
					} else {
						context.path_original = (String) context.getProperty("path_original");
					}
					context.setContextType("path_splitted", "id_Directory");
					if (context.getStringValue("path_splitted") == null) {
						context.path_splitted = null;
					} else {
						context.path_splitted = (String) context.getProperty("path_splitted");
					}
					context.setContextType("regex_file_to_read", "id_String");
					if (context.getStringValue("regex_file_to_read") == null) {
						context.regex_file_to_read = null;
					} else {
						context.regex_file_to_read = (String) context.getProperty("regex_file_to_read");
					}
					context.setContextType("sensors_path_input", "id_Directory");
					if (context.getStringValue("sensors_path_input") == null) {
						context.sensors_path_input = null;
					} else {
						context.sensors_path_input = (String) context.getProperty("sensors_path_input");
					}
					context.setContextType("sensors_path_input_splitted", "id_Directory");
					if (context.getStringValue("sensors_path_input_splitted") == null) {
						context.sensors_path_input_splitted = null;
					} else {
						context.sensors_path_input_splitted = (String) context
								.getProperty("sensors_path_input_splitted");
					}
					context.setContextType("sensors_path_output", "id_Directory");
					if (context.getStringValue("sensors_path_output") == null) {
						context.sensors_path_output = null;
					} else {
						context.sensors_path_output = (String) context.getProperty("sensors_path_output");
					}
					context.setContextType("weather_path_input", "id_Directory");
					if (context.getStringValue("weather_path_input") == null) {
						context.weather_path_input = null;
					} else {
						context.weather_path_input = (String) context.getProperty("weather_path_input");
					}
					context.setContextType("weather_path_input_splitted", "id_Directory");
					if (context.getStringValue("weather_path_input_splitted") == null) {
						context.weather_path_input_splitted = null;
					} else {
						context.weather_path_input_splitted = (String) context
								.getProperty("weather_path_input_splitted");
					}
					context.setContextType("weather_path_output", "id_Directory");
					if (context.getStringValue("weather_path_output") == null) {
						context.weather_path_output = null;
					} else {
						context.weather_path_output = (String) context.getProperty("weather_path_output");
					}
					context.setContextType("postgresWoneli_AdditionalParams", "id_String");
					if (context.getStringValue("postgresWoneli_AdditionalParams") == null) {
						context.postgresWoneli_AdditionalParams = null;
					} else {
						context.postgresWoneli_AdditionalParams = (String) context
								.getProperty("postgresWoneli_AdditionalParams");
					}
					context.setContextType("postgresWoneli_Database", "id_String");
					if (context.getStringValue("postgresWoneli_Database") == null) {
						context.postgresWoneli_Database = null;
					} else {
						context.postgresWoneli_Database = (String) context.getProperty("postgresWoneli_Database");
					}
					context.setContextType("postgresWoneli_Login", "id_String");
					if (context.getStringValue("postgresWoneli_Login") == null) {
						context.postgresWoneli_Login = null;
					} else {
						context.postgresWoneli_Login = (String) context.getProperty("postgresWoneli_Login");
					}
					context.setContextType("postgresWoneli_Password", "id_Password");
					if (context.getStringValue("postgresWoneli_Password") == null) {
						context.postgresWoneli_Password = null;
					} else {
						String pwd_postgresWoneli_Password_value = context.getProperty("postgresWoneli_Password");
						context.postgresWoneli_Password = null;
						if (pwd_postgresWoneli_Password_value != null) {
							if (context_param.containsKey("postgresWoneli_Password")) {// no need to decrypt if it come
																						// from program argument or
																						// parent job runtime
								context.postgresWoneli_Password = pwd_postgresWoneli_Password_value;
							} else if (!pwd_postgresWoneli_Password_value.isEmpty()) {
								try {
									context.postgresWoneli_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_postgresWoneli_Password_value);
									context.put("postgresWoneli_Password", context.postgresWoneli_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("postgresWoneli_Port", "id_String");
					if (context.getStringValue("postgresWoneli_Port") == null) {
						context.postgresWoneli_Port = null;
					} else {
						context.postgresWoneli_Port = (String) context.getProperty("postgresWoneli_Port");
					}
					context.setContextType("postgresWoneli_Schema", "id_String");
					if (context.getStringValue("postgresWoneli_Schema") == null) {
						context.postgresWoneli_Schema = null;
					} else {
						context.postgresWoneli_Schema = (String) context.getProperty("postgresWoneli_Schema");
					}
					context.setContextType("postgresWoneli_Server", "id_String");
					if (context.getStringValue("postgresWoneli_Server") == null) {
						context.postgresWoneli_Server = null;
					} else {
						context.postgresWoneli_Server = (String) context.getProperty("postgresWoneli_Server");
					}
					context.setContextType("category", "id_String");
					if (context.getStringValue("category") == null) {
						context.category = null;
					} else {
						context.category = (String) context.getProperty("category");
					}
					context.setContextType("csv_to_split", "id_String");
					if (context.getStringValue("csv_to_split") == null) {
						context.csv_to_split = null;
					} else {
						context.csv_to_split = (String) context.getProperty("csv_to_split");
					}
					context.setContextType("duration", "id_Integer");
					if (context.getStringValue("duration") == null) {
						context.duration = null;
					} else {
						try {
							context.duration = routines.system.ParserUtils
									.parseTo_Integer(context.getProperty("duration"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"duration", e.getMessage()));
							context.duration = null;
						}
					}
					context.setContextType("num_rows", "id_Integer");
					if (context.getStringValue("num_rows") == null) {
						context.num_rows = null;
					} else {
						try {
							context.num_rows = routines.system.ParserUtils
									.parseTo_Integer(context.getProperty("num_rows"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"num_rows", e.getMessage()));
							context.num_rows = null;
						}
					}
					context.setContextType("operation", "id_String");
					if (context.getStringValue("operation") == null) {
						context.operation = null;
					} else {
						context.operation = (String) context.getProperty("operation");
					}
					context.setContextType("table_name", "id_String");
					if (context.getStringValue("table_name") == null) {
						context.table_name = null;
					} else {
						context.table_name = (String) context.getProperty("table_name");
					}
					context.setContextType("truncate", "id_Boolean");
					if (context.getStringValue("truncate") == null) {
						context.truncate = null;
					} else {
						try {
							context.truncate = routines.system.ParserUtils
									.parseTo_Boolean(context.getProperty("truncate"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"truncate", e.getMessage()));
							context.truncate = null;
						}
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("main_path")) {
				context.main_path = (String) parentContextMap.get("main_path");
			}
			if (parentContextMap.containsKey("path_bulk")) {
				context.path_bulk = (String) parentContextMap.get("path_bulk");
			}
			if (parentContextMap.containsKey("path_original")) {
				context.path_original = (String) parentContextMap.get("path_original");
			}
			if (parentContextMap.containsKey("path_splitted")) {
				context.path_splitted = (String) parentContextMap.get("path_splitted");
			}
			if (parentContextMap.containsKey("regex_file_to_read")) {
				context.regex_file_to_read = (String) parentContextMap.get("regex_file_to_read");
			}
			if (parentContextMap.containsKey("sensors_path_input")) {
				context.sensors_path_input = (String) parentContextMap.get("sensors_path_input");
			}
			if (parentContextMap.containsKey("sensors_path_input_splitted")) {
				context.sensors_path_input_splitted = (String) parentContextMap.get("sensors_path_input_splitted");
			}
			if (parentContextMap.containsKey("sensors_path_output")) {
				context.sensors_path_output = (String) parentContextMap.get("sensors_path_output");
			}
			if (parentContextMap.containsKey("weather_path_input")) {
				context.weather_path_input = (String) parentContextMap.get("weather_path_input");
			}
			if (parentContextMap.containsKey("weather_path_input_splitted")) {
				context.weather_path_input_splitted = (String) parentContextMap.get("weather_path_input_splitted");
			}
			if (parentContextMap.containsKey("weather_path_output")) {
				context.weather_path_output = (String) parentContextMap.get("weather_path_output");
			}
			if (parentContextMap.containsKey("postgresWoneli_AdditionalParams")) {
				context.postgresWoneli_AdditionalParams = (String) parentContextMap
						.get("postgresWoneli_AdditionalParams");
			}
			if (parentContextMap.containsKey("postgresWoneli_Database")) {
				context.postgresWoneli_Database = (String) parentContextMap.get("postgresWoneli_Database");
			}
			if (parentContextMap.containsKey("postgresWoneli_Login")) {
				context.postgresWoneli_Login = (String) parentContextMap.get("postgresWoneli_Login");
			}
			if (parentContextMap.containsKey("postgresWoneli_Password")) {
				context.postgresWoneli_Password = (java.lang.String) parentContextMap.get("postgresWoneli_Password");
			}
			if (parentContextMap.containsKey("postgresWoneli_Port")) {
				context.postgresWoneli_Port = (String) parentContextMap.get("postgresWoneli_Port");
			}
			if (parentContextMap.containsKey("postgresWoneli_Schema")) {
				context.postgresWoneli_Schema = (String) parentContextMap.get("postgresWoneli_Schema");
			}
			if (parentContextMap.containsKey("postgresWoneli_Server")) {
				context.postgresWoneli_Server = (String) parentContextMap.get("postgresWoneli_Server");
			}
			if (parentContextMap.containsKey("category")) {
				context.category = (String) parentContextMap.get("category");
			}
			if (parentContextMap.containsKey("csv_to_split")) {
				context.csv_to_split = (String) parentContextMap.get("csv_to_split");
			}
			if (parentContextMap.containsKey("duration")) {
				context.duration = (Integer) parentContextMap.get("duration");
			}
			if (parentContextMap.containsKey("num_rows")) {
				context.num_rows = (Integer) parentContextMap.get("num_rows");
			}
			if (parentContextMap.containsKey("operation")) {
				context.operation = (String) parentContextMap.get("operation");
			}
			if (parentContextMap.containsKey("table_name")) {
				context.table_name = (String) parentContextMap.get("table_name");
			}
			if (parentContextMap.containsKey("truncate")) {
				context.truncate = (Boolean) parentContextMap.get("truncate");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("postgresWoneli_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileList_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileList_2) {
			globalMap.put("tFileList_2_SUBPROCESS_STATE", -1);

			e_tFileList_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : bulkInsertS");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 186349 characters generated by Talend Open Studio for Data Integration on the
 * November 8, 2022 at 8:35:11 AM CET
 ************************************************************************************************/
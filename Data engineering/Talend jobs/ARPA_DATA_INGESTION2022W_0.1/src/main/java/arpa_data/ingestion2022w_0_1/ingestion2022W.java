// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package arpa_data.ingestion2022w_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: ingestion2022W Purpose: <br>
 * Description: Performs ingestion of weather data of current year. It either
 * downloads the entire csv from the ARPA website and ingest it in full by
 * calling csvBulkLoadW job, or retrieves current month data from ARPA api
 * ingesting them in delta by calling deltaIngestionCurrentMonthW. <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class ingestion2022W implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (main_path != null) {

				this.setProperty("main_path", main_path.toString());

			}

			if (path_bulk != null) {

				this.setProperty("path_bulk", path_bulk.toString());

			}

			if (path_original != null) {

				this.setProperty("path_original", path_original.toString());

			}

			if (path_splitted != null) {

				this.setProperty("path_splitted", path_splitted.toString());

			}

			if (regex_file_to_read != null) {

				this.setProperty("regex_file_to_read", regex_file_to_read.toString());

			}

			if (sensors_path_input != null) {

				this.setProperty("sensors_path_input", sensors_path_input.toString());

			}

			if (sensors_path_input_splitted != null) {

				this.setProperty("sensors_path_input_splitted", sensors_path_input_splitted.toString());

			}

			if (sensors_path_output != null) {

				this.setProperty("sensors_path_output", sensors_path_output.toString());

			}

			if (weather_path_input != null) {

				this.setProperty("weather_path_input", weather_path_input.toString());

			}

			if (weather_path_input_splitted != null) {

				this.setProperty("weather_path_input_splitted", weather_path_input_splitted.toString());

			}

			if (weather_path_output != null) {

				this.setProperty("weather_path_output", weather_path_output.toString());

			}

			if (postgresWoneli_AdditionalParams != null) {

				this.setProperty("postgresWoneli_AdditionalParams", postgresWoneli_AdditionalParams.toString());

			}

			if (postgresWoneli_Database != null) {

				this.setProperty("postgresWoneli_Database", postgresWoneli_Database.toString());

			}

			if (postgresWoneli_Login != null) {

				this.setProperty("postgresWoneli_Login", postgresWoneli_Login.toString());

			}

			if (postgresWoneli_Password != null) {

				this.setProperty("postgresWoneli_Password", postgresWoneli_Password.toString());

			}

			if (postgresWoneli_Port != null) {

				this.setProperty("postgresWoneli_Port", postgresWoneli_Port.toString());

			}

			if (postgresWoneli_Schema != null) {

				this.setProperty("postgresWoneli_Schema", postgresWoneli_Schema.toString());

			}

			if (postgresWoneli_Server != null) {

				this.setProperty("postgresWoneli_Server", postgresWoneli_Server.toString());

			}

			if (endpoinAPI_sensors_currentY != null) {

				this.setProperty("endpoinAPI_sensors_currentY", endpoinAPI_sensors_currentY.toString());

			}

			if (endpoinAPI_stations_sensors != null) {

				this.setProperty("endpoinAPI_stations_sensors", endpoinAPI_stations_sensors.toString());

			}

			if (endpoinAPI_stations_weather != null) {

				this.setProperty("endpoinAPI_stations_weather", endpoinAPI_stations_weather.toString());

			}

			if (endpoinAPI_weather_currentM != null) {

				this.setProperty("endpoinAPI_weather_currentM", endpoinAPI_weather_currentM.toString());

			}

			if (category != null) {

				this.setProperty("category", category.toString());

			}

			if (csv_to_split != null) {

				this.setProperty("csv_to_split", csv_to_split.toString());

			}

			if (duration != null) {

				this.setProperty("duration", duration.toString());

			}

			if (num_rows != null) {

				this.setProperty("num_rows", num_rows.toString());

			}

			if (operation != null) {

				this.setProperty("operation", operation.toString());

			}

			if (table_name != null) {

				this.setProperty("table_name", table_name.toString());

			}

			if (truncate != null) {

				this.setProperty("truncate", truncate.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String main_path;

		public String getMain_path() {
			return this.main_path;
		}

		public String path_bulk;

		public String getPath_bulk() {
			return this.path_bulk;
		}

		public String path_original;

		public String getPath_original() {
			return this.path_original;
		}

		public String path_splitted;

		public String getPath_splitted() {
			return this.path_splitted;
		}

		public String regex_file_to_read;

		public String getRegex_file_to_read() {
			return this.regex_file_to_read;
		}

		public String sensors_path_input;

		public String getSensors_path_input() {
			return this.sensors_path_input;
		}

		public String sensors_path_input_splitted;

		public String getSensors_path_input_splitted() {
			return this.sensors_path_input_splitted;
		}

		public String sensors_path_output;

		public String getSensors_path_output() {
			return this.sensors_path_output;
		}

		public String weather_path_input;

		public String getWeather_path_input() {
			return this.weather_path_input;
		}

		public String weather_path_input_splitted;

		public String getWeather_path_input_splitted() {
			return this.weather_path_input_splitted;
		}

		public String weather_path_output;

		public String getWeather_path_output() {
			return this.weather_path_output;
		}

		public String postgresWoneli_AdditionalParams;

		public String getPostgresWoneli_AdditionalParams() {
			return this.postgresWoneli_AdditionalParams;
		}

		public String postgresWoneli_Database;

		public String getPostgresWoneli_Database() {
			return this.postgresWoneli_Database;
		}

		public String postgresWoneli_Login;

		public String getPostgresWoneli_Login() {
			return this.postgresWoneli_Login;
		}

		public java.lang.String postgresWoneli_Password;

		public java.lang.String getPostgresWoneli_Password() {
			return this.postgresWoneli_Password;
		}

		public String postgresWoneli_Port;

		public String getPostgresWoneli_Port() {
			return this.postgresWoneli_Port;
		}

		public String postgresWoneli_Schema;

		public String getPostgresWoneli_Schema() {
			return this.postgresWoneli_Schema;
		}

		public String postgresWoneli_Server;

		public String getPostgresWoneli_Server() {
			return this.postgresWoneli_Server;
		}

		public String endpoinAPI_sensors_currentY;

		public String getEndpoinAPI_sensors_currentY() {
			return this.endpoinAPI_sensors_currentY;
		}

		public String endpoinAPI_stations_sensors;

		public String getEndpoinAPI_stations_sensors() {
			return this.endpoinAPI_stations_sensors;
		}

		public String endpoinAPI_stations_weather;

		public String getEndpoinAPI_stations_weather() {
			return this.endpoinAPI_stations_weather;
		}

		public String endpoinAPI_weather_currentM;

		public String getEndpoinAPI_weather_currentM() {
			return this.endpoinAPI_weather_currentM;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String csv_to_split;

		public String getCsv_to_split() {
			return this.csv_to_split;
		}

		public Integer duration;

		public Integer getDuration() {
			return this.duration;
		}

		public Integer num_rows;

		public Integer getNum_rows() {
			return this.num_rows;
		}

		public String operation;

		public String getOperation() {
			return this.operation;
		}

		public String table_name;

		public String getTable_name() {
			return this.table_name;
		}

		public Boolean truncate;

		public Boolean getTruncate() {
			return this.truncate;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ingestion2022W";
	private final String projectName = "ARPA_DATA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ingestion2022W.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ingestion2022W.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tREST_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileFetch_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileUnarchive_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileUnarchive_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tREST_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileUnarchive_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				String foo = "bar";

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 process_data_begin ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 process_data_begin ] stop
				 */

				/**
				 * [tJava_2 process_data_end ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 process_data_end ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				if (((String) globalMap.get("today")).equals("15")) {

					if (execStat) {
						runStat.updateStatOnConnection("If_true", 0, "true");
					}
					tREST_1Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If_true", 0, "false");
					}
				}
				if (!((String) globalMap.get("today")).equals("15")) {

					if (execStat) {
						runStat.updateStatOnConnection("If_false", 0, "true");
					}
					tRunJob_2Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If_false", 0, "false");
					}
				}

				/**
				 * [tJava_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class csvStruct implements routines.system.IPersistableRow<csvStruct> {
		final static byte[] commonByteArrayLock_ARPA_DATA_ingestion2022W = new byte[0];
		static byte[] commonByteArray_ARPA_DATA_ingestion2022W = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ARPA_DATA_ingestion2022W.length) {
					if (length < 1024 && commonByteArray_ARPA_DATA_ingestion2022W.length == 0) {
						commonByteArray_ARPA_DATA_ingestion2022W = new byte[1024];
					} else {
						commonByteArray_ARPA_DATA_ingestion2022W = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ARPA_DATA_ingestion2022W, 0, length);
				strReturn = new String(commonByteArray_ARPA_DATA_ingestion2022W, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ARPA_DATA_ingestion2022W.length) {
					if (length < 1024 && commonByteArray_ARPA_DATA_ingestion2022W.length == 0) {
						commonByteArray_ARPA_DATA_ingestion2022W = new byte[1024];
					} else {
						commonByteArray_ARPA_DATA_ingestion2022W = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ARPA_DATA_ingestion2022W, 0, length);
				strReturn = new String(commonByteArray_ARPA_DATA_ingestion2022W, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ARPA_DATA_ingestion2022W) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ARPA_DATA_ingestion2022W) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(csvStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tREST_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tREST_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				csvStruct csv = new csvStruct();

				/**
				 * [tFileFetch_1 begin ] start
				 */

				ok_Hash.put("tFileFetch_1", false);
				start_Hash.put("tFileFetch_1", System.currentTimeMillis());

				currentComponent = "tFileFetch_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "csv");
				}

				int tos_count_tFileFetch_1 = 0;

				/**
				 * [tFileFetch_1 begin ] stop
				 */

				/**
				 * [tREST_1 begin ] start
				 */

				ok_Hash.put("tREST_1", false);
				start_Hash.put("tREST_1", System.currentTimeMillis());

				currentComponent = "tREST_1";

				int tos_count_tREST_1 = 0;

				String endpoint_tREST_1 = "https://www.dati.lombardia.it/download/mvvc-nmzv/application%2Fzip";

				String trustStoreFile_tREST_1 = System.getProperty("javax.net.ssl.trustStore");
				String trustStoreType_tREST_1 = System.getProperty("javax.net.ssl.trustStoreType");
				String trustStorePWD_tREST_1 = System.getProperty("javax.net.ssl.trustStorePassword");

				String keyStoreFile_tREST_1 = System.getProperty("javax.net.ssl.keyStore");
				String keyStoreType_tREST_1 = System.getProperty("javax.net.ssl.keyStoreType");
				String keyStorePWD_tREST_1 = System.getProperty("javax.net.ssl.keyStorePassword");

				com.sun.jersey.api.client.config.ClientConfig config_tREST_1 = new com.sun.jersey.api.client.config.DefaultClientConfig();
				javax.net.ssl.SSLContext ctx_tREST_1 = javax.net.ssl.SSLContext.getInstance("SSL");

				javax.net.ssl.TrustManager[] tms_tREST_1 = null;
				if (trustStoreFile_tREST_1 != null && trustStoreType_tREST_1 != null) {
					char[] password_tREST_1 = null;
					if (trustStorePWD_tREST_1 != null)
						password_tREST_1 = trustStorePWD_tREST_1.toCharArray();
					java.security.KeyStore trustStore_tREST_1 = java.security.KeyStore
							.getInstance(trustStoreType_tREST_1);
					trustStore_tREST_1.load(new java.io.FileInputStream(trustStoreFile_tREST_1), password_tREST_1);

					javax.net.ssl.TrustManagerFactory tmf_tREST_1 = javax.net.ssl.TrustManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					tmf_tREST_1.init(trustStore_tREST_1);
					tms_tREST_1 = tmf_tREST_1.getTrustManagers();
				}

				javax.net.ssl.KeyManager[] kms_tREST_1 = null;
				if (keyStoreFile_tREST_1 != null && keyStoreType_tREST_1 != null) {
					char[] password_tREST_1 = null;
					if (keyStorePWD_tREST_1 != null)
						password_tREST_1 = keyStorePWD_tREST_1.toCharArray();
					java.security.KeyStore keyStore_tREST_1 = java.security.KeyStore.getInstance(keyStoreType_tREST_1);
					keyStore_tREST_1.load(new java.io.FileInputStream(keyStoreFile_tREST_1), password_tREST_1);

					javax.net.ssl.KeyManagerFactory kmf_tREST_1 = javax.net.ssl.KeyManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					kmf_tREST_1.init(keyStore_tREST_1, password_tREST_1);
					kms_tREST_1 = kmf_tREST_1.getKeyManagers();
				}

				ctx_tREST_1.init(kms_tREST_1, tms_tREST_1, null);
				config_tREST_1.getProperties().put(
						com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
						new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

							public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
								return true;
							}
						}, ctx_tREST_1));

				com.sun.jersey.api.client.Client restClient_tREST_1 = com.sun.jersey.api.client.Client
						.create(config_tREST_1);

				java.util.Map<String, Object> headers_tREST_1 = new java.util.HashMap<String, Object>();

				Object transfer_encoding_tREST_1 = headers_tREST_1.get("Transfer-Encoding");
				if (transfer_encoding_tREST_1 != null && "chunked".equals(transfer_encoding_tREST_1)) {
					restClient_tREST_1.setChunkedEncodingSize(4096);
				}

				com.sun.jersey.api.client.WebResource restResource_tREST_1;
				if (endpoint_tREST_1 != null && !("").equals(endpoint_tREST_1)) {
					restResource_tREST_1 = restClient_tREST_1.resource(endpoint_tREST_1);
				} else {
					throw new IllegalArgumentException("url can't be empty!");
				}

				com.sun.jersey.api.client.ClientResponse errorResponse_tREST_1 = null;
				String restResponse_tREST_1 = "";
				try {

					com.sun.jersey.api.client.WebResource.Builder builder_tREST_1 = null;
					for (java.util.Map.Entry<String, Object> header_tREST_1 : headers_tREST_1.entrySet()) {
						if (builder_tREST_1 == null) {
							builder_tREST_1 = restResource_tREST_1.header(header_tREST_1.getKey(),
									header_tREST_1.getValue());
						} else {
							builder_tREST_1.header(header_tREST_1.getKey(), header_tREST_1.getValue());
						}
					}

					if (builder_tREST_1 != null) {
						restResponse_tREST_1 = builder_tREST_1.get(String.class);
					} else {
						restResponse_tREST_1 = restResource_tREST_1.get(String.class);
					}

				} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
					globalMap.put("tREST_1_ERROR_MESSAGE", ue.getMessage());
					errorResponse_tREST_1 = ue.getResponse();
				}

				// for output

				csv = new csvStruct();
				if (errorResponse_tREST_1 != null) {
					csv.ERROR_CODE = errorResponse_tREST_1.getStatus();
					if (csv.ERROR_CODE != 204) {
						csv.Body = errorResponse_tREST_1.getEntity(String.class);
					}
				} else {
					csv.Body = restResponse_tREST_1;
				}

				/**
				 * [tREST_1 begin ] stop
				 */

				/**
				 * [tREST_1 main ] start
				 */

				currentComponent = "tREST_1";

				tos_count_tREST_1++;

				/**
				 * [tREST_1 main ] stop
				 */

				/**
				 * [tREST_1 process_data_begin ] start
				 */

				currentComponent = "tREST_1";

				/**
				 * [tREST_1 process_data_begin ] stop
				 */

				/**
				 * [tFileFetch_1 main ] start
				 */

				currentComponent = "tFileFetch_1";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1

							, "csv"

					);
				}

				java.io.InputStream retIS_tFileFetch_1 = null;

				java.net.URI uriToFetch_tFileFetch_1 = null;
				try {
					uriToFetch_tFileFetch_1 = new java.net.URI(
							"https://www.dati.lombardia.it/download/mvvc-nmzv/application%2Fzip");
				} catch (Exception e) {
					globalMap.put("tFileFetch_1_ERROR_MESSAGE", e.getMessage());
					System.err.println(
							"URI is not correct or not encoded, please input a valid one or use 'Encode URI' option");
				}

				class SocketFactory_tFileFetch_1
						implements org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory {

					private javax.net.ssl.SSLContext sslcontext = null;

					private javax.net.ssl.SSLContext createSSLContext() throws java.io.IOException {
						javax.net.ssl.SSLContext sslcontext = null;
						try {
							sslcontext = javax.net.ssl.SSLContext.getInstance("SSL");
							javax.net.ssl.KeyManager[] keyManagers = null;
							String keyStoreType = java.util.Optional
									.ofNullable(System.getProperty("javax.net.ssl.keyStoreType")).orElse("");
							String keyStoreFile = java.util.Optional
									.ofNullable(System.getProperty("javax.net.ssl.keyStore")).orElse("");
							String keyStorePassword = java.util.Optional
									.ofNullable(System.getProperty("javax.net.ssl.keyStorePassword")).orElse("");
							if (!keyStoreType.isEmpty() && !keyStoreFile.isEmpty()) {
								try {
									java.security.KeyStore keyStore = java.security.KeyStore.getInstance(keyStoreType);
									keyStore.load(new java.io.FileInputStream(keyStoreFile),
											keyStorePassword.toCharArray());
									javax.net.ssl.KeyManagerFactory kmf = javax.net.ssl.KeyManagerFactory
											.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
									kmf.init(keyStore, keyStorePassword.toCharArray());
									keyManagers = kmf.getKeyManagers();
								} catch (java.security.UnrecoverableKeyException | java.security.KeyStoreException
										| java.security.cert.CertificateException e) {
									globalMap.put("tFileFetch_1_ERROR_MESSAGE", e.getMessage());
									e.printStackTrace();
								}
							}
							javax.net.ssl.TrustManager[] trustManagers = null;
							String trustStoreType = java.util.Optional
									.ofNullable(System.getProperty("javax.net.ssl.trustStoreType")).orElse("");
							String trustStoreFile = java.util.Optional
									.ofNullable(System.getProperty("javax.net.ssl.trustStore")).orElse("");
							String trustStorePassword = java.util.Optional
									.ofNullable(System.getProperty("javax.net.ssl.trustStorePassword")).orElse("");
							if (!trustStoreType.isEmpty() && !trustStoreFile.isEmpty()) {
								try {
									java.security.KeyStore trustStore = java.security.KeyStore
											.getInstance(trustStoreType);
									trustStore.load(new java.io.FileInputStream(trustStoreFile),
											trustStorePassword.toCharArray());
									javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory
											.getInstance(javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm());
									tmf.init(trustStore);
									trustManagers = tmf.getTrustManagers();

								} catch (java.security.KeyStoreException | java.security.cert.CertificateException e) {
									globalMap.put("tFileFetch_1_ERROR_MESSAGE", e.getMessage());
									e.printStackTrace();
									trustManagers = new javax.net.ssl.TrustManager[] {};

								}
							}
							sslcontext.init(keyManagers, trustManagers, new java.security.SecureRandom());
						} catch (java.security.NoSuchAlgorithmException e) {
							globalMap.put("tFileFetch_1_ERROR_MESSAGE", e.getMessage());

							e.printStackTrace();
						} catch (java.security.KeyManagementException e) {
							globalMap.put("tFileFetch_1_ERROR_MESSAGE", e.getMessage());

							e.printStackTrace();
						}
						return sslcontext;
					}

					private javax.net.ssl.SSLContext getSSLContext() throws java.io.IOException {

						if (this.sslcontext == null) {
							this.sslcontext = createSSLContext();
						}
						return this.sslcontext;
					}

					public java.net.Socket createSocket(java.net.Socket socket, String host, int port,
							boolean autoClose) throws java.io.IOException, java.net.UnknownHostException {
						return getSSLContext().getSocketFactory().createSocket(socket, host, port, autoClose);
					}

					public java.net.Socket createSocket(String host, int port)
							throws java.io.IOException, java.net.UnknownHostException {
						return getSSLContext().getSocketFactory().createSocket(host, port);
					}

					public java.net.Socket createSocket(String host, int port, java.net.InetAddress clientHost,
							int clientPort) throws java.io.IOException, java.net.UnknownHostException {
						return getSSLContext().getSocketFactory().createSocket(host, port, clientHost, clientPort);
					}

					public java.net.Socket createSocket(String host, int port, java.net.InetAddress localAddress,
							int localPort, org.apache.commons.httpclient.params.HttpConnectionParams params)
							throws java.io.IOException, java.net.UnknownHostException,
							org.apache.commons.httpclient.ConnectTimeoutException {

						if (params == null) {
							throw new IllegalArgumentException("Parameters may not be null");
						}
						int timeout = params.getConnectionTimeout();
						javax.net.SocketFactory socketfactory = getSSLContext().getSocketFactory();

						if (timeout == 0) {
							return socketfactory.createSocket(host, port, localAddress, localPort);
						} else {
							java.net.Socket socket = socketfactory.createSocket();
							java.net.SocketAddress localaddr = new java.net.InetSocketAddress(localAddress, localPort);
							java.net.SocketAddress remoteaddr = new java.net.InetSocketAddress(host, port);
							socket.bind(localaddr);
							socket.connect(remoteaddr, timeout);
							return socket;
						}
					}

					class TrustAnyTrustManager implements javax.net.ssl.X509TrustManager {
						public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType)
								throws java.security.cert.CertificateException {
						}

						public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType)
								throws java.security.cert.CertificateException {
						}

						public java.security.cert.X509Certificate[] getAcceptedIssuers() {
							return new java.security.cert.X509Certificate[] {};
						}
					}
				}

				org.apache.commons.httpclient.protocol.Protocol myhttps_tFileFetch_1 = new org.apache.commons.httpclient.protocol.Protocol(
						"https", new SocketFactory_tFileFetch_1(), 443);
				org.apache.commons.httpclient.protocol.Protocol.registerProtocol("https", myhttps_tFileFetch_1);
				org.apache.commons.httpclient.HttpClient client_tFileFetch_1 = new org.apache.commons.httpclient.HttpClient();

				client_tFileFetch_1.getHttpConnectionManager().getParams().setConnectionTimeout(30000);

				client_tFileFetch_1.getParams()
						.setCookiePolicy(org.apache.commons.httpclient.cookie.CookiePolicy.DEFAULT);

				org.apache.commons.httpclient.HttpMethod method_tFileFetch_1 = new org.apache.commons.httpclient.methods.GetMethod(
						uriToFetch_tFileFetch_1.toString());

				boolean isContinue_tFileFetch_1 = true;
				int status_tFileFetch_1;
				String finalURL_tFileFetch_1 = uriToFetch_tFileFetch_1.toString();

				try { // B_01

					status_tFileFetch_1 = client_tFileFetch_1.executeMethod(method_tFileFetch_1);

					if (!(status_tFileFetch_1 >= 200 && status_tFileFetch_1 < 300)) {// Status code 2XX indicates
																						// success
						throw new java.lang.Exception("Method failed: " + method_tFileFetch_1.getStatusLine());
					}

				} catch (java.lang.Exception e) {
					globalMap.put("tFileFetch_1_ERROR_MESSAGE", e.getMessage());

					throw (e);

				}

				if (isContinue_tFileFetch_1) {

					java.io.InputStream in_tFileFetch_1 = method_tFileFetch_1.getResponseBodyAsStream();
					String sDir_tFileFetch_1 = (context.main_path + context.weather_path_input).trim();
					String fileName_tFileFetch_1 = (((String) globalMap.get("currentYear")) + ".zip").trim();
					// open directory
					java.net.URL url_tFileFetch_1 = new java.net.URL(finalURL_tFileFetch_1);
					String sURIPath_tFileFetch_1 = "";
					int iLastSlashIndex_tFileFetch_1 = 0;
					sURIPath_tFileFetch_1 = url_tFileFetch_1.getFile();
					iLastSlashIndex_tFileFetch_1 = sURIPath_tFileFetch_1.lastIndexOf("/");

					// if not input file name, get the name from URI
					if ("".equals(fileName_tFileFetch_1)) {
						if (iLastSlashIndex_tFileFetch_1 > 0 && (!sURIPath_tFileFetch_1.endsWith("/"))) {
							fileName_tFileFetch_1 = sURIPath_tFileFetch_1.substring(iLastSlashIndex_tFileFetch_1 + 1);
						} else {
							fileName_tFileFetch_1 = "defaultfilename.txt";
						}
					}
					java.io.File dir_tFileFetch_1 = new java.io.File(sDir_tFileFetch_1);

					// pretreatment
					try {
						java.io.File test_file_tFileFetch_1 = new java.io.File(dir_tFileFetch_1, fileName_tFileFetch_1);
						test_file_tFileFetch_1.getParentFile().mkdirs();

						if (test_file_tFileFetch_1.createNewFile()) {
							test_file_tFileFetch_1.delete();
						}
					} catch (java.lang.Exception e) {
						globalMap.put("tFileFetch_1_ERROR_MESSAGE", e.getMessage());

						fileName_tFileFetch_1 = "defaultfilename.txt";
					}
					java.io.File file_tFileFetch_1 = new java.io.File(dir_tFileFetch_1, fileName_tFileFetch_1);
					file_tFileFetch_1.getParentFile().mkdirs();
					java.io.FileOutputStream out_tFileFetch_1 = new java.io.FileOutputStream(file_tFileFetch_1);
					byte[] buffer_tFileFetch_1 = new byte[1024];
					int count_tFileFetch_1 = 0;

					while ((count_tFileFetch_1 = in_tFileFetch_1.read(buffer_tFileFetch_1)) > 0) {
						out_tFileFetch_1.write(buffer_tFileFetch_1, 0, count_tFileFetch_1);
					}
					// close opened object
					in_tFileFetch_1.close();
					out_tFileFetch_1.close();

					method_tFileFetch_1.releaseConnection();

				} // B_01
				globalMap.put("tFileFetch_1_INPUT_STREAM", retIS_tFileFetch_1);

				tos_count_tFileFetch_1++;

				/**
				 * [tFileFetch_1 main ] stop
				 */

				/**
				 * [tFileFetch_1 process_data_begin ] start
				 */

				currentComponent = "tFileFetch_1";

				/**
				 * [tFileFetch_1 process_data_begin ] stop
				 */

				/**
				 * [tFileFetch_1 process_data_end ] start
				 */

				currentComponent = "tFileFetch_1";

				/**
				 * [tFileFetch_1 process_data_end ] stop
				 */

				/**
				 * [tREST_1 process_data_end ] start
				 */

				currentComponent = "tREST_1";

				/**
				 * [tREST_1 process_data_end ] stop
				 */

				/**
				 * [tREST_1 end ] start
				 */

				currentComponent = "tREST_1";

				ok_Hash.put("tREST_1", true);
				end_Hash.put("tREST_1", System.currentTimeMillis());

				/**
				 * [tREST_1 end ] stop
				 */

				/**
				 * [tFileFetch_1 end ] start
				 */

				currentComponent = "tFileFetch_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "csv");
				}

				ok_Hash.put("tFileFetch_1", true);
				end_Hash.put("tFileFetch_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileUnarchive_1Process(globalMap);

				/**
				 * [tFileFetch_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tREST_1 finally ] start
				 */

				currentComponent = "tREST_1";

				/**
				 * [tREST_1 finally ] stop
				 */

				/**
				 * [tFileFetch_1 finally ] start
				 */

				currentComponent = "tFileFetch_1";

				/**
				 * [tFileFetch_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tREST_1_SUBPROCESS_STATE", 1);
	}

	public void tFileUnarchive_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileUnarchive_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileUnarchive_1 begin ] start
				 */

				ok_Hash.put("tFileUnarchive_1", false);
				start_Hash.put("tFileUnarchive_1", System.currentTimeMillis());

				currentComponent = "tFileUnarchive_1";

				int tos_count_tFileUnarchive_1 = 0;

				com.talend.compress.zip.Util util_tFileUnarchive_1 = new com.talend.compress.zip.Util(true);

				String zipFileURL_tFileUnarchive_1 = context.main_path + context.weather_path_input
						+ ((String) globalMap.get("currentYear")) + ".zip";
				String tmpFileURL_tFileUnarchive_1 = zipFileURL_tFileUnarchive_1.toLowerCase();
				String outputPath_tFileUnarchive_1 = context.main_path + context.weather_path_input;

				if (tmpFileURL_tFileUnarchive_1.endsWith(".tar.gz") || tmpFileURL_tFileUnarchive_1.endsWith(".tgz")) {
					org.apache.tools.tar.TarInputStream zip_tFileUnarchive_1 = null;
					java.io.InputStream inputStream_tFileUnarchive_1 = null;
					try {
						inputStream_tFileUnarchive_1 = new java.io.FileInputStream(zipFileURL_tFileUnarchive_1);
						inputStream_tFileUnarchive_1 = new java.util.zip.GZIPInputStream(inputStream_tFileUnarchive_1);
						zip_tFileUnarchive_1 = new org.apache.tools.tar.TarInputStream(inputStream_tFileUnarchive_1);

						org.apache.tools.tar.TarEntry entry_tFileUnarchive_1 = null;
						java.io.InputStream is_tFileUnarchive_1 = null;
						while ((entry_tFileUnarchive_1 = zip_tFileUnarchive_1.getNextEntry()) != null) {
							boolean isDirectory_tFileUnarchive_1 = entry_tFileUnarchive_1.isDirectory();
							if (!isDirectory_tFileUnarchive_1) {
								is_tFileUnarchive_1 = zip_tFileUnarchive_1;
							}
							String filename_tFileUnarchive_1 = entry_tFileUnarchive_1.getName();
							util_tFileUnarchive_1.output(outputPath_tFileUnarchive_1, filename_tFileUnarchive_1,
									isDirectory_tFileUnarchive_1, is_tFileUnarchive_1);

							java.io.File f = new java.io.File(outputPath_tFileUnarchive_1, filename_tFileUnarchive_1);
							f.setLastModified(entry_tFileUnarchive_1.getModTime().getTime());
						}
					} catch (Exception e) {
						globalMap.put("tFileUnarchive_1_ERROR_MESSAGE", e.getMessage());
						throw e;
					} finally {
						if (zip_tFileUnarchive_1 != null) {
							zip_tFileUnarchive_1.close();
						} else if (inputStream_tFileUnarchive_1 != null) {
							inputStream_tFileUnarchive_1.close();
						}
					}
				} else if (tmpFileURL_tFileUnarchive_1.endsWith(".tar")) {
					org.apache.tools.tar.TarInputStream zip_tFileUnarchive_1 = null;
					java.io.InputStream inputStream_tFileUnarchive_1 = null;
					try {
						inputStream_tFileUnarchive_1 = new java.io.FileInputStream(zipFileURL_tFileUnarchive_1);
						zip_tFileUnarchive_1 = new org.apache.tools.tar.TarInputStream(inputStream_tFileUnarchive_1);

						org.apache.tools.tar.TarEntry entry_tFileUnarchive_1 = null;
						java.io.InputStream is_tFileUnarchive_1 = null;
						while ((entry_tFileUnarchive_1 = zip_tFileUnarchive_1.getNextEntry()) != null) {
							boolean isDirectory_tFileUnarchive_1 = entry_tFileUnarchive_1.isDirectory();
							if (!isDirectory_tFileUnarchive_1) {
								is_tFileUnarchive_1 = zip_tFileUnarchive_1;
							}
							String filename_tFileUnarchive_1 = entry_tFileUnarchive_1.getName();
							util_tFileUnarchive_1.output(outputPath_tFileUnarchive_1, filename_tFileUnarchive_1,
									isDirectory_tFileUnarchive_1, is_tFileUnarchive_1);

							java.io.File f = new java.io.File(outputPath_tFileUnarchive_1, filename_tFileUnarchive_1);
							f.setLastModified(entry_tFileUnarchive_1.getModTime().getTime());

						}
					} catch (Exception e) {
						globalMap.put("tFileUnarchive_1_ERROR_MESSAGE", e.getMessage());
						throw e;
					} finally {
						if (zip_tFileUnarchive_1 != null) {
							zip_tFileUnarchive_1.close();
						} else if (inputStream_tFileUnarchive_1 != null) {
							inputStream_tFileUnarchive_1.close();
						}
					}
				} else if (tmpFileURL_tFileUnarchive_1.endsWith(".gz")) {
					java.util.zip.GZIPInputStream zip_tFileUnarchive_1 = null;
					java.io.InputStream inputStream_tFileUnarchive_1 = null;
					try {
						inputStream_tFileUnarchive_1 = new java.io.FileInputStream(
								new java.io.File(zipFileURL_tFileUnarchive_1));
						zip_tFileUnarchive_1 = new java.util.zip.GZIPInputStream(inputStream_tFileUnarchive_1);

						java.io.InputStream is_tFileUnarchive_1 = zip_tFileUnarchive_1;
						String fullName_tFileUnarchive_1 = new java.io.File(zipFileURL_tFileUnarchive_1).getName();
						String filename_tFileUnarchive_1 = fullName_tFileUnarchive_1.substring(0,
								fullName_tFileUnarchive_1.length() - 3);
						util_tFileUnarchive_1.output(outputPath_tFileUnarchive_1, filename_tFileUnarchive_1,
								is_tFileUnarchive_1);
					} catch (Exception e) {
						globalMap.put("tFileUnarchive_1_ERROR_MESSAGE", e.getMessage());
						throw e;
					} finally {
						if (zip_tFileUnarchive_1 != null) {
							zip_tFileUnarchive_1.close();
						} else if (inputStream_tFileUnarchive_1 != null) {
							inputStream_tFileUnarchive_1.close();
						}
					}
				} else {
					// the others all use the ZIP to decompression
					com.talend.compress.zip.Unzip unzip_tFileUnarchive_1 = new com.talend.compress.zip.Unzip(
							zipFileURL_tFileUnarchive_1, outputPath_tFileUnarchive_1);
					unzip_tFileUnarchive_1.setNeedPassword(false);

					final String decryptedPassword_tFileUnarchive_1 = routines.system.PasswordEncryptUtil
							.decryptPassword("enc:routine.encryption.key.v1:ixOKRJtSPyk16hpeOcJ2SkoXl2h3AJ30f42DZA==");

					unzip_tFileUnarchive_1.setPassword(decryptedPassword_tFileUnarchive_1);
					unzip_tFileUnarchive_1.setCheckArchive(false);
					unzip_tFileUnarchive_1.setVerbose(false);
					unzip_tFileUnarchive_1.setExtractPath(true);
					unzip_tFileUnarchive_1.setUtil(util_tFileUnarchive_1);
					unzip_tFileUnarchive_1.setUseZip4jDecryption(true);

					try {
						unzip_tFileUnarchive_1.doUnzip();
					} catch (Exception e) {
						globalMap.put("tFileUnarchive_1_ERROR_MESSAGE", e.getMessage());
						throw e;
					}
				}

				for (com.talend.compress.zip.UnzippedFile uftFileUnarchive_1 : util_tFileUnarchive_1.unzippedFiles) {
					globalMap.put("tFileUnarchive_1_CURRENT_FILE", uftFileUnarchive_1.fileName);
					globalMap.put("tFileUnarchive_1_CURRENT_FILEPATH", uftFileUnarchive_1.filePath);

					/**
					 * [tFileUnarchive_1 begin ] stop
					 */

					/**
					 * [tFileUnarchive_1 main ] start
					 */

					currentComponent = "tFileUnarchive_1";

					tos_count_tFileUnarchive_1++;

					/**
					 * [tFileUnarchive_1 main ] stop
					 */

					/**
					 * [tFileUnarchive_1 process_data_begin ] start
					 */

					currentComponent = "tFileUnarchive_1";

					/**
					 * [tFileUnarchive_1 process_data_begin ] stop
					 */

					/**
					 * [tFileUnarchive_1 process_data_end ] start
					 */

					currentComponent = "tFileUnarchive_1";

					/**
					 * [tFileUnarchive_1 process_data_end ] stop
					 */

					/**
					 * [tFileUnarchive_1 end ] start
					 */

					currentComponent = "tFileUnarchive_1";

				}

				ok_Hash.put("tFileUnarchive_1", true);
				end_Hash.put("tFileUnarchive_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tRunJob_1Process(globalMap);

				/**
				 * [tFileUnarchive_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileUnarchive_1 finally ] start
				 */

				currentComponent = "tFileUnarchive_1";

				/**
				 * [tFileUnarchive_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileUnarchive_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				class DealChildJobLibrary_tRunJob_1 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new java.io.ObjectInputStream(
									new java.io.FileInputStream(crcMapPath)) {
								@Override
								public Class<?> resolveClass(java.io.ObjectStreamClass desc)
										throws java.io.IOException, ClassNotFoundException {
									if (!"java.util.HashMap".equals(desc.getName())) {
										throw new java.io.InvalidClassException(
												"Unauthorized deserialization attempt : " + desc.getName());
									}
									return super.resolveClass(desc);
								}
							};
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

				class JVMArgumentHelper_tRunJob_1 {

					private void addClasspath(java.util.List<String> target_argument_list,
							String job_origin_classpath) {

						String extra_classpath = null;
						String path_separator = System.getProperty("path.separator");
						if (path_separator != null && path_separator.length() > 1) {
							throw new RuntimeException("path separator should be single character");
						}

						if (extra_classpath != null && !extra_classpath.isEmpty()) {
							if (extra_classpath.endsWith(path_separator)) {
								target_argument_list.add(extra_classpath + job_origin_classpath);
							} else if (extra_classpath.contains(path_separator)) {
								target_argument_list
										.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
							} else if (extra_classpath.endsWith(":")) {
								target_argument_list
										.add(extra_classpath.replace(":", path_separator) + job_origin_classpath);
							} else if (extra_classpath.endsWith(";")) {
								target_argument_list
										.add(extra_classpath.replace(";", path_separator) + job_origin_classpath);
							} else if (extra_classpath.contains(":")) {
								target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator),
										path_separator, job_origin_classpath));
							} else if (extra_classpath.contains(";")) {
								target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator),
										path_separator, job_origin_classpath));
							} else {
								target_argument_list
										.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
							}
							return;
						}

						target_argument_list.add(job_origin_classpath);
					}

					private String concatStr(String s1, String s2, String s3) {
						java.lang.StringBuilder strB = new java.lang.StringBuilder();
						strB.append(s1).append(s2).append(s3);
						return strB.toString();
					}

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {
						addArgumentsTo(target_argument_list, argument_from_child, false);
					}

					public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child,
							boolean isCP) {
						if (isCP) {
							addClasspath(target_argument_list, argument_from_child);
							return;
						}

						target_argument_list.add(argument_from_child);

					}

				}

				JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();

				String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				String osName_tRunJob_1 = System.getProperty("os.name");
				if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase().startsWith("win")) {

					paraList_tRunJob_1.add("C:/Program Files/Java/jdk-11.0.14/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (Boolean.getBoolean("propagateLoggingConfiguration")) {
						String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
						if (log4j1_config_tRunJob_1 != null) {
							paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
						}
						String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
						if (log4j2_config_tRunJob_1 != null) {
							paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
						}
						if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
							paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
						}
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx4096M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"-Dtalend.component.manager.m2.repository=C:/Program Files (x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");

					String classpath_tRunJob_1_6 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/jobs/process/meteo/bulkinsertw_0.1/target/classpath.jar;";

					if (audit_jar_path_tRunJob_1 != null && !audit_jar_path_tRunJob_1.isEmpty()) {
						classpath_tRunJob_1_6 += audit_jar_path_tRunJob_1;
					}

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_6), true);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"arpa_data.bulkinsertw_0_1.bulkInsertW");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");

				} else {

					paraList_tRunJob_1.add("C:/Program Files/Java/jdk-11.0.14/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (Boolean.getBoolean("propagateLoggingConfiguration")) {
						String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
						if (log4j1_config_tRunJob_1 != null) {
							paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
						}
						String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
						if (log4j2_config_tRunJob_1 != null) {
							paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
						}
						if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
							paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
						}
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx4096M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"-Dtalend.component.manager.m2.repository=C:/Program Files (x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");

					String classpath_tRunJob_1_6 = "C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/jobs/process/meteo/bulkinsertw_0.1/target/classes:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/jobs/process/meteo/bulkinsertw_0.1/src/main/ext-resources:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/jobs/process/utilities/combinesplittedcsv_0.1/target/classes:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/jobs/process/utilities/combinesplittedcsv_0.1/src/main/ext-resources:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/jobs/process/utilities/splitcsv_0.1/target/classes:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/jobs/process/utilities/splitcsv_0.1/src/main/ext-resources:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/jobs/process/utilities/finalbulk_0.1/target/classes:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/jobs/process/utilities/finalbulk_0.1/src/main/ext-resources:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/code/routines/target/classes:.:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.13.2/log4j-slf4j-impl-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.13.2/log4j-api-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.13.2/log4j-core-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/jboss/marshalling/jboss-marshalling/2.0.12.Final/jboss-marshalling-2.0.12.Final.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/components/lib/talend_file_enhanced/1.1/talend_file_enhanced-1.1.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/dom4j/dom4j/2.1.3/dom4j-2.1.3.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/libraries/jakarta-oro-2.0.8/6.0.0/jakarta-oro-2.0.8-6.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.29/slf4j-api-1.7.29.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/postgresql/postgresql/42.2.14/postgresql-42.2.14.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/components/talendcsv/1.0.0/talendcsv-1.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/daikon/crypto-utils/0.31.12/crypto-utils-0.31.12.jar:";

					if (audit_jar_path_tRunJob_1 != null && !audit_jar_path_tRunJob_1.isEmpty()) {
						classpath_tRunJob_1_6 += audit_jar_path_tRunJob_1;
					}

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_6)
									.replace("$ROOT_PATH", System.getProperty("user.dir")),
							true);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"arpa_data.bulkinsertw_0_1.bulkInsertW");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_1.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_1 = null;

				obj_tRunJob_1 = ((String) globalMap.get("currentYear")) + ".csv";
				if (obj_tRunJob_1 != null) {
					if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_1.add(
								"--context_param regex_file_to_read=" + ((java.util.Date) obj_tRunJob_1).getTime());
					} else {
						paraList_tRunJob_1.add("--context_param regex_file_to_read="
								+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					}
				} else {
					paraList_tRunJob_1.add("--context_param regex_file_to_read="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("regex_file_to_read", obj_tRunJob_1);

				obj_tRunJob_1 = "Truncate and insert full";
				if (obj_tRunJob_1 != null) {
					if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_1
								.add("--context_param operation=" + ((java.util.Date) obj_tRunJob_1).getTime());
					} else {
						paraList_tRunJob_1
								.add("--context_param operation=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					}
				} else {
					paraList_tRunJob_1.add(
							"--context_param operation=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("operation", obj_tRunJob_1);

				obj_tRunJob_1 = true;
				if (obj_tRunJob_1 != null) {
					if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
						paraList_tRunJob_1
								.add("--context_param truncate=" + ((java.util.Date) obj_tRunJob_1).getTime());
					} else {
						paraList_tRunJob_1
								.add("--context_param truncate=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					}
				} else {
					paraList_tRunJob_1.add(
							"--context_param truncate=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("truncate", obj_tRunJob_1);

				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
									globalMap.put("tRunJob_1_ERROR_MESSAGE", ioe.getMessage());

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
									globalMap.put("tRunJob_1_ERROR_MESSAGE", ioe.getMessage());

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

				Runtime runtime_tRunJob_1 = Runtime.getRuntime();
				Process ps_tRunJob_1 = null;

				// 0 indicates normal termination
				int result_tRunJob_1;
				StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
				try {
					ps_tRunJob_1 = runtime_tRunJob_1
							.exec((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

					Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
					normal_tRunJob_1.start();

					Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
					error_tRunJob_1.start();

					result_tRunJob_1 = ps_tRunJob_1.waitFor();
					normal_tRunJob_1.join();
					error_tRunJob_1.join();
				} catch (ThreadDeath tde) {
					globalMap.put("tRunJob_1_ERROR_MESSAGE", tde.getMessage());
					ps_tRunJob_1.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", result_tRunJob_1);
				if (result_tRunJob_1 != 0) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_1.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_1
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());

				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 process_data_begin ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_1 process_data_end ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_end ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileDelete_1Process(globalMap);

				/**
				 * [tRunJob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());

				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */

				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(context.main_path + context.weather_path_input
						+ ((String) globalMap.get("currentYear")) + ".zip");
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
						throw new RuntimeException(
								"File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
					throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath()
							+ " does not exist or is invalid or is not a file.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH", context.main_path + context.weather_path_input
						+ ((String) globalMap.get("currentYear")) + ".zip");

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_end ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				/**
				 * [tFileDelete_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				class DealChildJobLibrary_tRunJob_2 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new java.io.ObjectInputStream(
									new java.io.FileInputStream(crcMapPath)) {
								@Override
								public Class<?> resolveClass(java.io.ObjectStreamClass desc)
										throws java.io.IOException, ClassNotFoundException {
									if (!"java.util.HashMap".equals(desc.getName())) {
										throw new java.io.InvalidClassException(
												"Unauthorized deserialization attempt : " + desc.getName());
									}
									return super.resolveClass(desc);
								}
							};
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_2 dealChildJobLibrary_tRunJob_2 = new DealChildJobLibrary_tRunJob_2();

				class JVMArgumentHelper_tRunJob_2 {

					private void addClasspath(java.util.List<String> target_argument_list,
							String job_origin_classpath) {

						String extra_classpath = null;
						String path_separator = System.getProperty("path.separator");
						if (path_separator != null && path_separator.length() > 1) {
							throw new RuntimeException("path separator should be single character");
						}

						if (extra_classpath != null && !extra_classpath.isEmpty()) {
							if (extra_classpath.endsWith(path_separator)) {
								target_argument_list.add(extra_classpath + job_origin_classpath);
							} else if (extra_classpath.contains(path_separator)) {
								target_argument_list
										.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
							} else if (extra_classpath.endsWith(":")) {
								target_argument_list
										.add(extra_classpath.replace(":", path_separator) + job_origin_classpath);
							} else if (extra_classpath.endsWith(";")) {
								target_argument_list
										.add(extra_classpath.replace(";", path_separator) + job_origin_classpath);
							} else if (extra_classpath.contains(":")) {
								target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator),
										path_separator, job_origin_classpath));
							} else if (extra_classpath.contains(";")) {
								target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator),
										path_separator, job_origin_classpath));
							} else {
								target_argument_list
										.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
							}
							return;
						}

						target_argument_list.add(job_origin_classpath);
					}

					private String concatStr(String s1, String s2, String s3) {
						java.lang.StringBuilder strB = new java.lang.StringBuilder();
						strB.append(s1).append(s2).append(s3);
						return strB.toString();
					}

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {
						addArgumentsTo(target_argument_list, argument_from_child, false);
					}

					public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child,
							boolean isCP) {
						if (isCP) {
							addClasspath(target_argument_list, argument_from_child);
							return;
						}

						target_argument_list.add(argument_from_child);

					}

				}

				JVMArgumentHelper_tRunJob_2 jvm_argument_helper_tRunJob_2 = new JVMArgumentHelper_tRunJob_2();

				String audit_jar_path_tRunJob_2 = System.getProperty("classpath.extended");

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				String osName_tRunJob_2 = System.getProperty("os.name");
				if (osName_tRunJob_2 != null && osName_tRunJob_2.toLowerCase().startsWith("win")) {

					paraList_tRunJob_2.add("C:/Program Files/Java/jdk-11.0.14/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_2.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (Boolean.getBoolean("propagateLoggingConfiguration")) {
						String log4j1_config_tRunJob_2 = System.getProperty("log4j.configuration");
						if (log4j1_config_tRunJob_2 != null) {
							paraList_tRunJob_2.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_2);
						}
						String log4j2_config_tRunJob_2 = System.getProperty("log4j.configurationFile");
						if (log4j2_config_tRunJob_2 != null) {
							paraList_tRunJob_2.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_2);
						}
						if (log4j1_config_tRunJob_2 != null || log4j2_config_tRunJob_2 != null) {
							paraList_tRunJob_2.add("-DpropagateLoggingConfiguration=true");
						}
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx4096M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"-Dtalend.component.manager.m2.repository=C:/Program Files (x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");

					String classpath_tRunJob_2_6 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/jobs/process/meteo/ingestion2022monthw_0.1/target/classpath.jar;";

					if (audit_jar_path_tRunJob_2 != null && !audit_jar_path_tRunJob_2.isEmpty()) {
						classpath_tRunJob_2_6 += audit_jar_path_tRunJob_2;
					}

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(classpath_tRunJob_2_6), true);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"arpa_data.ingestion2022monthw_0_1.ingestion2022MonthW");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "%*");

				} else {

					paraList_tRunJob_2.add("C:/Program Files/Java/jdk-11.0.14/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_2.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (Boolean.getBoolean("propagateLoggingConfiguration")) {
						String log4j1_config_tRunJob_2 = System.getProperty("log4j.configuration");
						if (log4j1_config_tRunJob_2 != null) {
							paraList_tRunJob_2.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_2);
						}
						String log4j2_config_tRunJob_2 = System.getProperty("log4j.configurationFile");
						if (log4j2_config_tRunJob_2 != null) {
							paraList_tRunJob_2.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_2);
						}
						if (log4j1_config_tRunJob_2 != null || log4j2_config_tRunJob_2 != null) {
							paraList_tRunJob_2.add("-DpropagateLoggingConfiguration=true");
						}
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx4096M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"-Dtalend.component.manager.m2.repository=C:/Program Files (x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");

					String classpath_tRunJob_2_6 = "C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/jobs/process/meteo/ingestion2022monthw_0.1/target/classes:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/jobs/process/meteo/ingestion2022monthw_0.1/src/main/ext-resources:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/ARPA_DATA/poms/code/routines/target/classes:.:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.13.2/log4j-slf4j-impl-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.13.2/log4j-api-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.13.2/log4j-core-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.13.2/log4j-1.2-api-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/javax/ws/rs/jsr311-api/1.1.1/jsr311-api-1.1.1.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/jboss/marshalling/jboss-marshalling-river/2.0.12.Final/jboss-marshalling-river-2.0.12.Final.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/jboss/marshalling/jboss-marshalling/2.0.12.Final/jboss-marshalling-2.0.12.Final.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/com/sun/jersey/jersey-client/1.19/jersey-client-1.19.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/components/lib/talend_file_enhanced/1.1/talend_file_enhanced-1.1.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/com/sun/jersey/jersey-core/1.19/jersey-core-1.19.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.3/6.0.0/advancedPersistentLookupLib-1.3-6.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/net/minidev/accessors-smart/2.4.7/accessors-smart-2.4.7.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/dom4j/dom4j/2.1.3/dom4j-2.1.3.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/net/minidev/json-smart/2.4.7/json-smart-2.4.7.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.29/slf4j-api-1.7.29.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/libraries/json-path-2.1.0/6.0.0/json-path-2.1.0-6.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/postgresql/postgresql/42.2.14/postgresql-42.2.14.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/components/talendcsv/1.0.0/talendcsv-1.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/daikon/crypto-utils/0.31.12/crypto-utils-0.31.12.jar:";

					if (audit_jar_path_tRunJob_2 != null && !audit_jar_path_tRunJob_2.isEmpty()) {
						classpath_tRunJob_2_6 += audit_jar_path_tRunJob_2;
					}

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(classpath_tRunJob_2_6)
									.replace("$ROOT_PATH", System.getProperty("user.dir")),
							true);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"arpa_data.ingestion2022monthw_0_1.ingestion2022MonthW");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_2.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_2 = null;

				class ConsoleHelper_tRunJob_2 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
									globalMap.put("tRunJob_2_ERROR_MESSAGE", ioe.getMessage());

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
									globalMap.put("tRunJob_2_ERROR_MESSAGE", ioe.getMessage());

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_2 consoleHelper_tRunJob_2 = new ConsoleHelper_tRunJob_2();

				Runtime runtime_tRunJob_2 = Runtime.getRuntime();
				Process ps_tRunJob_2 = null;

				// 0 indicates normal termination
				int result_tRunJob_2;
				StringBuffer errorMsg_tRunJob_2 = new StringBuffer();
				try {
					ps_tRunJob_2 = runtime_tRunJob_2
							.exec((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));

					Thread normal_tRunJob_2 = consoleHelper_tRunJob_2.getNormalThread(ps_tRunJob_2);
					normal_tRunJob_2.start();

					Thread error_tRunJob_2 = consoleHelper_tRunJob_2.getErrorThread(ps_tRunJob_2, errorMsg_tRunJob_2);
					error_tRunJob_2.start();

					result_tRunJob_2 = ps_tRunJob_2.waitFor();
					normal_tRunJob_2.join();
					error_tRunJob_2.join();
				} catch (ThreadDeath tde) {
					globalMap.put("tRunJob_2_ERROR_MESSAGE", tde.getMessage());
					ps_tRunJob_2.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", result_tRunJob_2);
				if (result_tRunJob_2 != 0) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_2.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_2
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_2.toString());

				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 process_data_begin ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_2 process_data_end ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_end ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 main ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				globalMap.put("today", TalendDate.getDate("dd"));
				globalMap.put("currentYear", TalendDate.getDate("yyyy"));

				tos_count_tSetGlobalVar_1++;

				/**
				 * [tSetGlobalVar_1 main ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_begin ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ingestion2022W ingestion2022WClass = new ingestion2022W();

		int exitCode = ingestion2022WClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ingestion2022W.class.getClassLoader()
					.getResourceAsStream("arpa_data/ingestion2022w_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = ingestion2022W.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("main_path", "id_Directory");
					if (context.getStringValue("main_path") == null) {
						context.main_path = null;
					} else {
						context.main_path = (String) context.getProperty("main_path");
					}
					context.setContextType("path_bulk", "id_Directory");
					if (context.getStringValue("path_bulk") == null) {
						context.path_bulk = null;
					} else {
						context.path_bulk = (String) context.getProperty("path_bulk");
					}
					context.setContextType("path_original", "id_Directory");
					if (context.getStringValue("path_original") == null) {
						context.path_original = null;
					} else {
						context.path_original = (String) context.getProperty("path_original");
					}
					context.setContextType("path_splitted", "id_Directory");
					if (context.getStringValue("path_splitted") == null) {
						context.path_splitted = null;
					} else {
						context.path_splitted = (String) context.getProperty("path_splitted");
					}
					context.setContextType("regex_file_to_read", "id_String");
					if (context.getStringValue("regex_file_to_read") == null) {
						context.regex_file_to_read = null;
					} else {
						context.regex_file_to_read = (String) context.getProperty("regex_file_to_read");
					}
					context.setContextType("sensors_path_input", "id_Directory");
					if (context.getStringValue("sensors_path_input") == null) {
						context.sensors_path_input = null;
					} else {
						context.sensors_path_input = (String) context.getProperty("sensors_path_input");
					}
					context.setContextType("sensors_path_input_splitted", "id_Directory");
					if (context.getStringValue("sensors_path_input_splitted") == null) {
						context.sensors_path_input_splitted = null;
					} else {
						context.sensors_path_input_splitted = (String) context
								.getProperty("sensors_path_input_splitted");
					}
					context.setContextType("sensors_path_output", "id_Directory");
					if (context.getStringValue("sensors_path_output") == null) {
						context.sensors_path_output = null;
					} else {
						context.sensors_path_output = (String) context.getProperty("sensors_path_output");
					}
					context.setContextType("weather_path_input", "id_Directory");
					if (context.getStringValue("weather_path_input") == null) {
						context.weather_path_input = null;
					} else {
						context.weather_path_input = (String) context.getProperty("weather_path_input");
					}
					context.setContextType("weather_path_input_splitted", "id_Directory");
					if (context.getStringValue("weather_path_input_splitted") == null) {
						context.weather_path_input_splitted = null;
					} else {
						context.weather_path_input_splitted = (String) context
								.getProperty("weather_path_input_splitted");
					}
					context.setContextType("weather_path_output", "id_Directory");
					if (context.getStringValue("weather_path_output") == null) {
						context.weather_path_output = null;
					} else {
						context.weather_path_output = (String) context.getProperty("weather_path_output");
					}
					context.setContextType("postgresWoneli_AdditionalParams", "id_String");
					if (context.getStringValue("postgresWoneli_AdditionalParams") == null) {
						context.postgresWoneli_AdditionalParams = null;
					} else {
						context.postgresWoneli_AdditionalParams = (String) context
								.getProperty("postgresWoneli_AdditionalParams");
					}
					context.setContextType("postgresWoneli_Database", "id_String");
					if (context.getStringValue("postgresWoneli_Database") == null) {
						context.postgresWoneli_Database = null;
					} else {
						context.postgresWoneli_Database = (String) context.getProperty("postgresWoneli_Database");
					}
					context.setContextType("postgresWoneli_Login", "id_String");
					if (context.getStringValue("postgresWoneli_Login") == null) {
						context.postgresWoneli_Login = null;
					} else {
						context.postgresWoneli_Login = (String) context.getProperty("postgresWoneli_Login");
					}
					context.setContextType("postgresWoneli_Password", "id_Password");
					if (context.getStringValue("postgresWoneli_Password") == null) {
						context.postgresWoneli_Password = null;
					} else {
						String pwd_postgresWoneli_Password_value = context.getProperty("postgresWoneli_Password");
						context.postgresWoneli_Password = null;
						if (pwd_postgresWoneli_Password_value != null) {
							if (context_param.containsKey("postgresWoneli_Password")) {// no need to decrypt if it come
																						// from program argument or
																						// parent job runtime
								context.postgresWoneli_Password = pwd_postgresWoneli_Password_value;
							} else if (!pwd_postgresWoneli_Password_value.isEmpty()) {
								try {
									context.postgresWoneli_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_postgresWoneli_Password_value);
									context.put("postgresWoneli_Password", context.postgresWoneli_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("postgresWoneli_Port", "id_String");
					if (context.getStringValue("postgresWoneli_Port") == null) {
						context.postgresWoneli_Port = null;
					} else {
						context.postgresWoneli_Port = (String) context.getProperty("postgresWoneli_Port");
					}
					context.setContextType("postgresWoneli_Schema", "id_String");
					if (context.getStringValue("postgresWoneli_Schema") == null) {
						context.postgresWoneli_Schema = null;
					} else {
						context.postgresWoneli_Schema = (String) context.getProperty("postgresWoneli_Schema");
					}
					context.setContextType("postgresWoneli_Server", "id_String");
					if (context.getStringValue("postgresWoneli_Server") == null) {
						context.postgresWoneli_Server = null;
					} else {
						context.postgresWoneli_Server = (String) context.getProperty("postgresWoneli_Server");
					}
					context.setContextType("endpoinAPI_sensors_currentY", "id_String");
					if (context.getStringValue("endpoinAPI_sensors_currentY") == null) {
						context.endpoinAPI_sensors_currentY = null;
					} else {
						context.endpoinAPI_sensors_currentY = (String) context
								.getProperty("endpoinAPI_sensors_currentY");
					}
					context.setContextType("endpoinAPI_stations_sensors", "id_String");
					if (context.getStringValue("endpoinAPI_stations_sensors") == null) {
						context.endpoinAPI_stations_sensors = null;
					} else {
						context.endpoinAPI_stations_sensors = (String) context
								.getProperty("endpoinAPI_stations_sensors");
					}
					context.setContextType("endpoinAPI_stations_weather", "id_String");
					if (context.getStringValue("endpoinAPI_stations_weather") == null) {
						context.endpoinAPI_stations_weather = null;
					} else {
						context.endpoinAPI_stations_weather = (String) context
								.getProperty("endpoinAPI_stations_weather");
					}
					context.setContextType("endpoinAPI_weather_currentM", "id_String");
					if (context.getStringValue("endpoinAPI_weather_currentM") == null) {
						context.endpoinAPI_weather_currentM = null;
					} else {
						context.endpoinAPI_weather_currentM = (String) context
								.getProperty("endpoinAPI_weather_currentM");
					}
					context.setContextType("category", "id_String");
					if (context.getStringValue("category") == null) {
						context.category = null;
					} else {
						context.category = (String) context.getProperty("category");
					}
					context.setContextType("csv_to_split", "id_String");
					if (context.getStringValue("csv_to_split") == null) {
						context.csv_to_split = null;
					} else {
						context.csv_to_split = (String) context.getProperty("csv_to_split");
					}
					context.setContextType("duration", "id_Integer");
					if (context.getStringValue("duration") == null) {
						context.duration = null;
					} else {
						try {
							context.duration = routines.system.ParserUtils
									.parseTo_Integer(context.getProperty("duration"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"duration", e.getMessage()));
							context.duration = null;
						}
					}
					context.setContextType("num_rows", "id_Integer");
					if (context.getStringValue("num_rows") == null) {
						context.num_rows = null;
					} else {
						try {
							context.num_rows = routines.system.ParserUtils
									.parseTo_Integer(context.getProperty("num_rows"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"num_rows", e.getMessage()));
							context.num_rows = null;
						}
					}
					context.setContextType("operation", "id_String");
					if (context.getStringValue("operation") == null) {
						context.operation = null;
					} else {
						context.operation = (String) context.getProperty("operation");
					}
					context.setContextType("table_name", "id_String");
					if (context.getStringValue("table_name") == null) {
						context.table_name = null;
					} else {
						context.table_name = (String) context.getProperty("table_name");
					}
					context.setContextType("truncate", "id_Boolean");
					if (context.getStringValue("truncate") == null) {
						context.truncate = null;
					} else {
						try {
							context.truncate = routines.system.ParserUtils
									.parseTo_Boolean(context.getProperty("truncate"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"truncate", e.getMessage()));
							context.truncate = null;
						}
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("main_path")) {
				context.main_path = (String) parentContextMap.get("main_path");
			}
			if (parentContextMap.containsKey("path_bulk")) {
				context.path_bulk = (String) parentContextMap.get("path_bulk");
			}
			if (parentContextMap.containsKey("path_original")) {
				context.path_original = (String) parentContextMap.get("path_original");
			}
			if (parentContextMap.containsKey("path_splitted")) {
				context.path_splitted = (String) parentContextMap.get("path_splitted");
			}
			if (parentContextMap.containsKey("regex_file_to_read")) {
				context.regex_file_to_read = (String) parentContextMap.get("regex_file_to_read");
			}
			if (parentContextMap.containsKey("sensors_path_input")) {
				context.sensors_path_input = (String) parentContextMap.get("sensors_path_input");
			}
			if (parentContextMap.containsKey("sensors_path_input_splitted")) {
				context.sensors_path_input_splitted = (String) parentContextMap.get("sensors_path_input_splitted");
			}
			if (parentContextMap.containsKey("sensors_path_output")) {
				context.sensors_path_output = (String) parentContextMap.get("sensors_path_output");
			}
			if (parentContextMap.containsKey("weather_path_input")) {
				context.weather_path_input = (String) parentContextMap.get("weather_path_input");
			}
			if (parentContextMap.containsKey("weather_path_input_splitted")) {
				context.weather_path_input_splitted = (String) parentContextMap.get("weather_path_input_splitted");
			}
			if (parentContextMap.containsKey("weather_path_output")) {
				context.weather_path_output = (String) parentContextMap.get("weather_path_output");
			}
			if (parentContextMap.containsKey("postgresWoneli_AdditionalParams")) {
				context.postgresWoneli_AdditionalParams = (String) parentContextMap
						.get("postgresWoneli_AdditionalParams");
			}
			if (parentContextMap.containsKey("postgresWoneli_Database")) {
				context.postgresWoneli_Database = (String) parentContextMap.get("postgresWoneli_Database");
			}
			if (parentContextMap.containsKey("postgresWoneli_Login")) {
				context.postgresWoneli_Login = (String) parentContextMap.get("postgresWoneli_Login");
			}
			if (parentContextMap.containsKey("postgresWoneli_Password")) {
				context.postgresWoneli_Password = (java.lang.String) parentContextMap.get("postgresWoneli_Password");
			}
			if (parentContextMap.containsKey("postgresWoneli_Port")) {
				context.postgresWoneli_Port = (String) parentContextMap.get("postgresWoneli_Port");
			}
			if (parentContextMap.containsKey("postgresWoneli_Schema")) {
				context.postgresWoneli_Schema = (String) parentContextMap.get("postgresWoneli_Schema");
			}
			if (parentContextMap.containsKey("postgresWoneli_Server")) {
				context.postgresWoneli_Server = (String) parentContextMap.get("postgresWoneli_Server");
			}
			if (parentContextMap.containsKey("endpoinAPI_sensors_currentY")) {
				context.endpoinAPI_sensors_currentY = (String) parentContextMap.get("endpoinAPI_sensors_currentY");
			}
			if (parentContextMap.containsKey("endpoinAPI_stations_sensors")) {
				context.endpoinAPI_stations_sensors = (String) parentContextMap.get("endpoinAPI_stations_sensors");
			}
			if (parentContextMap.containsKey("endpoinAPI_stations_weather")) {
				context.endpoinAPI_stations_weather = (String) parentContextMap.get("endpoinAPI_stations_weather");
			}
			if (parentContextMap.containsKey("endpoinAPI_weather_currentM")) {
				context.endpoinAPI_weather_currentM = (String) parentContextMap.get("endpoinAPI_weather_currentM");
			}
			if (parentContextMap.containsKey("category")) {
				context.category = (String) parentContextMap.get("category");
			}
			if (parentContextMap.containsKey("csv_to_split")) {
				context.csv_to_split = (String) parentContextMap.get("csv_to_split");
			}
			if (parentContextMap.containsKey("duration")) {
				context.duration = (Integer) parentContextMap.get("duration");
			}
			if (parentContextMap.containsKey("num_rows")) {
				context.num_rows = (Integer) parentContextMap.get("num_rows");
			}
			if (parentContextMap.containsKey("operation")) {
				context.operation = (String) parentContextMap.get("operation");
			}
			if (parentContextMap.containsKey("table_name")) {
				context.table_name = (String) parentContextMap.get("table_name");
			}
			if (parentContextMap.containsKey("truncate")) {
				context.truncate = (Boolean) parentContextMap.get("truncate");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("postgresWoneli_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_2) {
			globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

			e_tJava_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : ingestion2022W");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 147517 characters generated by Talend Open Studio for Data Integration on the
 * November 8, 2022 at 9:05:20 AM CET
 ************************************************************************************************/
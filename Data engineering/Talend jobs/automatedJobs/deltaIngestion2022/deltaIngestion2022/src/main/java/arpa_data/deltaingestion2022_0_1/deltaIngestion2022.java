// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package arpa_data.deltaingestion2022_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: deltaIngestion2022 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class deltaIngestion2022 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(postgres_woneli_Password != null){
				
					this.setProperty("postgres_woneli_Password", postgres_woneli_Password.toString());
				
			}
			
			if(postgres_woneli_Database != null){
				
					this.setProperty("postgres_woneli_Database", postgres_woneli_Database.toString());
				
			}
			
			if(postgres_woneli_Login != null){
				
					this.setProperty("postgres_woneli_Login", postgres_woneli_Login.toString());
				
			}
			
			if(postgres_woneli_Server != null){
				
					this.setProperty("postgres_woneli_Server", postgres_woneli_Server.toString());
				
			}
			
			if(postgres_woneli_Port != null){
				
					this.setProperty("postgres_woneli_Port", postgres_woneli_Port.toString());
				
			}
			
			if(postgres_woneli_Schema != null){
				
					this.setProperty("postgres_woneli_Schema", postgres_woneli_Schema.toString());
				
			}
			
			if(postgres_woneli_AdditionalParams != null){
				
					this.setProperty("postgres_woneli_AdditionalParams", postgres_woneli_AdditionalParams.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public java.lang.String postgres_woneli_Password;
public java.lang.String getPostgres_woneli_Password(){
	return this.postgres_woneli_Password;
}
public String postgres_woneli_Database;
public String getPostgres_woneli_Database(){
	return this.postgres_woneli_Database;
}
public String postgres_woneli_Login;
public String getPostgres_woneli_Login(){
	return this.postgres_woneli_Login;
}
public String postgres_woneli_Server;
public String getPostgres_woneli_Server(){
	return this.postgres_woneli_Server;
}
public String postgres_woneli_Port;
public String getPostgres_woneli_Port(){
	return this.postgres_woneli_Port;
}
public String postgres_woneli_Schema;
public String getPostgres_woneli_Schema(){
	return this.postgres_woneli_Schema;
}
public String postgres_woneli_AdditionalParams;
public String getPostgres_woneli_AdditionalParams(){
	return this.postgres_woneli_AdditionalParams;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "deltaIngestion2022";
	private final String projectName = "ARPA_DATA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				deltaIngestion2022.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(deltaIngestion2022.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHttpRequest_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHttpRequest_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_db2022_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_api2022__error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHttpRequest_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHttpRequest_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = context.postgres_woneli_AdditionalParams;
            String url_tDBConnection_1 = "jdbc:postgresql://"+context.postgres_woneli_Server+":"+context.postgres_woneli_Port+"/"+context.postgres_woneli_Database;
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = context.postgres_woneli_Login;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.postgres_woneli_Password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tDBConnection_1",context.postgres_woneli_Schema);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class to_updateDbStruct implements routines.system.IPersistableRow<to_updateDbStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final to_updateDbStruct other = (to_updateDbStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(to_updateDbStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(to_updateDbStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(to_updateDbStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class queryUpdateStruct implements routines.system.IPersistableRow<queryUpdateStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final queryUpdateStruct other = (queryUpdateStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(queryUpdateStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(queryUpdateStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(queryUpdateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class to_updateStruct implements routines.system.IPersistableRow<to_updateStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final to_updateStruct other = (to_updateStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(to_updateStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(to_updateStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(to_updateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class quaryInsertStruct implements routines.system.IPersistableRow<quaryInsertStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final quaryInsertStruct other = (quaryInsertStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(quaryInsertStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(quaryInsertStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(quaryInsertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class INSERTStruct implements routines.system.IPersistableRow<INSERTStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final INSERTStruct other = (INSERTStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(INSERTStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(INSERTStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(INSERTStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class NOT_INSERTStruct implements routines.system.IPersistableRow<NOT_INSERTStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				
			    public Boolean update;

				public Boolean getUpdate () {
					return this.update;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.update = null;
           				} else {
           			    	this.update = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.update = null;
           				} else {
           			    	this.update = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
					// Boolean
				
						if(this.update == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.update);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
					// Boolean
				
						if(this.update == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.update);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
		sb.append(",update="+String.valueOf(update));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(NOT_INSERTStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class NOT_INSERT_2Struct implements routines.system.IPersistableRow<NOT_INSERT_2Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				
			    public Boolean update;

				public Boolean getUpdate () {
					return this.update;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.update = null;
           				} else {
           			    	this.update = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.update = null;
           				} else {
           			    	this.update = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
					// Boolean
				
						if(this.update == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.update);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
					// Boolean
				
						if(this.update == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.update);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
		sb.append(",update="+String.valueOf(update));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(NOT_INSERT_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class api2022Struct implements routines.system.IPersistableRow<api2022Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date data;

				public java.util.Date getData () {
					return this.data;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.data = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.data = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.data,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.data,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",data="+String.valueOf(data));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(api2022Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class changeOraLegaleStruct implements routines.system.IPersistableRow<changeOraLegaleStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public String idsensore;

				public String getIdsensore () {
					return this.idsensore;
				}
				
			    public String data;

				public String getData () {
					return this.data;
				}
				
			    public String valore;

				public String getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public String idoperatore;

				public String getIdoperatore () {
					return this.idoperatore;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.idsensore = readString(dis);
					
					this.data = readString(dis);
					
					this.valore = readString(dis);
					
					this.stato = readString(dis);
					
					this.idoperatore = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.idsensore = readString(dis);
					
					this.data = readString(dis);
					
					this.valore = readString(dis);
					
					this.stato = readString(dis);
					
					this.idoperatore = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idsensore,dos);
					
					// String
				
						writeString(this.data,dos);
					
					// String
				
						writeString(this.valore,dos);
					
					// String
				
						writeString(this.stato,dos);
					
					// String
				
						writeString(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.idsensore,dos);
					
					// String
				
						writeString(this.data,dos);
					
					// String
				
						writeString(this.valore,dos);
					
					// String
				
						writeString(this.stato,dos);
					
					// String
				
						writeString(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+idsensore);
		sb.append(",data="+data);
		sb.append(",valore="+valore);
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+idoperatore);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(changeOraLegaleStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class json2022Struct implements routines.system.IPersistableRow<json2022Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public String idsensore;

				public String getIdsensore () {
					return this.idsensore;
				}
				
			    public String data;

				public String getData () {
					return this.data;
				}
				
			    public String valore;

				public String getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public String idoperatore;

				public String getIdoperatore () {
					return this.idoperatore;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.idsensore = readString(dis);
					
					this.data = readString(dis);
					
					this.valore = readString(dis);
					
					this.stato = readString(dis);
					
					this.idoperatore = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.idsensore = readString(dis);
					
					this.data = readString(dis);
					
					this.valore = readString(dis);
					
					this.stato = readString(dis);
					
					this.idoperatore = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idsensore,dos);
					
					// String
				
						writeString(this.data,dos);
					
					// String
				
						writeString(this.valore,dos);
					
					// String
				
						writeString(this.stato,dos);
					
					// String
				
						writeString(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.idsensore,dos);
					
					// String
				
						writeString(this.data,dos);
					
					// String
				
						writeString(this.valore,dos);
					
					// String
				
						writeString(this.stato,dos);
					
					// String
				
						writeString(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+idsensore);
		sb.append(",data="+data);
		sb.append(",valore="+valore);
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+idoperatore);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(json2022Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class apiDataStruct implements routines.system.IPersistableRow<apiDataStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public String ResponseContent;

				public String getResponseContent () {
					return this.ResponseContent;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ResponseContent="+ResponseContent);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(apiDataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHttpRequest_1Struct implements routines.system.IPersistableRow<after_tHttpRequest_1Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public String ResponseContent;

				public String getResponseContent () {
					return this.ResponseContent;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ResponseContent="+ResponseContent);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHttpRequest_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHttpRequest_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);

		apiDataStruct apiData = new apiDataStruct();
json2022Struct json2022 = new json2022Struct();
changeOraLegaleStruct changeOraLegale = new changeOraLegaleStruct();
api2022Struct api2022 = new api2022Struct();
INSERTStruct INSERT = new INSERTStruct();
INSERTStruct quaryInsert = INSERT;
NOT_INSERTStruct NOT_INSERT = new NOT_INSERTStruct();
to_updateStruct to_update = new to_updateStruct();
to_updateStruct queryUpdate = to_update;
NOT_INSERT_2Struct NOT_INSERT_2 = new NOT_INSERT_2Struct();
to_updateDbStruct to_updateDb = new to_updateDbStruct();









	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"quaryInsert");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("sens_data_2022");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("sens_data_2022");
}


int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_3 = "public";
                                    if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_3 = conn_tDBOutput_3.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_3 = stmtSchema_tDBOutput_3.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_3.next()){
                                                defaultSchema_tDBOutput_3 = rsSchema_tDBOutput_3.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_3.next()) {
                                        String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
                                        String schema_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_3.equals(("sens_data_2022"))
                                            && (schema_tDBOutput_3.equals(dbschema_tDBOutput_3) || ((dbschema_tDBOutput_3 ==null || dbschema_tDBOutput_3.trim().length() ==0) && defaultSchema_tDBOutput_3.equals(schema_tDBOutput_3)))) {
                                            whetherExist_tDBOutput_3 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtCreate_tDBOutput_3.execute("CREATE TABLE \"" + tableName_tDBOutput_3 + "\"(\"idsensore\" INT8 ,\"dataora\" TIMESTAMP(29)  ,\"valore\" FLOAT8 ,\"stato\" VARCHAR(2)  ,\"idoperatore\" INT4 ,primary key(\"idsensore\",\"dataora\"))");
                                    }
                                }
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"idsensore\",\"dataora\",\"valore\",\"stato\",\"idoperatore\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"INSERT");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[5];

        public void addRow(String[] row) {

            for (int i = 0; i < 5; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 4 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("INSERT_SHOW");
        util_tLogRow_2.addRow(new String[]{"idsensore","dataora","valore","stato","idoperatore",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"queryUpdate");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("sens_data_2022");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("sens_data_2022");
}

        int updateKeyCount_tDBOutput_1 = 2;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_1 = 30000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"valore\" = ?,\"stato\" = ?,\"idoperatore\" = ? WHERE \"idsensore\" = ? AND \"dataora\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"to_update");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[5];

        public void addRow(String[] row) {

            for (int i = 0; i < 5; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 4 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("UPDATE_SHOW_API");
        util_tLogRow_1.addRow(new String[]{"idsensore","dataora","valore","stato","idoperatore",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"NOT_INSERT");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
to_updateStruct to_update_tmp = new to_updateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */





	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"to_updateDb");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
         class Util_tLogRow_3 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[5];

        public void addRow(String[] row) {

            for (int i = 0; i < 5; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 4 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
        util_tLogRow_3.setTableName("UPDATE_SHOW_DB");
        util_tLogRow_3.addRow(new String[]{"idsensore","dataora","valore","stato","idoperatore",});        
 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"NOT_INSERT_2");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
to_updateDbStruct to_updateDb_tmp = new to_updateDbStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"api2022");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<db2022Struct> tHash_Lookup_db2022 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<db2022Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<db2022Struct>) 
					globalMap.get( "tHash_Lookup_db2022" ))
					;					
					
	

db2022Struct db2022HashKey = new db2022Struct();
db2022Struct db2022Default = new db2022Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
INSERTStruct INSERT_tmp = new INSERTStruct();
NOT_INSERTStruct NOT_INSERT_tmp = new NOT_INSERTStruct();
NOT_INSERT_2Struct NOT_INSERT_2_tmp = new NOT_INSERT_2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tConvertType_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_1", false);
		start_Hash.put("tConvertType_1", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"changeOraLegale");
					}
				
		int tos_count_tConvertType_1 = 0;
		
	int nb_line_tConvertType_1 = 0;  
 



/**
 * [tConvertType_1 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"json2022");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	String data;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
changeOraLegaleStruct changeOraLegale_tmp = new changeOraLegaleStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_1", false);
		start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"apiData");
					}
				
		int tos_count_tExtractJSONFields_1 = 0;
		

int nb_line_tExtractJSONFields_1 = 0;
String jsonStr_tExtractJSONFields_1 = "";

	

class JsonPathCache_tExtractJSONFields_1 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

 



/**
 * [tExtractJSONFields_1 begin ] stop
 */



	
	/**
	 * [tHttpRequest_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHttpRequest_1", false);
		start_Hash.put("tHttpRequest_1", System.currentTimeMillis());
		
	
	currentComponent="tHttpRequest_1";

	
		int tos_count_tHttpRequest_1 = 0;
		

 



/**
 * [tHttpRequest_1 begin ] stop
 */
	
	/**
	 * [tHttpRequest_1 main ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	


int connectTimeOut_tHttpRequest_1 = Integer.valueOf(30)*1000;
int readTimeOut_tHttpRequest_1 = Integer.valueOf(0)*1000;

java.net.URL url_tHttpRequest_1 = new java.net.URL("https://www.dati.lombardia.it/resource/nicp-bhqi.json?$where=data>='2022-01-01T00:00:00'&$limit=3000000");

java.net.HttpURLConnection urlConn_tHttpRequest_1 = null;

if ("local".equals(System.getProperty("http.proxySet"))) {
    java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance().getProxyForUriString("https://www.dati.lombardia.it/resource/nicp-bhqi.json?$where=data>='2022-01-01T00:00:00'&$limit=3000000");
    urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1.openConnection(proxyToUse); 
} else {
    urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1.openConnection();
}
urlConn_tHttpRequest_1.setRequestMethod("GET");
urlConn_tHttpRequest_1.setDoOutput(true);
urlConn_tHttpRequest_1.setDoInput(true);
urlConn_tHttpRequest_1.setUseCaches(false);

boolean connected_tHttpRequest_1 = false;
int responseCode_tHttpRequest_1 = 0;
globalMap.put("tHttpRequest_1_CONNECTED", false);
try{
    urlConn_tHttpRequest_1.connect();
    connected_tHttpRequest_1 = true;
    globalMap.put("tHttpRequest_1_CONNECTED", true);

    byte[] buffer_tHttpRequest_1 = new byte[1024];
    int bos_buffer_tHttpRequest_1 = 0;java.io.ByteArrayOutputStream bytestream_tHttpRequest_1 = new java.io.ByteArrayOutputStream(); 

    responseCode_tHttpRequest_1 = urlConn_tHttpRequest_1.getResponseCode();
    globalMap.put("tHttpRequest_1_RESPONSE_CODE", responseCode_tHttpRequest_1);

    if ( responseCode_tHttpRequest_1 >= 200 && responseCode_tHttpRequest_1 < 300) { //Status code 2XX indicates success
        java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(urlConn_tHttpRequest_1.getInputStream());
        while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1.read(buffer_tHttpRequest_1)) != -1) {bytestream_tHttpRequest_1.write(buffer_tHttpRequest_1,0,bos_buffer_tHttpRequest_1);
        }
        bis_tHttpRequest_1.close();
    } else {
    	String responseMessage_tHttpRequest_1 = urlConn_tHttpRequest_1.getResponseMessage();
    
        //get details response information which will be used when error appear
        java.io.InputStream err_stream_tHttpRequest_1 = urlConn_tHttpRequest_1.getErrorStream();
        if(err_stream_tHttpRequest_1!=null) {
            java.io.InputStream es_tHttpRequest_1 = new java.io.BufferedInputStream(err_stream_tHttpRequest_1);
        	java.io.ByteArrayOutputStream baos_tHttpRequest_1 = new java.io.ByteArrayOutputStream();
        	
        	byte[] buf_tHttpRequest_1 = new byte[1024];
            int read_tHttpRequest_1 = -1;
        	try {
            	while ((read_tHttpRequest_1 = es_tHttpRequest_1.read(buf_tHttpRequest_1)) > 0) {
            		baos_tHttpRequest_1.write(buf_tHttpRequest_1, 0, read_tHttpRequest_1);
            	}
        	} finally {
        		es_tHttpRequest_1.close();
        	}
        
        	responseMessage_tHttpRequest_1 += ("\n" + new String(baos_tHttpRequest_1.toByteArray()));
        }
    	
            throw new RuntimeException("Request failed:" + responseCode_tHttpRequest_1 + " " + responseMessage_tHttpRequest_1);
    }

                    apiData.ResponseContent = new String(bytestream_tHttpRequest_1.toByteArray());
    urlConn_tHttpRequest_1.disconnect();
}catch(Exception e){
globalMap.put("tHttpRequest_1_ERROR_MESSAGE",e.getMessage());
        throw e;
}

 


	tos_count_tHttpRequest_1++;

/**
 * [tHttpRequest_1 main ] stop
 */
	
	/**
	 * [tHttpRequest_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	

 



/**
 * [tHttpRequest_1 process_data_begin ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"apiData"
						
						);
					}
					

            if(apiData.ResponseContent!=null){// C_01
                jsonStr_tExtractJSONFields_1 = apiData.ResponseContent.toString();
   
json2022 = null;

	

String loopPath_tExtractJSONFields_1 = "$.*";
java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_1 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
try {
	document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_1);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
	Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(compiledLoopPath_tExtractJSONFields_1,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
	} else {
		resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
	}
	
	isStructError_tExtractJSONFields_1 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",ex_tExtractJSONFields_1.getMessage());
	throw(ex_tExtractJSONFields_1);
}

String jsonPath_tExtractJSONFields_1 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

Object value_tExtractJSONFields_1 = null;

Object root_tExtractJSONFields_1 = null;
for(int i_tExtractJSONFields_1=0; isStructError_tExtractJSONFields_1 || (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1.size());i_tExtractJSONFields_1++){
	if(!isStructError_tExtractJSONFields_1){
		Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1.get(i_tExtractJSONFields_1);
            json2022 = null;
	json2022 = new json2022Struct();
	nb_line_tExtractJSONFields_1++;
	try {
		jsonPath_tExtractJSONFields_1 = "idsensore";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				json2022.idsensore = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json2022.idsensore = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "data";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				json2022.data = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json2022.data = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "valore";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				json2022.valore = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json2022.valore = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "stato";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				json2022.stato = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json2022.stato = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "idoperatore";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				json2022.idoperatore = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json2022.idoperatore = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",ex_tExtractJSONFields_1.getMessage());
    	throw(ex_tExtractJSONFields_1);	
	}
	
	}
    
	isStructError_tExtractJSONFields_1 = false;
	
//}


 


	tos_count_tExtractJSONFields_1++;

/**
 * [tExtractJSONFields_1 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_begin ] stop
 */
// Start of branch "json2022"
if(json2022 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"json2022"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.data = json2022.data.equals("2022-03-27T02:00:00.000")?StringHandling.CHANGE(json2022.data,"02:00:00.000","01:59:00.000"):json2022.data ;// ###############################
        // ###############################
        // # Output tables

changeOraLegale = null;


// # Output table : 'changeOraLegale'
changeOraLegale_tmp.idsensore = json2022.idsensore;
changeOraLegale_tmp.data = Var.data ;
changeOraLegale_tmp.valore = json2022.valore;
changeOraLegale_tmp.stato = json2022.stato;
changeOraLegale_tmp.idoperatore = json2022.idoperatore;
changeOraLegale = changeOraLegale_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "changeOraLegale"
if(changeOraLegale != null) { 



	
	/**
	 * [tConvertType_1 main ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"changeOraLegale"
						
						);
					}
					


  api2022 = new api2022Struct();
  boolean bHasError_tConvertType_1 = false;       
      try {
          api2022.idsensore = TypeConvert.String2Long(changeOraLegale.idsensore);
      } catch (java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
        bHasError_tConvertType_1 = true;        
          throw e;
      }     
      try {
          api2022.data = TypeConvert.String2Date(changeOraLegale.data, "yyyy-MM-dd'T'HH:mm:ss.SSS");
      } catch (java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
        bHasError_tConvertType_1 = true;        
          throw e;
      }     
      try {
          api2022.valore = TypeConvert.String2Float(changeOraLegale.valore);
      } catch (java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
        bHasError_tConvertType_1 = true;        
          throw e;
      }     
      try {
          api2022.stato = TypeConvert.String2String(changeOraLegale.stato);
      } catch (java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
        bHasError_tConvertType_1 = true;        
          throw e;
      }     
      try {
          api2022.idoperatore = TypeConvert.String2Integer(changeOraLegale.idoperatore);
      } catch (java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
        bHasError_tConvertType_1 = true;        
          throw e;
      }
      if (bHasError_tConvertType_1) { api2022 = null;}

  nb_line_tConvertType_1 ++ ;

 


	tos_count_tConvertType_1++;

/**
 * [tConvertType_1 main ] stop
 */
	
	/**
	 * [tConvertType_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 process_data_begin ] stop
 */
// Start of branch "api2022"
if(api2022 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"api2022"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "db2022" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopdb2022 = false;
       		  	    	
       		  	    	
 							db2022Struct db2022ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    db2022HashKey.idsensore = api2022.idsensore ;
                        		    		
                        		    		    db2022HashKey.dataora = api2022.data  == null ? null : new java.util.Date(api2022.data .getTime());
                        		    		

								
		                        	db2022HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_db2022.lookup( db2022HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_db2022.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_db2022 != null && tHash_Lookup_db2022.getCount(db2022HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'db2022' and it contains more one result from keys :  db2022.idsensore = '" + db2022HashKey.idsensore + "', db2022.dataora = '" + db2022HashKey.dataora + "'");
								} // G 071
							

							db2022Struct db2022 = null;
                    		  	 
							   
                    		  	 
	       		  	    	db2022Struct fromLookup_db2022 = null;
							db2022 = db2022Default;
										 
							
								 
							
							
								if (tHash_Lookup_db2022 !=null && tHash_Lookup_db2022.hasNext()) { // G 099
								
							
								
								fromLookup_db2022 = tHash_Lookup_db2022.next();

							
							
								} // G 099
							
							

							if(fromLookup_db2022 != null) {
								db2022 = fromLookup_db2022;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

NOT_INSERT = null;
NOT_INSERT_2 = null;
INSERT = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'NOT_INSERT'
NOT_INSERT_tmp.idsensore = api2022.idsensore ;
NOT_INSERT_tmp.dataora = api2022.data ;
NOT_INSERT_tmp.valore = api2022.valore ;
NOT_INSERT_tmp.stato = api2022.stato ;
NOT_INSERT_tmp.idoperatore = api2022.idoperatore ;
NOT_INSERT_tmp.update = (api2022.idsensore.equals(db2022.idsensore) && api2022.data.equals(db2022.dataora)) &&
!api2022.valore.equals(db2022.valore) || !api2022.stato.equals(db2022.stato); ;
NOT_INSERT = NOT_INSERT_tmp;

// # Output table : 'NOT_INSERT_2'
NOT_INSERT_2_tmp.idsensore = db2022.idsensore ;
NOT_INSERT_2_tmp.dataora = db2022.dataora ;
NOT_INSERT_2_tmp.valore = db2022.valore ;
NOT_INSERT_2_tmp.stato = db2022.stato ;
NOT_INSERT_2_tmp.idoperatore = db2022.idoperatore ;
NOT_INSERT_2_tmp.update = (api2022.idsensore.equals(db2022.idsensore) && api2022.data.equals(db2022.dataora)) &&
!api2022.valore.equals(db2022.valore) || !api2022.stato.equals(db2022.stato); ;
NOT_INSERT_2 = NOT_INSERT_2_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'INSERT'
// # Filter conditions 
if( rejectedInnerJoin_tMap_2 ) {
INSERT_tmp.idsensore = api2022.idsensore ;
INSERT_tmp.dataora = api2022.data ;
INSERT_tmp.valore = api2022.valore ;
INSERT_tmp.stato = api2022.stato ;
INSERT_tmp.idoperatore = api2022.idoperatore ;
INSERT = INSERT_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "INSERT"
if(INSERT != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"INSERT"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[5];
   				
	    		if(INSERT.idsensore != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(INSERT.idsensore)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERT.dataora != null) { //              
                 row_tLogRow_2[1]=    						
								FormatterUtils.format_Date(INSERT.dataora, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(INSERT.valore != null) { //              
                 row_tLogRow_2[2]=    						
								FormatterUtils.formatUnwithE(INSERT.valore)
					          ;	
							
	    		} //			
    			   				
	    		if(INSERT.stato != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(INSERT.stato)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERT.idoperatore != null) { //              
                 row_tLogRow_2[4]=    						    
				                String.valueOf(INSERT.idoperatore)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     quaryInsert = INSERT;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"quaryInsert"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(quaryInsert.idsensore == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setLong(1, quaryInsert.idsensore);
}

                    if(quaryInsert.dataora != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(quaryInsert.dataora.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(quaryInsert.valore == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_3.setFloat(3, quaryInsert.valore);
}

                    if(quaryInsert.stato == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, quaryInsert.stato);
}

                    if(quaryInsert.idoperatore == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(5, quaryInsert.idoperatore);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    		if (ne_tDBOutput_3 != null) {
				    			throw(sqle_tDBOutput_3);
				    		}else{
				            	throw(e_tDBOutput_3);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "INSERT"




// Start of branch "NOT_INSERT"
if(NOT_INSERT != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"NOT_INSERT"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

to_update = null;


// # Output table : 'to_update'
// # Filter conditions 
if( 

NOT_INSERT.update == true

 ) {
to_update_tmp.idsensore = NOT_INSERT.idsensore ;
to_update_tmp.dataora = NOT_INSERT.dataora ;
to_update_tmp.valore = NOT_INSERT.valore ;
to_update_tmp.stato = NOT_INSERT.stato ;
to_update_tmp.idoperatore = NOT_INSERT.idoperatore ;
to_update = to_update_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "to_update"
if(to_update != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"to_update"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[5];
   				
	    		if(to_update.idsensore != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(to_update.idsensore)			
					          ;	
							
	    		} //			
    			   				
	    		if(to_update.dataora != null) { //              
                 row_tLogRow_1[1]=    						
								FormatterUtils.format_Date(to_update.dataora, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(to_update.valore != null) { //              
                 row_tLogRow_1[2]=    						
								FormatterUtils.formatUnwithE(to_update.valore)
					          ;	
							
	    		} //			
    			   				
	    		if(to_update.stato != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(to_update.stato)			
					          ;	
							
	    		} //			
    			   				
	    		if(to_update.idoperatore != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(to_update.idoperatore)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     queryUpdate = to_update;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"queryUpdate"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(queryUpdate.valore == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_1.setFloat(1, queryUpdate.valore);
}

                    if(queryUpdate.stato == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, queryUpdate.stato);
}

                    if(queryUpdate.idoperatore == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(3, queryUpdate.idoperatore);
}

                    if(queryUpdate.idsensore == null) {
pstmt_tDBOutput_1.setNull(4 + count_tDBOutput_1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setLong(4 + count_tDBOutput_1, queryUpdate.idsensore);
}


                    if(queryUpdate.dataora != null) {
pstmt_tDBOutput_1.setTimestamp(5 + count_tDBOutput_1, new java.sql.Timestamp(queryUpdate.dataora.getTime()));
} else {
pstmt_tDBOutput_1.setNull(5 + count_tDBOutput_1, java.sql.Types.TIMESTAMP);
}


    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    		if (ne_tDBOutput_1 != null) {
				    			throw(sqle_tDBOutput_1);
				    		}else{
				            	throw(e_tDBOutput_1);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "to_update"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "NOT_INSERT"




// Start of branch "NOT_INSERT_2"
if(NOT_INSERT_2 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"NOT_INSERT_2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

to_updateDb = null;


// # Output table : 'to_updateDb'
// # Filter conditions 
if( 

NOT_INSERT_2.update == true

 ) {
to_updateDb_tmp.idsensore = NOT_INSERT_2.idsensore ;
to_updateDb_tmp.dataora = NOT_INSERT_2.dataora ;
to_updateDb_tmp.valore = NOT_INSERT_2.valore ;
to_updateDb_tmp.stato = NOT_INSERT_2.stato ;
to_updateDb_tmp.idoperatore = NOT_INSERT_2.idoperatore ;
to_updateDb = to_updateDb_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "to_updateDb"
if(to_updateDb != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"to_updateDb"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_3 = new String[5];
   				
	    		if(to_updateDb.idsensore != null) { //              
                 row_tLogRow_3[0]=    						    
				                String.valueOf(to_updateDb.idsensore)			
					          ;	
							
	    		} //			
    			   				
	    		if(to_updateDb.dataora != null) { //              
                 row_tLogRow_3[1]=    						
								FormatterUtils.format_Date(to_updateDb.dataora, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(to_updateDb.valore != null) { //              
                 row_tLogRow_3[2]=    						
								FormatterUtils.formatUnwithE(to_updateDb.valore)
					          ;	
							
	    		} //			
    			   				
	    		if(to_updateDb.stato != null) { //              
                 row_tLogRow_3[3]=    						    
				                String.valueOf(to_updateDb.stato)			
					          ;	
							
	    		} //			
    			   				
	    		if(to_updateDb.idoperatore != null) { //              
                 row_tLogRow_3[4]=    						    
				                String.valueOf(to_updateDb.idoperatore)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_3.addRow(row_tLogRow_3);	
				nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "to_updateDb"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "NOT_INSERT_2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "api2022"




	
	/**
	 * [tConvertType_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 process_data_end ] stop
 */

} // End of branch "changeOraLegale"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "json2022"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_end ] stop
 */



	
	/**
	 * [tHttpRequest_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	

 



/**
 * [tHttpRequest_1 process_data_end ] stop
 */
	
	/**
	 * [tHttpRequest_1 end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	

 

ok_Hash.put("tHttpRequest_1", true);
end_Hash.put("tHttpRequest_1", System.currentTimeMillis());




/**
 * [tHttpRequest_1 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
   globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"apiData");
			  	}
			  	
 

ok_Hash.put("tExtractJSONFields_1", true);
end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());




/**
 * [tExtractJSONFields_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"json2022");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tConvertType_1 end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	
      globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"changeOraLegale");
			  	}
			  	
 

ok_Hash.put("tConvertType_1", true);
end_Hash.put("tConvertType_1", System.currentTimeMillis());




/**
 * [tConvertType_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_db2022 != null) {
						tHash_Lookup_db2022.endGet();
					}
					globalMap.remove( "tHash_Lookup_db2022" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"api2022");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"INSERT");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				}
		    	
		    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    		if (ne_tDBOutput_3 != null) {
	    			throw(sqle_tDBOutput_3);
	    		}else{
	            	throw(e_tDBOutput_3);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"quaryInsert");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */







	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"NOT_INSERT");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"to_update");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				}
		    	
		    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    		if (ne_tDBOutput_1 != null) {
	    			throw(sqle_tDBOutput_1);
	    		}else{
	            	throw(e_tDBOutput_1);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"queryUpdate");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */










	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"NOT_INSERT_2");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_3 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    
                    consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
                    consoleOut_tLogRow_3.flush();
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"to_updateDb");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHttpRequest_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_db2022"); 
				     			
				try{
					
	
	/**
	 * [tHttpRequest_1 finally ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	

 



/**
 * [tHttpRequest_1 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tConvertType_1 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */







	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */










	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 1);
	}
	


public static class queryDeleteStruct implements routines.system.IPersistableRow<queryDeleteStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final queryDeleteStruct other = (queryDeleteStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(queryDeleteStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(queryDeleteStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(queryDeleteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DELETEDStruct implements routines.system.IPersistableRow<DELETEDStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DELETEDStruct other = (DELETEDStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(DELETEDStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(DELETEDStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DELETEDStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class db2022_Struct implements routines.system.IPersistableRow<db2022_Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(db2022_Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHttpRequest_4Process(globalMap);

		db2022_Struct db2022_ = new db2022_Struct();
DELETEDStruct DELETED = new DELETEDStruct();
DELETEDStruct queryDelete = DELETED;






	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"queryDelete");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("sens_data_2022");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("sens_data_2022");
}

        int deleteKeyCount_tDBOutput_4 = 2;
        if(deleteKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_4 = 30000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
	    String delete_tDBOutput_4 = "DELETE FROM \"" + tableName_tDBOutput_4 + "\" WHERE \"idsensore\" = ? AND \"dataora\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(delete_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DELETED");
					}
				
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
         class Util_tLogRow_4 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[5];

        public void addRow(String[] row) {

            for (int i = 0; i < 5; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 4 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
        util_tLogRow_4.setTableName("DELETE_SHOW");
        util_tLogRow_4.addRow(new String[]{"idsensore","dataora","valore","stato","idoperatore",});        
 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"db2022_");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<api2022_Struct> tHash_Lookup_api2022_ = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<api2022_Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<api2022_Struct>) 
					globalMap.get( "tHash_Lookup_api2022_" ))
					;					
					
	

api2022_Struct api2022_HashKey = new api2022_Struct();
api2022_Struct api2022_Default = new api2022_Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
DELETEDStruct DELETED_tmp = new DELETEDStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select * from sens_data_2022";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								db2022_.idsensore = null;
							} else {
		                          
            db2022_.idsensore = rs_tDBInput_2.getLong(1);
            if(rs_tDBInput_2.wasNull()){
                    db2022_.idsensore = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								db2022_.dataora = null;
							} else {
										
			db2022_.dataora = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 2);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								db2022_.valore = null;
							} else {
		                          
            db2022_.valore = rs_tDBInput_2.getFloat(3);
            if(rs_tDBInput_2.wasNull()){
                    db2022_.valore = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								db2022_.stato = null;
							} else {
	                         		
        	db2022_.stato = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								db2022_.idoperatore = null;
							} else {
		                          
            db2022_.idoperatore = rs_tDBInput_2.getInt(5);
            if(rs_tDBInput_2.wasNull()){
                    db2022_.idoperatore = null;
            }
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"db2022_"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "api2022_" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopapi2022_ = false;
       		  	    	
       		  	    	
 							api2022_Struct api2022_ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    api2022_HashKey.idsensore = db2022_.idsensore ;
                        		    		
                        		    		    api2022_HashKey.dataora = db2022_.dataora  == null ? null : new java.util.Date(db2022_.dataora .getTime());
                        		    		

								
		                        	api2022_HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_api2022_.lookup( api2022_HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_api2022_.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_api2022_ != null && tHash_Lookup_api2022_.getCount(api2022_HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'api2022_' and it contains more one result from keys :  api2022_.idsensore = '" + api2022_HashKey.idsensore + "', api2022_.dataora = '" + api2022_HashKey.dataora + "'");
								} // G 071
							

							api2022_Struct api2022_ = null;
                    		  	 
							   
                    		  	 
	       		  	    	api2022_Struct fromLookup_api2022_ = null;
							api2022_ = api2022_Default;
										 
							
								 
							
							
								if (tHash_Lookup_api2022_ !=null && tHash_Lookup_api2022_.hasNext()) { // G 099
								
							
								
								fromLookup_api2022_ = tHash_Lookup_api2022_.next();

							
							
								} // G 099
							
							

							if(fromLookup_api2022_ != null) {
								api2022_ = fromLookup_api2022_;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

DELETED = null;

if(!rejectedInnerJoin_tMap_4 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'DELETED'
// # Filter conditions 
if( rejectedInnerJoin_tMap_4 ) {
DELETED_tmp.idsensore = db2022_.idsensore ;
DELETED_tmp.dataora = db2022_.dataora ;
DELETED_tmp.valore = db2022_.valore ;
DELETED_tmp.stato = db2022_.stato ;
DELETED_tmp.idoperatore = db2022_.idoperatore ;
DELETED = DELETED_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "DELETED"
if(DELETED != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DELETED"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_4 = new String[5];
   				
	    		if(DELETED.idsensore != null) { //              
                 row_tLogRow_4[0]=    						    
				                String.valueOf(DELETED.idsensore)			
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.dataora != null) { //              
                 row_tLogRow_4[1]=    						
								FormatterUtils.format_Date(DELETED.dataora, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.valore != null) { //              
                 row_tLogRow_4[2]=    						
								FormatterUtils.formatUnwithE(DELETED.valore)
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.stato != null) { //              
                 row_tLogRow_4[3]=    						    
				                String.valueOf(DELETED.stato)			
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.idoperatore != null) { //              
                 row_tLogRow_4[4]=    						    
				                String.valueOf(DELETED.idoperatore)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_4.addRow(row_tLogRow_4);	
				nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 
     queryDelete = DELETED;


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"queryDelete"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;
					
                    if(queryDelete.idsensore == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setLong(1, queryDelete.idsensore);
}

					
                    if(queryDelete.dataora != null) {
pstmt_tDBOutput_4.setTimestamp(2, new java.sql.Timestamp(queryDelete.dataora.getTime()));
} else {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.TIMESTAMP);
}

    		pstmt_tDBOutput_4.addBatch();
			nb_line_tDBOutput_4++;
			  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    	    deletedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    		if (ne_tDBOutput_4 != null) {
				    			throw(sqle_tDBOutput_4);
				    		}else{
				            	throw(e_tDBOutput_4);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "DELETED"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_api2022_ != null) {
						tHash_Lookup_api2022_.endGet();
					}
					globalMap.remove( "tHash_Lookup_api2022_" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"db2022_");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_4 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    
                    consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
                    consoleOut_tLogRow_4.flush();
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DELETED");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				}
		    	
		    	    deletedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    		if (ne_tDBOutput_4 != null) {
	    			throw(sqle_tDBOutput_4);
	    		}else{
	            	throw(e_tDBOutput_4);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"queryDelete");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_api2022_"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class db2022Struct implements routines.system.IPersistableComparableLookupRow<db2022Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final db2022Struct other = (db2022Struct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(db2022Struct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(db2022Struct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
						this.stato = readString(dis,ois);
					
						this.idoperatore = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = objectIn.readFloat();
           				}
					
						this.stato = readString(dis,objectIn);
					
						this.idoperatore = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
						writeString(this.stato, dos, oos);
					
					writeInteger(this.idoperatore, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						if(this.valore == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.valore);
		            	}
					
						writeString(this.stato, dos, objectOut);
					
					writeInteger(this.idoperatore, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(db2022Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		db2022Struct db2022 = new db2022Struct();




	
	/**
	 * [tAdvancedHash_db2022 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_db2022", false);
		start_Hash.put("tAdvancedHash_db2022", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_db2022";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"db2022");
					}
				
		int tos_count_tAdvancedHash_db2022 = 0;
		

			   		// connection name:db2022
			   		// source node:tDBInput_1 - inputs:(after_tHttpRequest_1) outputs:(db2022,db2022) | target node:tAdvancedHash_db2022 - inputs:(db2022) outputs:()
			   		// linked node: tMap_2 - inputs:(api2022,db2022) outputs:(INSERT,NOT_INSERT,NOT_INSERT_2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_db2022 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<db2022Struct> tHash_Lookup_db2022 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<db2022Struct>getLookup(matchingModeEnum_db2022);
	   						   
		   	   	   globalMap.put("tHash_Lookup_db2022", tHash_Lookup_db2022);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_db2022 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select* from sens_data_2022";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								db2022.idsensore = null;
							} else {
		                          
            db2022.idsensore = rs_tDBInput_1.getLong(1);
            if(rs_tDBInput_1.wasNull()){
                    db2022.idsensore = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								db2022.dataora = null;
							} else {
										
			db2022.dataora = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 2);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								db2022.valore = null;
							} else {
		                          
            db2022.valore = rs_tDBInput_1.getFloat(3);
            if(rs_tDBInput_1.wasNull()){
                    db2022.valore = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								db2022.stato = null;
							} else {
	                         		
        	db2022.stato = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								db2022.idoperatore = null;
							} else {
		                          
            db2022.idoperatore = rs_tDBInput_1.getInt(5);
            if(rs_tDBInput_1.wasNull()){
                    db2022.idoperatore = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_db2022 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_db2022";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"db2022"
						
						);
					}
					


			   
			   

					db2022Struct db2022_HashRow = new db2022Struct();
		   	   	   
				
				db2022_HashRow.idsensore = db2022.idsensore;
				
				db2022_HashRow.dataora = db2022.dataora;
				
				db2022_HashRow.valore = db2022.valore;
				
				db2022_HashRow.stato = db2022.stato;
				
				db2022_HashRow.idoperatore = db2022.idoperatore;
				
			tHash_Lookup_db2022.put(db2022_HashRow);
			
            




 


	tos_count_tAdvancedHash_db2022++;

/**
 * [tAdvancedHash_db2022 main ] stop
 */
	
	/**
	 * [tAdvancedHash_db2022 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_db2022";

	

 



/**
 * [tAdvancedHash_db2022 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_db2022 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_db2022";

	

 



/**
 * [tAdvancedHash_db2022 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_db2022 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_db2022";

	

tHash_Lookup_db2022.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"db2022");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_db2022", true);
end_Hash.put("tAdvancedHash_db2022", System.currentTimeMillis());




/**
 * [tAdvancedHash_db2022 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_db2022 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_db2022";

	

 



/**
 * [tAdvancedHash_db2022 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class api2022_Struct implements routines.system.IPersistableComparableLookupRow<api2022_Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final api2022_Struct other = (api2022_Struct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(api2022_Struct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(api2022_Struct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
						this.stato = readString(dis,ois);
					
						this.idoperatore = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = objectIn.readFloat();
           				}
					
						this.stato = readString(dis,objectIn);
					
						this.idoperatore = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
						writeString(this.stato, dos, oos);
					
					writeInteger(this.idoperatore, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						if(this.valore == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.valore);
		            	}
					
						writeString(this.stato, dos, objectOut);
					
					writeInteger(this.idoperatore, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(api2022_Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class changeOraLegale_Struct implements routines.system.IPersistableRow<changeOraLegale_Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public String idsensore;

				public String getIdsensore () {
					return this.idsensore;
				}
				
			    public String data;

				public String getData () {
					return this.data;
				}
				
			    public String valore;

				public String getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public String idoperatore;

				public String getIdoperatore () {
					return this.idoperatore;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.idsensore = readString(dis);
					
					this.data = readString(dis);
					
					this.valore = readString(dis);
					
					this.stato = readString(dis);
					
					this.idoperatore = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.idsensore = readString(dis);
					
					this.data = readString(dis);
					
					this.valore = readString(dis);
					
					this.stato = readString(dis);
					
					this.idoperatore = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idsensore,dos);
					
					// String
				
						writeString(this.data,dos);
					
					// String
				
						writeString(this.valore,dos);
					
					// String
				
						writeString(this.stato,dos);
					
					// String
				
						writeString(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.idsensore,dos);
					
					// String
				
						writeString(this.data,dos);
					
					// String
				
						writeString(this.valore,dos);
					
					// String
				
						writeString(this.stato,dos);
					
					// String
				
						writeString(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+idsensore);
		sb.append(",data="+data);
		sb.append(",valore="+valore);
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+idoperatore);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(changeOraLegale_Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class json2022_Struct implements routines.system.IPersistableRow<json2022_Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public String idsensore;

				public String getIdsensore () {
					return this.idsensore;
				}
				
			    public String data;

				public String getData () {
					return this.data;
				}
				
			    public String valore;

				public String getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public String idoperatore;

				public String getIdoperatore () {
					return this.idoperatore;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.idsensore = readString(dis);
					
					this.data = readString(dis);
					
					this.valore = readString(dis);
					
					this.stato = readString(dis);
					
					this.idoperatore = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.idsensore = readString(dis);
					
					this.data = readString(dis);
					
					this.valore = readString(dis);
					
					this.stato = readString(dis);
					
					this.idoperatore = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idsensore,dos);
					
					// String
				
						writeString(this.data,dos);
					
					// String
				
						writeString(this.valore,dos);
					
					// String
				
						writeString(this.stato,dos);
					
					// String
				
						writeString(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.idsensore,dos);
					
					// String
				
						writeString(this.data,dos);
					
					// String
				
						writeString(this.valore,dos);
					
					// String
				
						writeString(this.stato,dos);
					
					// String
				
						writeString(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+idsensore);
		sb.append(",data="+data);
		sb.append(",valore="+valore);
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+idoperatore);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(json2022_Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class apiData_Struct implements routines.system.IPersistableRow<apiData_Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public String ResponseContent;

				public String getResponseContent () {
					return this.ResponseContent;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ResponseContent="+ResponseContent);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(apiData_Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHttpRequest_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHttpRequest_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		apiData_Struct apiData_ = new apiData_Struct();
json2022_Struct json2022_ = new json2022_Struct();
changeOraLegale_Struct changeOraLegale_ = new changeOraLegale_Struct();
api2022_Struct api2022_ = new api2022_Struct();







	
	/**
	 * [tAdvancedHash_api2022_ begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_api2022_", false);
		start_Hash.put("tAdvancedHash_api2022_", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_api2022_";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"api2022_");
					}
				
		int tos_count_tAdvancedHash_api2022_ = 0;
		

			   		// connection name:api2022_
			   		// source node:tConvertType_2 - inputs:(changeOraLegale_) outputs:(api2022_,api2022_) | target node:tAdvancedHash_api2022_ - inputs:(api2022_) outputs:()
			   		// linked node: tMap_4 - inputs:(db2022_,api2022_) outputs:(DELETED)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_api2022_ = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<api2022_Struct> tHash_Lookup_api2022_ =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<api2022_Struct>getLookup(matchingModeEnum_api2022_);
	   						   
		   	   	   globalMap.put("tHash_Lookup_api2022_", tHash_Lookup_api2022_);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_api2022_ begin ] stop
 */



	
	/**
	 * [tConvertType_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_2", false);
		start_Hash.put("tConvertType_2", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"changeOraLegale_");
					}
				
		int tos_count_tConvertType_2 = 0;
		
	int nb_line_tConvertType_2 = 0;  
 



/**
 * [tConvertType_2 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"json2022_");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
	String data;
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
changeOraLegale_Struct changeOraLegale__tmp = new changeOraLegale_Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_2", false);
		start_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"apiData_");
					}
				
		int tos_count_tExtractJSONFields_2 = 0;
		

int nb_line_tExtractJSONFields_2 = 0;
String jsonStr_tExtractJSONFields_2 = "";

	

class JsonPathCache_tExtractJSONFields_2 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_2 jsonPathCache_tExtractJSONFields_2 = new JsonPathCache_tExtractJSONFields_2();

 



/**
 * [tExtractJSONFields_2 begin ] stop
 */



	
	/**
	 * [tHttpRequest_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHttpRequest_4", false);
		start_Hash.put("tHttpRequest_4", System.currentTimeMillis());
		
	
	currentComponent="tHttpRequest_4";

	
		int tos_count_tHttpRequest_4 = 0;
		

 



/**
 * [tHttpRequest_4 begin ] stop
 */
	
	/**
	 * [tHttpRequest_4 main ] start
	 */

	

	
	
	currentComponent="tHttpRequest_4";

	


int connectTimeOut_tHttpRequest_4 = Integer.valueOf(30)*1000;
int readTimeOut_tHttpRequest_4 = Integer.valueOf(0)*1000;

java.net.URL url_tHttpRequest_4 = new java.net.URL("https://www.dati.lombardia.it/resource/nicp-bhqi.json?$where=data>='2022-01-01T00:00:00'&$limit=3000000");

java.net.HttpURLConnection urlConn_tHttpRequest_4 = null;

if ("local".equals(System.getProperty("http.proxySet"))) {
    java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance().getProxyForUriString("https://www.dati.lombardia.it/resource/nicp-bhqi.json?$where=data>='2022-01-01T00:00:00'&$limit=3000000");
    urlConn_tHttpRequest_4 = (java.net.HttpURLConnection) url_tHttpRequest_4.openConnection(proxyToUse); 
} else {
    urlConn_tHttpRequest_4 = (java.net.HttpURLConnection) url_tHttpRequest_4.openConnection();
}
urlConn_tHttpRequest_4.setRequestMethod("GET");
urlConn_tHttpRequest_4.setDoOutput(true);
urlConn_tHttpRequest_4.setDoInput(true);
urlConn_tHttpRequest_4.setUseCaches(false);

boolean connected_tHttpRequest_4 = false;
int responseCode_tHttpRequest_4 = 0;
globalMap.put("tHttpRequest_4_CONNECTED", false);
try{
    urlConn_tHttpRequest_4.connect();
    connected_tHttpRequest_4 = true;
    globalMap.put("tHttpRequest_4_CONNECTED", true);

    byte[] buffer_tHttpRequest_4 = new byte[1024];
    int bos_buffer_tHttpRequest_4 = 0;java.io.ByteArrayOutputStream bytestream_tHttpRequest_4 = new java.io.ByteArrayOutputStream(); 

    responseCode_tHttpRequest_4 = urlConn_tHttpRequest_4.getResponseCode();
    globalMap.put("tHttpRequest_4_RESPONSE_CODE", responseCode_tHttpRequest_4);

    if ( responseCode_tHttpRequest_4 >= 200 && responseCode_tHttpRequest_4 < 300) { //Status code 2XX indicates success
        java.io.InputStream bis_tHttpRequest_4 = new java.io.BufferedInputStream(urlConn_tHttpRequest_4.getInputStream());
        while ((bos_buffer_tHttpRequest_4 = bis_tHttpRequest_4.read(buffer_tHttpRequest_4)) != -1) {bytestream_tHttpRequest_4.write(buffer_tHttpRequest_4,0,bos_buffer_tHttpRequest_4);
        }
        bis_tHttpRequest_4.close();
    } else {
    	String responseMessage_tHttpRequest_4 = urlConn_tHttpRequest_4.getResponseMessage();
    
        //get details response information which will be used when error appear
        java.io.InputStream err_stream_tHttpRequest_4 = urlConn_tHttpRequest_4.getErrorStream();
        if(err_stream_tHttpRequest_4!=null) {
            java.io.InputStream es_tHttpRequest_4 = new java.io.BufferedInputStream(err_stream_tHttpRequest_4);
        	java.io.ByteArrayOutputStream baos_tHttpRequest_4 = new java.io.ByteArrayOutputStream();
        	
        	byte[] buf_tHttpRequest_4 = new byte[1024];
            int read_tHttpRequest_4 = -1;
        	try {
            	while ((read_tHttpRequest_4 = es_tHttpRequest_4.read(buf_tHttpRequest_4)) > 0) {
            		baos_tHttpRequest_4.write(buf_tHttpRequest_4, 0, read_tHttpRequest_4);
            	}
        	} finally {
        		es_tHttpRequest_4.close();
        	}
        
        	responseMessage_tHttpRequest_4 += ("\n" + new String(baos_tHttpRequest_4.toByteArray()));
        }
    	
            throw new RuntimeException("Request failed:" + responseCode_tHttpRequest_4 + " " + responseMessage_tHttpRequest_4);
    }

                    apiData_.ResponseContent = new String(bytestream_tHttpRequest_4.toByteArray());
    urlConn_tHttpRequest_4.disconnect();
}catch(Exception e){
globalMap.put("tHttpRequest_4_ERROR_MESSAGE",e.getMessage());
        throw e;
}

 


	tos_count_tHttpRequest_4++;

/**
 * [tHttpRequest_4 main ] stop
 */
	
	/**
	 * [tHttpRequest_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHttpRequest_4";

	

 



/**
 * [tHttpRequest_4 process_data_begin ] stop
 */

	
	/**
	 * [tExtractJSONFields_2 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"apiData_"
						
						);
					}
					

            if(apiData_.ResponseContent!=null){// C_01
                jsonStr_tExtractJSONFields_2 = apiData_.ResponseContent.toString();
   
json2022_ = null;

	

String loopPath_tExtractJSONFields_2 = "$.*";
java.util.List<Object> resultset_tExtractJSONFields_2 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_2 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_2 = null;
try {
	document_tExtractJSONFields_2 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_2);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(loopPath_tExtractJSONFields_2);
	Object result_tExtractJSONFields_2 = document_tExtractJSONFields_2.read(compiledLoopPath_tExtractJSONFields_2,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_2 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_2 = (net.minidev.json.JSONArray) result_tExtractJSONFields_2;
	} else {
		resultset_tExtractJSONFields_2.add(result_tExtractJSONFields_2);
	}
	
	isStructError_tExtractJSONFields_2 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_2) {
globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",ex_tExtractJSONFields_2.getMessage());
	throw(ex_tExtractJSONFields_2);
}

String jsonPath_tExtractJSONFields_2 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_2 = null;

Object value_tExtractJSONFields_2 = null;

Object root_tExtractJSONFields_2 = null;
for(int i_tExtractJSONFields_2=0; isStructError_tExtractJSONFields_2 || (i_tExtractJSONFields_2 < resultset_tExtractJSONFields_2.size());i_tExtractJSONFields_2++){
	if(!isStructError_tExtractJSONFields_2){
		Object row_tExtractJSONFields_2 = resultset_tExtractJSONFields_2.get(i_tExtractJSONFields_2);
            json2022_ = null;
	json2022_ = new json2022_Struct();
	nb_line_tExtractJSONFields_2++;
	try {
		jsonPath_tExtractJSONFields_2 = "idsensore";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				json2022_.idsensore = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",e_tExtractJSONFields_2.getMessage());
			json2022_.idsensore = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "data";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				json2022_.data = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",e_tExtractJSONFields_2.getMessage());
			json2022_.data = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "valore";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				json2022_.valore = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",e_tExtractJSONFields_2.getMessage());
			json2022_.valore = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "stato";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				json2022_.stato = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",e_tExtractJSONFields_2.getMessage());
			json2022_.stato = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "idoperatore";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				json2022_.idoperatore = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",e_tExtractJSONFields_2.getMessage());
			json2022_.idoperatore = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_2) {
globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",ex_tExtractJSONFields_2.getMessage());
    	throw(ex_tExtractJSONFields_2);	
	}
	
	}
    
	isStructError_tExtractJSONFields_2 = false;
	
//}


 


	tos_count_tExtractJSONFields_2++;

/**
 * [tExtractJSONFields_2 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	

 



/**
 * [tExtractJSONFields_2 process_data_begin ] stop
 */
// Start of branch "json2022_"
if(json2022_ != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"json2022_"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;
Var.data = json2022_.data.equals("2022-03-27T02:00:00.000")?StringHandling.CHANGE(json2022_.data,"02:00:00.000","01:59:00.000"):json2022_.data ;// ###############################
        // ###############################
        // # Output tables

changeOraLegale_ = null;


// # Output table : 'changeOraLegale_'
changeOraLegale__tmp.idsensore = json2022_.idsensore;
changeOraLegale__tmp.data = Var.data ;
changeOraLegale__tmp.valore = json2022_.valore;
changeOraLegale__tmp.stato = json2022_.stato;
changeOraLegale__tmp.idoperatore = json2022_.idoperatore;
changeOraLegale_ = changeOraLegale__tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "changeOraLegale_"
if(changeOraLegale_ != null) { 



	
	/**
	 * [tConvertType_2 main ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"changeOraLegale_"
						
						);
					}
					


  api2022_ = new api2022_Struct();
  boolean bHasError_tConvertType_2 = false;       
      try {
          api2022_.idsensore = TypeConvert.String2Long(changeOraLegale_.idsensore);
      } catch (java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
        bHasError_tConvertType_2 = true;        
          throw e;
      }     
      try {
          api2022_.dataora = TypeConvert.String2Date(changeOraLegale_.data, "yyyy-MM-dd'T'HH:mm:ss.SSS");
      } catch (java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
        bHasError_tConvertType_2 = true;        
          throw e;
      }     
      try {
          api2022_.valore = TypeConvert.String2Float(changeOraLegale_.valore);
      } catch (java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
        bHasError_tConvertType_2 = true;        
          throw e;
      }     
      try {
          api2022_.stato = TypeConvert.String2String(changeOraLegale_.stato);
      } catch (java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
        bHasError_tConvertType_2 = true;        
          throw e;
      }     
      try {
          api2022_.idoperatore = TypeConvert.String2Integer(changeOraLegale_.idoperatore);
      } catch (java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
        bHasError_tConvertType_2 = true;        
          throw e;
      }
      if (bHasError_tConvertType_2) { api2022_ = null;}

  nb_line_tConvertType_2 ++ ;

 


	tos_count_tConvertType_2++;

/**
 * [tConvertType_2 main ] stop
 */
	
	/**
	 * [tConvertType_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	

 



/**
 * [tConvertType_2 process_data_begin ] stop
 */
// Start of branch "api2022_"
if(api2022_ != null) { 



	
	/**
	 * [tAdvancedHash_api2022_ main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_api2022_";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"api2022_"
						
						);
					}
					


			   
			   

					api2022_Struct api2022__HashRow = new api2022_Struct();
		   	   	   
				
				api2022__HashRow.idsensore = api2022_.idsensore;
				
				api2022__HashRow.dataora = api2022_.dataora;
				
				api2022__HashRow.valore = api2022_.valore;
				
				api2022__HashRow.stato = api2022_.stato;
				
				api2022__HashRow.idoperatore = api2022_.idoperatore;
				
			tHash_Lookup_api2022_.put(api2022__HashRow);
			
            




 


	tos_count_tAdvancedHash_api2022_++;

/**
 * [tAdvancedHash_api2022_ main ] stop
 */
	
	/**
	 * [tAdvancedHash_api2022_ process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_api2022_";

	

 



/**
 * [tAdvancedHash_api2022_ process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_api2022_ process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_api2022_";

	

 



/**
 * [tAdvancedHash_api2022_ process_data_end ] stop
 */

} // End of branch "api2022_"




	
	/**
	 * [tConvertType_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	

 



/**
 * [tConvertType_2 process_data_end ] stop
 */

} // End of branch "changeOraLegale_"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "json2022_"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	

 



/**
 * [tExtractJSONFields_2 process_data_end ] stop
 */



	
	/**
	 * [tHttpRequest_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_4";

	

 



/**
 * [tHttpRequest_4 process_data_end ] stop
 */
	
	/**
	 * [tHttpRequest_4 end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_4";

	

 

ok_Hash.put("tHttpRequest_4", true);
end_Hash.put("tHttpRequest_4", System.currentTimeMillis());




/**
 * [tHttpRequest_4 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_2 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	
   globalMap.put("tExtractJSONFields_2_NB_LINE", nb_line_tExtractJSONFields_2);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"apiData_");
			  	}
			  	
 

ok_Hash.put("tExtractJSONFields_2", true);
end_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());




/**
 * [tExtractJSONFields_2 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"json2022_");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tConvertType_2 end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	
      globalMap.put("tConvertType_2_NB_LINE", nb_line_tConvertType_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"changeOraLegale_");
			  	}
			  	
 

ok_Hash.put("tConvertType_2", true);
end_Hash.put("tConvertType_2", System.currentTimeMillis());




/**
 * [tConvertType_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_api2022_ end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_api2022_";

	

tHash_Lookup_api2022_.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"api2022_");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_api2022_", true);
end_Hash.put("tAdvancedHash_api2022_", System.currentTimeMillis());




/**
 * [tAdvancedHash_api2022_ end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHttpRequest_4 finally ] start
	 */

	

	
	
	currentComponent="tHttpRequest_4";

	

 



/**
 * [tHttpRequest_4 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_2 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	

 



/**
 * [tExtractJSONFields_2 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tConvertType_2 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	

 



/**
 * [tConvertType_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_api2022_ finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_api2022_";

	

 



/**
 * [tAdvancedHash_api2022_ finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHttpRequest_4_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_2", false);
		start_Hash.put("tPostjob_2", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_2";

	
		int tos_count_tPostjob_2 = 0;
		

 



/**
 * [tPostjob_2 begin ] stop
 */
	
	/**
	 * [tPostjob_2 main ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 


	tos_count_tPostjob_2++;

/**
 * [tPostjob_2 main ] stop
 */
	
	/**
	 * [tPostjob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 



/**
 * [tPostjob_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 



/**
 * [tPostjob_2 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_2 end ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 

ok_Hash.put("tPostjob_2", true);
end_Hash.put("tPostjob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostjob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_2 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 



/**
 * [tPostjob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


String foo = "bar";
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class updatePresentStruct implements routines.system.IPersistableRow<updatePresentStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public Integer duration_in_seconds;

				public Integer getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(updatePresentStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class updateLogTableStruct implements routines.system.IPersistableRow<updateLogTableStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public Integer duration_in_seconds;

				public Integer getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(updateLogTableStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		updateLogTableStruct updateLogTable = new updateLogTableStruct();
updatePresentStruct updatePresent = new updatePresentStruct();





	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"updatePresent");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("logs");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("logs");
}


int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_5 = 10000;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5.getMetaData();
                                boolean whetherExist_tDBOutput_5 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_5 = "public";
                                    if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_5 = conn_tDBOutput_5.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_5 = stmtSchema_tDBOutput_5.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_5.next()){
                                                defaultSchema_tDBOutput_5 = rsSchema_tDBOutput_5.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_5.next()) {
                                        String table_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_NAME");
                                        String schema_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_5.equals(("logs"))
                                            && (schema_tDBOutput_5.equals(dbschema_tDBOutput_5) || ((dbschema_tDBOutput_5 ==null || dbschema_tDBOutput_5.trim().length() ==0) && defaultSchema_tDBOutput_5.equals(schema_tDBOutput_5)))) {
                                            whetherExist_tDBOutput_5 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_5) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                                        stmtCreate_tDBOutput_5.execute("CREATE TABLE \"" + tableName_tDBOutput_5 + "\"(\"current_date\" TIMESTAMP ,\"table_name\" VARCHAR ,\"operation\" VARCHAR ,\"number_of_rows\" INT8 ,\"duration_in_seconds\" INT8 )");
                                    }
                                }
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"current_date\",\"table_name\",\"operation\",\"number_of_rows\",\"duration_in_seconds\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"updateLogTable");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
	boolean update_check;
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
updatePresentStruct updatePresent_tmp = new updatePresentStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		updateLogTable.current_date = TalendDate.getCurrentDate();
    	            	        	            	
    	            		updateLogTable.table_name = "sens_data_2022";
    	            	        	            	
    	            		updateLogTable.operation = "Update";
    	            	        	            	
    	            		updateLogTable.number_of_rows = ((Integer)globalMap.get("tDBOutput_1_NB_LINE"));
    	            	        	            	
    	            		updateLogTable.duration_in_seconds = Math.toIntExact(TalendDate.getCurrentDate().getTime() - startTime)/1000;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"updateLogTable"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;
Var.update_check = ((Integer)globalMap.get("tDBOutput_1_NB_LINE"))> 0 ;// ###############################
        // ###############################
        // # Output tables

updatePresent = null;


// # Output table : 'updatePresent'
// # Filter conditions 
if( 

Var.update_check == true

 ) {
updatePresent_tmp.current_date = updateLogTable.current_date ;
updatePresent_tmp.table_name = updateLogTable.table_name ;
updatePresent_tmp.operation = updateLogTable.operation ;
updatePresent_tmp.number_of_rows = updateLogTable.number_of_rows ;
updatePresent_tmp.duration_in_seconds = updateLogTable.duration_in_seconds ;
updatePresent = updatePresent_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "updatePresent"
if(updatePresent != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"updatePresent"
						
						);
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(updatePresent.current_date != null) {
pstmt_tDBOutput_5.setTimestamp(1, new java.sql.Timestamp(updatePresent.current_date.getTime()));
} else {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(updatePresent.table_name == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(2, updatePresent.table_name);
}

                    if(updatePresent.operation == null) {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(3, updatePresent.operation);
}

                    if(updatePresent.number_of_rows == null) {
pstmt_tDBOutput_5.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(4, updatePresent.number_of_rows);
}

                    if(updatePresent.duration_in_seconds == null) {
pstmt_tDBOutput_5.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(5, updatePresent.duration_in_seconds);
}

			
    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    		if (ne_tDBOutput_5 != null) {
				    			throw(sqle_tDBOutput_5);
				    		}else{
				            	throw(e_tDBOutput_5);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "updatePresent"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"updateLogTable");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				}
		    	
		    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    		if (ne_tDBOutput_5 != null) {
	    			throw(sqle_tDBOutput_5);
	    		}else{
	            	throw(e_tDBOutput_5);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"updatePresent");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class insertPresentStruct implements routines.system.IPersistableRow<insertPresentStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public Integer duration_in_seconds;

				public Integer getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertPresentStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insertLogTableStruct implements routines.system.IPersistableRow<insertLogTableStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public Integer duration_in_seconds;

				public Integer getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertLogTableStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		insertLogTableStruct insertLogTable = new insertLogTableStruct();
insertPresentStruct insertPresent = new insertPresentStruct();





	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insertPresent");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("logs");
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("logs");
}


int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rowsToCommitCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	conn_tDBOutput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_6 = 10000;
   int batchSizeCounter_tDBOutput_6=0;

int count_tDBOutput_6=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_6 = conn_tDBOutput_6.getMetaData();
                                boolean whetherExist_tDBOutput_6 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_6 = dbMetaData_tDBOutput_6.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_6 = "public";
                                    if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_6 = conn_tDBOutput_6.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_6 = stmtSchema_tDBOutput_6.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_6.next()){
                                                defaultSchema_tDBOutput_6 = rsSchema_tDBOutput_6.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_6.next()) {
                                        String table_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_NAME");
                                        String schema_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_6.equals(("logs"))
                                            && (schema_tDBOutput_6.equals(dbschema_tDBOutput_6) || ((dbschema_tDBOutput_6 ==null || dbschema_tDBOutput_6.trim().length() ==0) && defaultSchema_tDBOutput_6.equals(schema_tDBOutput_6)))) {
                                            whetherExist_tDBOutput_6 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_6) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                                        stmtCreate_tDBOutput_6.execute("CREATE TABLE \"" + tableName_tDBOutput_6 + "\"(\"current_date\" TIMESTAMP ,\"table_name\" VARCHAR ,\"operation\" VARCHAR ,\"number_of_rows\" INT8 ,\"duration_in_seconds\" INT8 )");
                                    }
                                }
	    String insert_tDBOutput_6 = "INSERT INTO \"" + tableName_tDBOutput_6 + "\" (\"current_date\",\"table_name\",\"operation\",\"number_of_rows\",\"duration_in_seconds\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insertLogTable");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
	boolean insert_check;
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
insertPresentStruct insertPresent_tmp = new insertPresentStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";

	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		insertLogTable.current_date = TalendDate.getCurrentDate();
    	            	        	            	
    	            		insertLogTable.table_name = "sens_data_2022";
    	            	        	            	
    	            		insertLogTable.operation = "Insert";
    	            	        	            	
    	            		insertLogTable.number_of_rows = ((Integer)globalMap.get("tDBOutput_3_NB_LINE"));
    	            	        	            	
    	            		insertLogTable.duration_in_seconds = Math.toIntExact(TalendDate.getCurrentDate().getTime() - startTime)/1000;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insertLogTable"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;
Var.insert_check = ((Integer)globalMap.get("tDBOutput_3_NB_LINE"))> 0 ;// ###############################
        // ###############################
        // # Output tables

insertPresent = null;


// # Output table : 'insertPresent'
// # Filter conditions 
if( 

Var.insert_check == true

 ) {
insertPresent_tmp.current_date = insertLogTable.current_date;
insertPresent_tmp.table_name = insertLogTable.table_name;
insertPresent_tmp.operation = insertLogTable.operation;
insertPresent_tmp.number_of_rows = insertLogTable.number_of_rows;
insertPresent_tmp.duration_in_seconds = insertLogTable.duration_in_seconds;
insertPresent = insertPresent_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "insertPresent"
if(insertPresent != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insertPresent"
						
						);
					}
					



        whetherReject_tDBOutput_6 = false;
                    if(insertPresent.current_date != null) {
pstmt_tDBOutput_6.setTimestamp(1, new java.sql.Timestamp(insertPresent.current_date.getTime()));
} else {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(insertPresent.table_name == null) {
pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(2, insertPresent.table_name);
}

                    if(insertPresent.operation == null) {
pstmt_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(3, insertPresent.operation);
}

                    if(insertPresent.number_of_rows == null) {
pstmt_tDBOutput_6.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_6.setInt(4, insertPresent.number_of_rows);
}

                    if(insertPresent.duration_in_seconds == null) {
pstmt_tDBOutput_6.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_6.setInt(5, insertPresent.duration_in_seconds);
}

			
    		pstmt_tDBOutput_6.addBatch();
    		nb_line_tDBOutput_6++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_6++;
    		  
    			if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
						int countSum_tDBOutput_6 = 0;
						    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
				    	rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            	    	batchSizeCounter_tDBOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
				    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
				    	String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						}else{
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}
				    	
				    		if (ne_tDBOutput_6 != null) {
				    			throw(sqle_tDBOutput_6);
				    		}else{
				            	throw(e_tDBOutput_6);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "insertPresent"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insertLogTable");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



	    try {
				int countSum_tDBOutput_6 = 0;
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						
					for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
						
				}
		    	
		    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
	    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
	    	String errormessage_tDBOutput_6;
			if (ne_tDBOutput_6 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
				errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
			}else{
				errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
			}
	    	
	    		if (ne_tDBOutput_6 != null) {
	    			throw(sqle_tDBOutput_6);
	    		}else{
	            	throw(e_tDBOutput_6);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insertPresent");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class deletePresentStruct implements routines.system.IPersistableRow<deletePresentStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public Integer duration_in_seconds;

				public Integer getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(deletePresentStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class deleteLogTableStruct implements routines.system.IPersistableRow<deleteLogTableStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestion2022 = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public Integer duration_in_seconds;

				public Integer getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestion2022.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestion2022.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestion2022 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestion2022, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestion2022) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(deleteLogTableStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		deleteLogTableStruct deleteLogTable = new deleteLogTableStruct();
deletePresentStruct deletePresent = new deletePresentStruct();





	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"deletePresent");
					}
				
		int tos_count_tDBOutput_7 = 0;
		





String dbschema_tDBOutput_7 = null;
	dbschema_tDBOutput_7 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_7 = null;
if(dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
	tableName_tDBOutput_7 = ("logs");
} else {
	tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\"" + ("logs");
}


int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;
int rowsToCommitCount_tDBOutput_7=0;
int rejectedCount_tDBOutput_7=0;

boolean whetherReject_tDBOutput_7 = false;

java.sql.Connection conn_tDBOutput_7 = null;
String dbUser_tDBOutput_7 = null;

	conn_tDBOutput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_7 = 10000;
   int batchSizeCounter_tDBOutput_7=0;

int count_tDBOutput_7=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_7 = conn_tDBOutput_7.getMetaData();
                                boolean whetherExist_tDBOutput_7 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_7 = dbMetaData_tDBOutput_7.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_7 = "public";
                                    if(dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_7 = conn_tDBOutput_7.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_7 = stmtSchema_tDBOutput_7.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_7.next()){
                                                defaultSchema_tDBOutput_7 = rsSchema_tDBOutput_7.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_7.next()) {
                                        String table_tDBOutput_7 = rsTable_tDBOutput_7.getString("TABLE_NAME");
                                        String schema_tDBOutput_7 = rsTable_tDBOutput_7.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_7.equals(("logs"))
                                            && (schema_tDBOutput_7.equals(dbschema_tDBOutput_7) || ((dbschema_tDBOutput_7 ==null || dbschema_tDBOutput_7.trim().length() ==0) && defaultSchema_tDBOutput_7.equals(schema_tDBOutput_7)))) {
                                            whetherExist_tDBOutput_7 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_7) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                                        stmtCreate_tDBOutput_7.execute("CREATE TABLE \"" + tableName_tDBOutput_7 + "\"(\"current_date\" TIMESTAMP ,\"table_name\" VARCHAR ,\"operation\" VARCHAR ,\"number_of_rows\" INT8 ,\"duration_in_seconds\" INT8 )");
                                    }
                                }
	    String insert_tDBOutput_7 = "INSERT INTO \"" + tableName_tDBOutput_7 + "\" (\"current_date\",\"table_name\",\"operation\",\"number_of_rows\",\"duration_in_seconds\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
	    resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
	    

 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"deleteLogTable");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
	boolean check_delete;
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
deletePresentStruct deletePresent_tmp = new deletePresentStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";

	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		deleteLogTable.current_date = TalendDate.getCurrentDate();
    	            	        	            	
    	            		deleteLogTable.table_name = "sens_data_2022";
    	            	        	            	
    	            		deleteLogTable.operation = "Delete";
    	            	        	            	
    	            		deleteLogTable.number_of_rows = ((Integer)globalMap.get("tDBOutput_4_NB_LINE"));
    	            	        	            	
    	            		deleteLogTable.duration_in_seconds = Math.toIntExact(TalendDate.getCurrentDate().getTime() - startTime)/1000;
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"deleteLogTable"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;
Var.check_delete = ((Integer)globalMap.get("tDBOutput_4_NB_LINE"))> 0 ;// ###############################
        // ###############################
        // # Output tables

deletePresent = null;


// # Output table : 'deletePresent'
// # Filter conditions 
if( 

Var.check_delete == true

 ) {
deletePresent_tmp.current_date = deleteLogTable.current_date;
deletePresent_tmp.table_name = deleteLogTable.table_name;
deletePresent_tmp.operation = deleteLogTable.operation;
deletePresent_tmp.number_of_rows = deleteLogTable.number_of_rows;
deletePresent_tmp.duration_in_seconds = deleteLogTable.duration_in_seconds;
deletePresent = deletePresent_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "deletePresent"
if(deletePresent != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"deletePresent"
						
						);
					}
					



        whetherReject_tDBOutput_7 = false;
                    if(deletePresent.current_date != null) {
pstmt_tDBOutput_7.setTimestamp(1, new java.sql.Timestamp(deletePresent.current_date.getTime()));
} else {
pstmt_tDBOutput_7.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(deletePresent.table_name == null) {
pstmt_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(2, deletePresent.table_name);
}

                    if(deletePresent.operation == null) {
pstmt_tDBOutput_7.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(3, deletePresent.operation);
}

                    if(deletePresent.number_of_rows == null) {
pstmt_tDBOutput_7.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(4, deletePresent.number_of_rows);
}

                    if(deletePresent.duration_in_seconds == null) {
pstmt_tDBOutput_7.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(5, deletePresent.duration_in_seconds);
}

			
    		pstmt_tDBOutput_7.addBatch();
    		nb_line_tDBOutput_7++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_7++;
    		  
            if(!whetherReject_tDBOutput_7) {
            }
    			if ((batchSize_tDBOutput_7 > 0) && (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
                try {
						int countSum_tDBOutput_7 = 0;
						    
						for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}
				    	rowsToCommitCount_tDBOutput_7 += countSum_tDBOutput_7;
				    	
				    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
				    	
            	    	batchSizeCounter_tDBOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_7){
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e_tDBOutput_7.getMessage());
				    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
				    	String errormessage_tDBOutput_7;
						if (ne_tDBOutput_7 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
							errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
						}else{
							errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
						}
				    	
				    		if (ne_tDBOutput_7 != null) {
				    			throw(sqle_tDBOutput_7);
				    		}else{
				            	throw(e_tDBOutput_7);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "deletePresent"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"deleteLogTable");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



	    try {
				int countSum_tDBOutput_7 = 0;
				if (pstmt_tDBOutput_7 != null && batchSizeCounter_tDBOutput_7 > 0) {
						
					for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
					rowsToCommitCount_tDBOutput_7 += countSum_tDBOutput_7;
						
				}
		    	
		    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_7){
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e_tDBOutput_7.getMessage());
	    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
	    	String errormessage_tDBOutput_7;
			if (ne_tDBOutput_7 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
				errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
			}else{
				errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
			}
	    	
	    		if (ne_tDBOutput_7 != null) {
	    			throw(sqle_tDBOutput_7);
	    		}else{
	            	throw(e_tDBOutput_7);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_7 != null) {
        		
            pstmt_tDBOutput_7.close();
            resourceMap.remove("pstmt_tDBOutput_7");
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"deletePresent");
			  	}
			  	
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tDBCommit_2Process(globalMap);



/**
 * [tDBOutput_7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_2", false);
		start_Hash.put("tDBCommit_2", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_2";

	
		int tos_count_tDBCommit_2 = 0;
		

 



/**
 * [tDBCommit_2 begin ] stop
 */
	
	/**
	 * [tDBCommit_2 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

	java.sql.Connection conn_tDBCommit_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_2 != null && !conn_tDBCommit_2.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_2.commit();
			
	
		}finally{
			
			conn_tDBCommit_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    }
	
	}

 


	tos_count_tDBCommit_2++;

/**
 * [tDBCommit_2 main ] stop
 */
	
	/**
	 * [tDBCommit_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_2 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 

ok_Hash.put("tDBCommit_2", true);
end_Hash.put("tDBCommit_2", System.currentTimeMillis());




/**
 * [tDBCommit_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_2 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final deltaIngestion2022 deltaIngestion2022Class = new deltaIngestion2022();

        int exitCode = deltaIngestion2022Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = deltaIngestion2022.class.getClassLoader().getResourceAsStream("arpa_data/deltaingestion2022_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = deltaIngestion2022.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("postgres_woneli_Password", "id_Password");
                        if(context.getStringValue("postgres_woneli_Password") == null) {
                            context.postgres_woneli_Password = null;
                        } else {
                            String pwd_postgres_woneli_Password_value = context.getProperty("postgres_woneli_Password");
                            context.postgres_woneli_Password = null;
                            if(pwd_postgres_woneli_Password_value!=null) {
                                if(context_param.containsKey("postgres_woneli_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.postgres_woneli_Password = pwd_postgres_woneli_Password_value;
                                } else if (!pwd_postgres_woneli_Password_value.isEmpty()) {
                                    try {
                                        context.postgres_woneli_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_postgres_woneli_Password_value);
                                        context.put("postgres_woneli_Password",context.postgres_woneli_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("postgres_woneli_Database", "id_String");
                        if(context.getStringValue("postgres_woneli_Database") == null) {
                            context.postgres_woneli_Database = null;
                        } else {
                            context.postgres_woneli_Database=(String) context.getProperty("postgres_woneli_Database");
                        }
                        context.setContextType("postgres_woneli_Login", "id_String");
                        if(context.getStringValue("postgres_woneli_Login") == null) {
                            context.postgres_woneli_Login = null;
                        } else {
                            context.postgres_woneli_Login=(String) context.getProperty("postgres_woneli_Login");
                        }
                        context.setContextType("postgres_woneli_Server", "id_String");
                        if(context.getStringValue("postgres_woneli_Server") == null) {
                            context.postgres_woneli_Server = null;
                        } else {
                            context.postgres_woneli_Server=(String) context.getProperty("postgres_woneli_Server");
                        }
                        context.setContextType("postgres_woneli_Port", "id_String");
                        if(context.getStringValue("postgres_woneli_Port") == null) {
                            context.postgres_woneli_Port = null;
                        } else {
                            context.postgres_woneli_Port=(String) context.getProperty("postgres_woneli_Port");
                        }
                        context.setContextType("postgres_woneli_Schema", "id_String");
                        if(context.getStringValue("postgres_woneli_Schema") == null) {
                            context.postgres_woneli_Schema = null;
                        } else {
                            context.postgres_woneli_Schema=(String) context.getProperty("postgres_woneli_Schema");
                        }
                        context.setContextType("postgres_woneli_AdditionalParams", "id_String");
                        if(context.getStringValue("postgres_woneli_AdditionalParams") == null) {
                            context.postgres_woneli_AdditionalParams = null;
                        } else {
                            context.postgres_woneli_AdditionalParams=(String) context.getProperty("postgres_woneli_AdditionalParams");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("postgres_woneli_Password")) {
                context.postgres_woneli_Password = (java.lang.String) parentContextMap.get("postgres_woneli_Password");
            }if (parentContextMap.containsKey("postgres_woneli_Database")) {
                context.postgres_woneli_Database = (String) parentContextMap.get("postgres_woneli_Database");
            }if (parentContextMap.containsKey("postgres_woneli_Login")) {
                context.postgres_woneli_Login = (String) parentContextMap.get("postgres_woneli_Login");
            }if (parentContextMap.containsKey("postgres_woneli_Server")) {
                context.postgres_woneli_Server = (String) parentContextMap.get("postgres_woneli_Server");
            }if (parentContextMap.containsKey("postgres_woneli_Port")) {
                context.postgres_woneli_Port = (String) parentContextMap.get("postgres_woneli_Port");
            }if (parentContextMap.containsKey("postgres_woneli_Schema")) {
                context.postgres_woneli_Schema = (String) parentContextMap.get("postgres_woneli_Schema");
            }if (parentContextMap.containsKey("postgres_woneli_AdditionalParams")) {
                context.postgres_woneli_AdditionalParams = (String) parentContextMap.get("postgres_woneli_AdditionalParams");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("postgres_woneli_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tHttpRequest_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tHttpRequest_1) {
globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", -1);

e_tHttpRequest_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_2) {
globalMap.put("tPostjob_2_SUBPROCESS_STATE", -1);

e_tPostjob_2.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : deltaIngestion2022");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     523205 characters generated by Talend Open Studio for Data Integration 
 *     on the 9 July 2022 at 20:20:08 CEST
 ************************************************************************************************/
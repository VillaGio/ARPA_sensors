// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package arpa_data.deltaingestioncurrentyears_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: deltaIngestionCurrentYearS Purpose: <br>
 * Description: Performs delta ingestion of sensors data of current year retrieved from ARPA api.
Handles the issue of daylight saving time change.
Writes job logs in postgres db table. <br>
 * @author 
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class deltaIngestionCurrentYearS implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(sensors_path_input != null){
				
					this.setProperty("sensors_path_input", sensors_path_input.toString());
				
			}
			
			if(sensors_path_output != null){
				
					this.setProperty("sensors_path_output", sensors_path_output.toString());
				
			}
			
			if(weather_path_input != null){
				
					this.setProperty("weather_path_input", weather_path_input.toString());
				
			}
			
			if(weather_path_output != null){
				
					this.setProperty("weather_path_output", weather_path_output.toString());
				
			}
			
			if(postgresWoneli_AdditionalParams != null){
				
					this.setProperty("postgresWoneli_AdditionalParams", postgresWoneli_AdditionalParams.toString());
				
			}
			
			if(postgresWoneli_Database != null){
				
					this.setProperty("postgresWoneli_Database", postgresWoneli_Database.toString());
				
			}
			
			if(postgresWoneli_Login != null){
				
					this.setProperty("postgresWoneli_Login", postgresWoneli_Login.toString());
				
			}
			
			if(postgresWoneli_Password != null){
				
					this.setProperty("postgresWoneli_Password", postgresWoneli_Password.toString());
				
			}
			
			if(postgresWoneli_Port != null){
				
					this.setProperty("postgresWoneli_Port", postgresWoneli_Port.toString());
				
			}
			
			if(postgresWoneli_Schema != null){
				
					this.setProperty("postgresWoneli_Schema", postgresWoneli_Schema.toString());
				
			}
			
			if(postgresWoneli_Server != null){
				
					this.setProperty("postgresWoneli_Server", postgresWoneli_Server.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String sensors_path_input;
		public String getSensors_path_input(){
			return this.sensors_path_input;
		}
		
		public String sensors_path_output;
		public String getSensors_path_output(){
			return this.sensors_path_output;
		}
		
		public String weather_path_input;
		public String getWeather_path_input(){
			return this.weather_path_input;
		}
		
		public String weather_path_output;
		public String getWeather_path_output(){
			return this.weather_path_output;
		}
		
public String postgresWoneli_AdditionalParams;
public String getPostgresWoneli_AdditionalParams(){
	return this.postgresWoneli_AdditionalParams;
}
public String postgresWoneli_Database;
public String getPostgresWoneli_Database(){
	return this.postgresWoneli_Database;
}
public String postgresWoneli_Login;
public String getPostgresWoneli_Login(){
	return this.postgresWoneli_Login;
}
public java.lang.String postgresWoneli_Password;
public java.lang.String getPostgresWoneli_Password(){
	return this.postgresWoneli_Password;
}
public String postgresWoneli_Port;
public String getPostgresWoneli_Port(){
	return this.postgresWoneli_Port;
}
public String postgresWoneli_Schema;
public String getPostgresWoneli_Schema(){
	return this.postgresWoneli_Schema;
}
public String postgresWoneli_Server;
public String getPostgresWoneli_Server(){
	return this.postgresWoneli_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "deltaIngestionCurrentYearS";
	private final String projectName = "ARPA_DATA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_TRJd0NaAEeyRS5WqTTf1CA", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				deltaIngestionCurrentYearS.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(deltaIngestionCurrentYearS.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTemporaryFile_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTemporaryFile_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHttpRequest_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeter_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeter_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeter_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_datatemp_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_db_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTemporaryFile_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHttpRequest_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = context.postgresWoneli_AdditionalParams;
            String url_tDBConnection_1 = "jdbc:postgresql://"+context.postgresWoneli_Server+":"+context.postgresWoneli_Port+"/"+context.postgresWoneli_Database;
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = context.postgresWoneli_Login;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.postgresWoneli_Password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tDBConnection_1",context.postgresWoneli_Schema);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("year", TalendDate.getDate("yyyy"));

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_2", false);
		start_Hash.put("tPostjob_2", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_2";

	
		int tos_count_tPostjob_2 = 0;
		

 



/**
 * [tPostjob_2 begin ] stop
 */
	
	/**
	 * [tPostjob_2 main ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 


	tos_count_tPostjob_2++;

/**
 * [tPostjob_2 main ] stop
 */
	
	/**
	 * [tPostjob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 



/**
 * [tPostjob_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 



/**
 * [tPostjob_2 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_2 end ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 

ok_Hash.put("tPostjob_2", true);
end_Hash.put("tPostjob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBCommit_2Process(globalMap);



/**
 * [tPostjob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_2 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 



/**
 * [tPostjob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_2", false);
		start_Hash.put("tDBCommit_2", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_2";

	
		int tos_count_tDBCommit_2 = 0;
		

 



/**
 * [tDBCommit_2 begin ] stop
 */
	
	/**
	 * [tDBCommit_2 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

	java.sql.Connection conn_tDBCommit_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_2 != null && !conn_tDBCommit_2.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_2.commit();
			
	
		}finally{
			
			conn_tDBCommit_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    }
	
	}

 


	tos_count_tDBCommit_2++;

/**
 * [tDBCommit_2 main ] stop
 */
	
	/**
	 * [tDBCommit_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_2 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 

ok_Hash.put("tDBCommit_2", true);
end_Hash.put("tDBCommit_2", System.currentTimeMillis());




/**
 * [tDBCommit_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_2 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


int year =Integer.parseInt(((String)globalMap.get("year")));

int[] yearLoop = {29,28,27,26,25,31,30};

int numLeapYears = 0;

int diff = year-1981;

if(year%4 == 0){numLeapYears = diff/4+1;}
else{numLeapYears = diff/4;}

int totDiff = diff + numLeapYears;

int indexLoop = (totDiff - totDiff/7 * 7);

int day = yearLoop[indexLoop];

String res = (String)globalMap.get("year")+"-03-"+ Integer.toString(day)+"T02:00:00.000";

globalMap.put("change_time_date", res);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tCreateTemporaryFile_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTemporaryFile_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTemporaryFile_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTemporaryFile_1", false);
		start_Hash.put("tCreateTemporaryFile_1", System.currentTimeMillis());
		
	
	currentComponent="tCreateTemporaryFile_1";

	
		int tos_count_tCreateTemporaryFile_1 = 0;
		


	java.io.File dir_tCreateTemporaryFile_1 = new java.io.File(context.sensors_path_input );
dir_tCreateTemporaryFile_1.mkdirs();
java.io.File file_tCreateTemporaryFile_1;
String name_tCreateTemporaryFile_1 = "talend_"+ TalendDate.getDate("yyyy");
String suffix_tCreateTemporaryFile_1 = ("".equals("temp")) ? null : "." + "temp".replaceAll("\\.", "");
file_tCreateTemporaryFile_1 = java.io.File.createTempFile(name_tCreateTemporaryFile_1, suffix_tCreateTemporaryFile_1, dir_tCreateTemporaryFile_1);

if (true || file_tCreateTemporaryFile_1.createNewFile()){
    file_tCreateTemporaryFile_1.deleteOnExit();
}
globalMap.put("tCreateTemporaryFile_1_FILEPATH", file_tCreateTemporaryFile_1.getCanonicalPath());


 



/**
 * [tCreateTemporaryFile_1 begin ] stop
 */
	
	/**
	 * [tCreateTemporaryFile_1 main ] start
	 */

	

	
	
	currentComponent="tCreateTemporaryFile_1";

	

 


	tos_count_tCreateTemporaryFile_1++;

/**
 * [tCreateTemporaryFile_1 main ] stop
 */
	
	/**
	 * [tCreateTemporaryFile_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tCreateTemporaryFile_1";

	

 



/**
 * [tCreateTemporaryFile_1 process_data_begin ] stop
 */
	
	/**
	 * [tCreateTemporaryFile_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tCreateTemporaryFile_1";

	

 



/**
 * [tCreateTemporaryFile_1 process_data_end ] stop
 */
	
	/**
	 * [tCreateTemporaryFile_1 end ] start
	 */

	

	
	
	currentComponent="tCreateTemporaryFile_1";

	

 

ok_Hash.put("tCreateTemporaryFile_1", true);
end_Hash.put("tCreateTemporaryFile_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tHttpRequest_2Process(globalMap);



/**
 * [tCreateTemporaryFile_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTemporaryFile_1 finally ] start
	 */

	

	
	
	currentComponent="tCreateTemporaryFile_1";

	

 



/**
 * [tCreateTemporaryFile_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 1);
	}
	


public static class changeOraLegaleStruct implements routines.system.IPersistableRow<changeOraLegaleStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];

	
			    public String idsensore;

				public String getIdsensore () {
					return this.idsensore;
				}
				
			    public String data;

				public String getData () {
					return this.data;
				}
				
			    public String valore;

				public String getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public String idoperatore;

				public String getIdoperatore () {
					return this.idoperatore;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.idsensore = readString(dis);
					
					this.data = readString(dis);
					
					this.valore = readString(dis);
					
					this.stato = readString(dis);
					
					this.idoperatore = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.idsensore = readString(dis);
					
					this.data = readString(dis);
					
					this.valore = readString(dis);
					
					this.stato = readString(dis);
					
					this.idoperatore = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idsensore,dos);
					
					// String
				
						writeString(this.data,dos);
					
					// String
				
						writeString(this.valore,dos);
					
					// String
				
						writeString(this.stato,dos);
					
					// String
				
						writeString(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.idsensore,dos);
					
					// String
				
						writeString(this.data,dos);
					
					// String
				
						writeString(this.valore,dos);
					
					// String
				
						writeString(this.stato,dos);
					
					// String
				
						writeString(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+idsensore);
		sb.append(",data="+data);
		sb.append(",valore="+valore);
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+idoperatore);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(changeOraLegaleStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class jsonStruct implements routines.system.IPersistableRow<jsonStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];

	
			    public String idsensore;

				public String getIdsensore () {
					return this.idsensore;
				}
				
			    public String data;

				public String getData () {
					return this.data;
				}
				
			    public String valore;

				public String getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public String idoperatore;

				public String getIdoperatore () {
					return this.idoperatore;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.idsensore = readString(dis);
					
					this.data = readString(dis);
					
					this.valore = readString(dis);
					
					this.stato = readString(dis);
					
					this.idoperatore = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.idsensore = readString(dis);
					
					this.data = readString(dis);
					
					this.valore = readString(dis);
					
					this.stato = readString(dis);
					
					this.idoperatore = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idsensore,dos);
					
					// String
				
						writeString(this.data,dos);
					
					// String
				
						writeString(this.valore,dos);
					
					// String
				
						writeString(this.stato,dos);
					
					// String
				
						writeString(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.idsensore,dos);
					
					// String
				
						writeString(this.data,dos);
					
					// String
				
						writeString(this.valore,dos);
					
					// String
				
						writeString(this.stato,dos);
					
					// String
				
						writeString(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+idsensore);
		sb.append(",data="+data);
		sb.append(",valore="+valore);
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+idoperatore);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(jsonStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dataApiStruct implements routines.system.IPersistableRow<dataApiStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];

	
			    public String ResponseContent;

				public String getResponseContent () {
					return this.ResponseContent;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.ResponseContent = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ResponseContent,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ResponseContent="+ResponseContent);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dataApiStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHttpRequest_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHttpRequest_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		dataApiStruct dataApi = new dataApiStruct();
jsonStruct json = new jsonStruct();
changeOraLegaleStruct changeOraLegale = new changeOraLegaleStruct();






	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"changeOraLegale");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(((String)globalMap.get("tCreateTemporaryFile_1_FILEPATH")))).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"json");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	String data;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
changeOraLegaleStruct changeOraLegale_tmp = new changeOraLegaleStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_3", false);
		start_Hash.put("tExtractJSONFields_3", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dataApi");
					}
				
		int tos_count_tExtractJSONFields_3 = 0;
		

int nb_line_tExtractJSONFields_3 = 0;
String jsonStr_tExtractJSONFields_3 = "";

	

class JsonPathCache_tExtractJSONFields_3 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_3 jsonPathCache_tExtractJSONFields_3 = new JsonPathCache_tExtractJSONFields_3();

 



/**
 * [tExtractJSONFields_3 begin ] stop
 */



	
	/**
	 * [tHttpRequest_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHttpRequest_2", false);
		start_Hash.put("tHttpRequest_2", System.currentTimeMillis());
		
	
	currentComponent="tHttpRequest_2";

	
		int tos_count_tHttpRequest_2 = 0;
		

 



/**
 * [tHttpRequest_2 begin ] stop
 */
	
	/**
	 * [tHttpRequest_2 main ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";

	


int connectTimeOut_tHttpRequest_2 = Integer.valueOf(30)*1000;
int readTimeOut_tHttpRequest_2 = Integer.valueOf(0)*1000;

java.net.URL url_tHttpRequest_2 = new java.net.URL("https://www.dati.lombardia.it/resource/nicp-bhqi.json?$limit=3000000");

java.net.HttpURLConnection urlConn_tHttpRequest_2 = null;

if ("local".equals(System.getProperty("http.proxySet"))) {
    java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance().getProxyForUriString("https://www.dati.lombardia.it/resource/nicp-bhqi.json?$limit=3000000");
    urlConn_tHttpRequest_2 = (java.net.HttpURLConnection) url_tHttpRequest_2.openConnection(proxyToUse); 
} else {
    urlConn_tHttpRequest_2 = (java.net.HttpURLConnection) url_tHttpRequest_2.openConnection();
}
urlConn_tHttpRequest_2.setRequestMethod("GET");
urlConn_tHttpRequest_2.setDoOutput(true);
urlConn_tHttpRequest_2.setDoInput(true);
urlConn_tHttpRequest_2.setUseCaches(false);

boolean connected_tHttpRequest_2 = false;
int responseCode_tHttpRequest_2 = 0;
globalMap.put("tHttpRequest_2_CONNECTED", false);
try{
    urlConn_tHttpRequest_2.connect();
    connected_tHttpRequest_2 = true;
    globalMap.put("tHttpRequest_2_CONNECTED", true);

    byte[] buffer_tHttpRequest_2 = new byte[1024];
    int bos_buffer_tHttpRequest_2 = 0;java.io.ByteArrayOutputStream bytestream_tHttpRequest_2 = new java.io.ByteArrayOutputStream(); 

    responseCode_tHttpRequest_2 = urlConn_tHttpRequest_2.getResponseCode();
    globalMap.put("tHttpRequest_2_RESPONSE_CODE", responseCode_tHttpRequest_2);

    if ( responseCode_tHttpRequest_2 >= 200 && responseCode_tHttpRequest_2 < 300) { //Status code 2XX indicates success
        java.io.InputStream bis_tHttpRequest_2 = new java.io.BufferedInputStream(urlConn_tHttpRequest_2.getInputStream());
        while ((bos_buffer_tHttpRequest_2 = bis_tHttpRequest_2.read(buffer_tHttpRequest_2)) != -1) {bytestream_tHttpRequest_2.write(buffer_tHttpRequest_2,0,bos_buffer_tHttpRequest_2);
        }
        bis_tHttpRequest_2.close();
    } else {
    	String responseMessage_tHttpRequest_2 = urlConn_tHttpRequest_2.getResponseMessage();
    
        //get details response information which will be used when error appear
        java.io.InputStream err_stream_tHttpRequest_2 = urlConn_tHttpRequest_2.getErrorStream();
        if(err_stream_tHttpRequest_2!=null) {
            java.io.InputStream es_tHttpRequest_2 = new java.io.BufferedInputStream(err_stream_tHttpRequest_2);
        	java.io.ByteArrayOutputStream baos_tHttpRequest_2 = new java.io.ByteArrayOutputStream();
        	
        	byte[] buf_tHttpRequest_2 = new byte[1024];
            int read_tHttpRequest_2 = -1;
        	try {
            	while ((read_tHttpRequest_2 = es_tHttpRequest_2.read(buf_tHttpRequest_2)) > 0) {
            		baos_tHttpRequest_2.write(buf_tHttpRequest_2, 0, read_tHttpRequest_2);
            	}
        	} finally {
        		es_tHttpRequest_2.close();
        	}
        
        	responseMessage_tHttpRequest_2 += ("\n" + new String(baos_tHttpRequest_2.toByteArray()));
        }
    	
            throw new RuntimeException("Request failed:" + responseCode_tHttpRequest_2 + " " + responseMessage_tHttpRequest_2);
    }

                    dataApi.ResponseContent = new String(bytestream_tHttpRequest_2.toByteArray());
    urlConn_tHttpRequest_2.disconnect();
}catch(Exception e){
globalMap.put("tHttpRequest_2_ERROR_MESSAGE",e.getMessage());
        throw e;
}

 


	tos_count_tHttpRequest_2++;

/**
 * [tHttpRequest_2 main ] stop
 */
	
	/**
	 * [tHttpRequest_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";

	

 



/**
 * [tHttpRequest_2 process_data_begin ] stop
 */

	
	/**
	 * [tExtractJSONFields_3 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"dataApi"
						
						);
					}
					

            if(dataApi.ResponseContent!=null){// C_01
                jsonStr_tExtractJSONFields_3 = dataApi.ResponseContent.toString();
   
json = null;

	

String loopPath_tExtractJSONFields_3 = "$.*";
java.util.List<Object> resultset_tExtractJSONFields_3 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_3 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_3 = null;
try {
	document_tExtractJSONFields_3 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_3);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3.getCompiledJsonPath(loopPath_tExtractJSONFields_3);
	Object result_tExtractJSONFields_3 = document_tExtractJSONFields_3.read(compiledLoopPath_tExtractJSONFields_3,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_3 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_3 = (net.minidev.json.JSONArray) result_tExtractJSONFields_3;
	} else {
		resultset_tExtractJSONFields_3.add(result_tExtractJSONFields_3);
	}
	
	isStructError_tExtractJSONFields_3 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_3) {
globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",ex_tExtractJSONFields_3.getMessage());
	throw(ex_tExtractJSONFields_3);
}

String jsonPath_tExtractJSONFields_3 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_3 = null;

Object value_tExtractJSONFields_3 = null;

Object root_tExtractJSONFields_3 = null;
for(int i_tExtractJSONFields_3=0; isStructError_tExtractJSONFields_3 || (i_tExtractJSONFields_3 < resultset_tExtractJSONFields_3.size());i_tExtractJSONFields_3++){
	if(!isStructError_tExtractJSONFields_3){
		Object row_tExtractJSONFields_3 = resultset_tExtractJSONFields_3.get(i_tExtractJSONFields_3);
            json = null;
	json = new jsonStruct();
	nb_line_tExtractJSONFields_3++;
	try {
		jsonPath_tExtractJSONFields_3 = "idsensore";
		compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);
		
		try {
		    
		        value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3.read(row_tExtractJSONFields_3);
		    
				json.idsensore = value_tExtractJSONFields_3 == null ? 

		null

 : value_tExtractJSONFields_3.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",e_tExtractJSONFields_3.getMessage());
			json.idsensore = 

		null

;
		}
		jsonPath_tExtractJSONFields_3 = "data";
		compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);
		
		try {
		    
		        value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3.read(row_tExtractJSONFields_3);
		    
				json.data = value_tExtractJSONFields_3 == null ? 

		null

 : value_tExtractJSONFields_3.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",e_tExtractJSONFields_3.getMessage());
			json.data = 

		null

;
		}
		jsonPath_tExtractJSONFields_3 = "valore";
		compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);
		
		try {
		    
		        value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3.read(row_tExtractJSONFields_3);
		    
				json.valore = value_tExtractJSONFields_3 == null ? 

		null

 : value_tExtractJSONFields_3.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",e_tExtractJSONFields_3.getMessage());
			json.valore = 

		null

;
		}
		jsonPath_tExtractJSONFields_3 = "stato";
		compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);
		
		try {
		    
		        value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3.read(row_tExtractJSONFields_3);
		    
				json.stato = value_tExtractJSONFields_3 == null ? 

		null

 : value_tExtractJSONFields_3.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",e_tExtractJSONFields_3.getMessage());
			json.stato = 

		null

;
		}
		jsonPath_tExtractJSONFields_3 = "idoperatore";
		compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);
		
		try {
		    
		        value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3.read(row_tExtractJSONFields_3);
		    
				json.idoperatore = value_tExtractJSONFields_3 == null ? 

		null

 : value_tExtractJSONFields_3.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",e_tExtractJSONFields_3.getMessage());
			json.idoperatore = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_3) {
globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",ex_tExtractJSONFields_3.getMessage());
    	throw(ex_tExtractJSONFields_3);	
	}
	
	}
    
	isStructError_tExtractJSONFields_3 = false;
	
//}


 


	tos_count_tExtractJSONFields_3++;

/**
 * [tExtractJSONFields_3 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_3";

	

 



/**
 * [tExtractJSONFields_3 process_data_begin ] stop
 */
// Start of branch "json"
if(json != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"json"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.data = json.data.equals(((String)globalMap.get("change_time_date")))?
StringHandling.CHANGE(json.data,"T02:00:00.000"," 01:59:00.000"):StringHandling.CHANGE(json.data,"T"," ") ;// ###############################
        // ###############################
        // # Output tables

changeOraLegale = null;


// # Output table : 'changeOraLegale'
changeOraLegale_tmp.idsensore = json.idsensore;
changeOraLegale_tmp.data = Var.data ;
changeOraLegale_tmp.valore = json.valore;
changeOraLegale_tmp.stato = json.stato;
changeOraLegale_tmp.idoperatore = json.idoperatore;
changeOraLegale = changeOraLegale_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "changeOraLegale"
if(changeOraLegale != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"changeOraLegale"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(changeOraLegale.idsensore != null) {
                        sb_tFileOutputDelimited_1.append(
                            changeOraLegale.idsensore
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(changeOraLegale.data != null) {
                        sb_tFileOutputDelimited_1.append(
                            changeOraLegale.data
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(changeOraLegale.valore != null) {
                        sb_tFileOutputDelimited_1.append(
                            changeOraLegale.valore
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(changeOraLegale.stato != null) {
                        sb_tFileOutputDelimited_1.append(
                            changeOraLegale.stato
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(changeOraLegale.idoperatore != null) {
                        sb_tFileOutputDelimited_1.append(
                            changeOraLegale.idoperatore
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "changeOraLegale"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "json"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_3";

	

 



/**
 * [tExtractJSONFields_3 process_data_end ] stop
 */



	
	/**
	 * [tHttpRequest_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";

	

 



/**
 * [tHttpRequest_2 process_data_end ] stop
 */
	
	/**
	 * [tHttpRequest_2 end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";

	

 

ok_Hash.put("tHttpRequest_2", true);
end_Hash.put("tHttpRequest_2", System.currentTimeMillis());




/**
 * [tHttpRequest_2 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_3 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_3";

	
   globalMap.put("tExtractJSONFields_3_NB_LINE", nb_line_tExtractJSONFields_3);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dataApi");
			  	}
			  	
 

ok_Hash.put("tExtractJSONFields_3", true);
end_Hash.put("tExtractJSONFields_3", System.currentTimeMillis());




/**
 * [tExtractJSONFields_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"json");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"changeOraLegale");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHttpRequest_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputDelimited_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHttpRequest_2 finally ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";

	

 



/**
 * [tHttpRequest_2 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_3 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_3";

	

 



/**
 * [tExtractJSONFields_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHttpRequest_2_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final update_logStruct other = (update_logStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(update_logStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(update_logStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class queryUpdateStruct implements routines.system.IPersistableRow<queryUpdateStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final queryUpdateStruct other = (queryUpdateStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(queryUpdateStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(queryUpdateStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(queryUpdateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final insert_logStruct other = (insert_logStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(insert_logStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(insert_logStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class quaryInsertStruct implements routines.system.IPersistableRow<quaryInsertStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final quaryInsertStruct other = (quaryInsertStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(quaryInsertStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(quaryInsertStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(quaryInsertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class INSERTStruct implements routines.system.IPersistableRow<INSERTStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final INSERTStruct other = (INSERTStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(INSERTStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(INSERTStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(INSERTStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class UPDATEStruct implements routines.system.IPersistableRow<UPDATEStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final UPDATEStruct other = (UPDATEStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(UPDATEStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(UPDATEStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(UPDATEStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class tempdataStruct implements routines.system.IPersistableRow<tempdataStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];

	
			    public Long IdSensore;

				public Long getIdSensore () {
					return this.IdSensore;
				}
				
			    public java.util.Date Data;

				public java.util.Date getData () {
					return this.Data;
				}
				
			    public Float Valore;

				public Float getValore () {
					return this.Valore;
				}
				
			    public String Stato;

				public String getStato () {
					return this.Stato;
				}
				
			    public Integer idOperatore;

				public Integer getIdOperatore () {
					return this.idOperatore;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IdSensore = null;
           				} else {
           			    	this.IdSensore = dis.readLong();
           				}
					
					this.Data = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Valore = null;
           				} else {
           			    	this.Valore = dis.readFloat();
           				}
					
					this.Stato = readString(dis);
					
						this.idOperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IdSensore = null;
           				} else {
           			    	this.IdSensore = dis.readLong();
           				}
					
					this.Data = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Valore = null;
           				} else {
           			    	this.Valore = dis.readFloat();
           				}
					
					this.Stato = readString(dis);
					
						this.idOperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.IdSensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.IdSensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.Data,dos);
					
					// Float
				
						if(this.Valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Valore);
		            	}
					
					// String
				
						writeString(this.Stato,dos);
					
					// Integer
				
						writeInteger(this.idOperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.IdSensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.IdSensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.Data,dos);
					
					// Float
				
						if(this.Valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Valore);
		            	}
					
					// String
				
						writeString(this.Stato,dos);
					
					// Integer
				
						writeInteger(this.idOperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IdSensore="+String.valueOf(IdSensore));
		sb.append(",Data="+String.valueOf(Data));
		sb.append(",Valore="+String.valueOf(Valore));
		sb.append(",Stato="+Stato);
		sb.append(",idOperatore="+String.valueOf(idOperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(tempdataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];

	
			    public Long IdSensore;

				public Long getIdSensore () {
					return this.IdSensore;
				}
				
			    public java.util.Date Data;

				public java.util.Date getData () {
					return this.Data;
				}
				
			    public Float Valore;

				public Float getValore () {
					return this.Valore;
				}
				
			    public String Stato;

				public String getStato () {
					return this.Stato;
				}
				
			    public Integer idOperatore;

				public Integer getIdOperatore () {
					return this.idOperatore;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IdSensore = null;
           				} else {
           			    	this.IdSensore = dis.readLong();
           				}
					
					this.Data = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Valore = null;
           				} else {
           			    	this.Valore = dis.readFloat();
           				}
					
					this.Stato = readString(dis);
					
						this.idOperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IdSensore = null;
           				} else {
           			    	this.IdSensore = dis.readLong();
           				}
					
					this.Data = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Valore = null;
           				} else {
           			    	this.Valore = dis.readFloat();
           				}
					
					this.Stato = readString(dis);
					
						this.idOperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.IdSensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.IdSensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.Data,dos);
					
					// Float
				
						if(this.Valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Valore);
		            	}
					
					// String
				
						writeString(this.Stato,dos);
					
					// Integer
				
						writeInteger(this.idOperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.IdSensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.IdSensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.Data,dos);
					
					// Float
				
						if(this.Valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Valore);
		            	}
					
					// String
				
						writeString(this.Stato,dos);
					
					// Integer
				
						writeInteger(this.idOperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IdSensore="+String.valueOf(IdSensore));
		sb.append(",Data="+String.valueOf(Data));
		sb.append(",Valore="+String.valueOf(Valore));
		sb.append(",Stato="+Stato);
		sb.append(",idOperatore="+String.valueOf(idOperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);

		tempdataStruct tempdata = new tempdataStruct();
INSERTStruct INSERT = new INSERTStruct();
INSERTStruct quaryInsert = INSERT;
insert_logStruct insert_log = new insert_logStruct();
UPDATEStruct UPDATE = new UPDATEStruct();
UPDATEStruct queryUpdate = UPDATE;
update_logStruct update_log = new update_logStruct();







	
	/**
	 * [tFlowMeter_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeter_31", false);
		start_Hash.put("tFlowMeter_31", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeter_31";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tFlowMeter_31 = 0;
		

    int count_tFlowMeter_31 = 0; 
 



/**
 * [tFlowMeter_31 begin ] stop
 */



	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"quaryInsert");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("sens_data_"+TalendDate.getDate("yyyy"));
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("sens_data_"+TalendDate.getDate("yyyy"));
}


int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_3 = "public";
                                    if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_3 = conn_tDBOutput_3.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_3 = stmtSchema_tDBOutput_3.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_3.next()){
                                                defaultSchema_tDBOutput_3 = rsSchema_tDBOutput_3.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_3.next()) {
                                        String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
                                        String schema_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_3.equals(("sens_data_"+TalendDate.getDate("yyyy")))
                                            && (schema_tDBOutput_3.equals(dbschema_tDBOutput_3) || ((dbschema_tDBOutput_3 ==null || dbschema_tDBOutput_3.trim().length() ==0) && defaultSchema_tDBOutput_3.equals(schema_tDBOutput_3)))) {
                                            whetherExist_tDBOutput_3 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtCreate_tDBOutput_3.execute("CREATE TABLE \"" + tableName_tDBOutput_3 + "\"(\"idsensore\" INT8 ,\"dataora\" TIMESTAMP(29)  ,\"valore\" FLOAT8 ,\"stato\" VARCHAR(2)  ,\"idoperatore\" INT4 ,primary key(\"idsensore\",\"dataora\"))");
                                    }
                                }
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"idsensore\",\"dataora\",\"valore\",\"stato\",\"idoperatore\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"INSERT");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[5];

        public void addRow(String[] row) {

            for (int i = 0; i < 5; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 4 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("INSERT_SHOW");
        util_tLogRow_2.addRow(new String[]{"idsensore","dataora","valore","stato","idoperatore",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */






	
	/**
	 * [tFlowMeter_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeter_29", false);
		start_Hash.put("tFlowMeter_29", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeter_29";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tFlowMeter_29 = 0;
		

    int count_tFlowMeter_29 = 0; 
 



/**
 * [tFlowMeter_29 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"queryUpdate");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("sens_data_"+TalendDate.getDate("yyyy"));
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("sens_data_"+TalendDate.getDate("yyyy"));
}

        int updateKeyCount_tDBOutput_1 = 2;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_1 = 30000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"valore\" = ?,\"stato\" = ?,\"idoperatore\" = ? WHERE \"idsensore\" = ? AND \"dataora\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"UPDATE");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[5];

        public void addRow(String[] row) {

            for (int i = 0; i < 5; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 4 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("UPDATE_SHOW_API");
        util_tLogRow_1.addRow(new String[]{"idsensore","dataora","valore","stato","idoperatore",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"tempdata");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<dbStruct> tHash_Lookup_db = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<dbStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<dbStruct>) 
					globalMap.get( "tHash_Lookup_db" ))
					;					
					
	

dbStruct dbHashKey = new dbStruct();
dbStruct dbDefault = new dbStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	boolean update;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
INSERTStruct INSERT_tmp = new INSERTStruct();
UPDATEStruct UPDATE_tmp = new UPDATEStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = ((String)globalMap.get("tCreateTemporaryFile_1_FILEPATH"));
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(((String)globalMap.get("tCreateTemporaryFile_1_FILEPATH")), "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						tempdata = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									tempdata = new tempdataStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								tempdata.IdSensore = ParserUtils.parseTo_Long(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IdSensore", "tempdata", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									tempdata.IdSensore = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									tempdata.Data = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss.SSS");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Data", "tempdata", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									tempdata.Data = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								tempdata.Valore = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Valore", "tempdata", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									tempdata.Valore = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							tempdata.Stato = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								tempdata.idOperatore = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"idOperatore", "tempdata", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									tempdata.idOperatore = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "tempdata"
if(tempdata != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"tempdata"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "db" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopdb = false;
       		  	    	
       		  	    	
 							dbStruct dbObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    dbHashKey.idsensore = tempdata.IdSensore ;
                        		    		
                        		    		    dbHashKey.dataora = tempdata.Data  == null ? null : new java.util.Date(tempdata.Data .getTime());
                        		    		

								
		                        	dbHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_db.lookup( dbHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_db.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_db != null && tHash_Lookup_db.getCount(dbHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'db' and it contains more one result from keys :  db.idsensore = '" + dbHashKey.idsensore + "', db.dataora = '" + dbHashKey.dataora + "'");
								} // G 071
							

							dbStruct db = null;
                    		  	 
							   
                    		  	 
	       		  	    	dbStruct fromLookup_db = null;
							db = dbDefault;
										 
							
								 
							
							
								if (tHash_Lookup_db !=null && tHash_Lookup_db.hasNext()) { // G 099
								
							
								
								fromLookup_db = tHash_Lookup_db.next();

							
							
								} // G 099
							
							

							if(fromLookup_db != null) {
								db = fromLookup_db;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.update = (tempdata.IdSensore.equals(db.idsensore) && tempdata.Data.equals(db.dataora)) &&
(!tempdata.Valore.equals(db.valore) || !tempdata.Stato.equals(db.stato)); ;// ###############################
        // ###############################
        // # Output tables

UPDATE = null;
INSERT = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'UPDATE'
// # Filter conditions 
if( 

Var.update == true

 ) {
UPDATE_tmp.idsensore = tempdata.IdSensore ;
UPDATE_tmp.dataora = tempdata.Data ;
UPDATE_tmp.valore = tempdata.Valore ;
UPDATE_tmp.stato = tempdata.Stato ;
UPDATE_tmp.idoperatore = tempdata.idOperatore ;
UPDATE = UPDATE_tmp;
} // closing filter/reject
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'INSERT'
// # Filter conditions 
if( rejectedInnerJoin_tMap_2 ) {
INSERT_tmp.idsensore = tempdata.IdSensore ;
INSERT_tmp.dataora = tempdata.Data ;
INSERT_tmp.valore = tempdata.Valore ;
INSERT_tmp.stato = tempdata.Stato ;
INSERT_tmp.idoperatore = tempdata.idOperatore ;
INSERT = INSERT_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "INSERT"
if(INSERT != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"INSERT"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[5];
   				
	    		if(INSERT.idsensore != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(INSERT.idsensore)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERT.dataora != null) { //              
                 row_tLogRow_2[1]=    						
								FormatterUtils.format_Date(INSERT.dataora, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(INSERT.valore != null) { //              
                 row_tLogRow_2[2]=    						
								FormatterUtils.formatUnwithE(INSERT.valore)
					          ;	
							
	    		} //			
    			   				
	    		if(INSERT.stato != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(INSERT.stato)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERT.idoperatore != null) { //              
                 row_tLogRow_2[4]=    						    
				                String.valueOf(INSERT.idoperatore)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     quaryInsert = INSERT;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"quaryInsert"
						
						);
					}
					



            insert_log = null;
        whetherReject_tDBOutput_3 = false;
                    if(quaryInsert.idsensore == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setLong(1, quaryInsert.idsensore);
}

                    if(quaryInsert.dataora != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(quaryInsert.dataora.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(quaryInsert.valore == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_3.setFloat(3, quaryInsert.valore);
}

                    if(quaryInsert.stato == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, quaryInsert.stato);
}

                    if(quaryInsert.idoperatore == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(5, quaryInsert.idoperatore);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
            if(!whetherReject_tDBOutput_3) {
                            insert_log = new insert_logStruct();
                                insert_log.idsensore = quaryInsert.idsensore;
                                insert_log.dataora = quaryInsert.dataora;
                                insert_log.valore = quaryInsert.valore;
                                insert_log.stato = quaryInsert.stato;
                                insert_log.idoperatore = quaryInsert.idoperatore;
            }
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    		if (ne_tDBOutput_3 != null) {
				    			throw(sqle_tDBOutput_3);
				    		}else{
				            	throw(e_tDBOutput_3);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tFlowMeter_31 main ] start
	 */

	

	
	
	currentComponent="tFlowMeter_31";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					

    count_tFlowMeter_31++; 
 


	tos_count_tFlowMeter_31++;

/**
 * [tFlowMeter_31 main ] stop
 */
	
	/**
	 * [tFlowMeter_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeter_31";

	

 



/**
 * [tFlowMeter_31 process_data_begin ] stop
 */
	
	/**
	 * [tFlowMeter_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_31";

	

 



/**
 * [tFlowMeter_31 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "INSERT"




// Start of branch "UPDATE"
if(UPDATE != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"UPDATE"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[5];
   				
	    		if(UPDATE.idsensore != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(UPDATE.idsensore)			
					          ;	
							
	    		} //			
    			   				
	    		if(UPDATE.dataora != null) { //              
                 row_tLogRow_1[1]=    						
								FormatterUtils.format_Date(UPDATE.dataora, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(UPDATE.valore != null) { //              
                 row_tLogRow_1[2]=    						
								FormatterUtils.formatUnwithE(UPDATE.valore)
					          ;	
							
	    		} //			
    			   				
	    		if(UPDATE.stato != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(UPDATE.stato)			
					          ;	
							
	    		} //			
    			   				
	    		if(UPDATE.idoperatore != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(UPDATE.idoperatore)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     queryUpdate = UPDATE;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"queryUpdate"
						
						);
					}
					



            update_log = null;
        whetherReject_tDBOutput_1 = false;
                    if(queryUpdate.valore == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_1.setFloat(1, queryUpdate.valore);
}

                    if(queryUpdate.stato == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, queryUpdate.stato);
}

                    if(queryUpdate.idoperatore == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(3, queryUpdate.idoperatore);
}

                    if(queryUpdate.idsensore == null) {
pstmt_tDBOutput_1.setNull(4 + count_tDBOutput_1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setLong(4 + count_tDBOutput_1, queryUpdate.idsensore);
}


                    if(queryUpdate.dataora != null) {
pstmt_tDBOutput_1.setTimestamp(5 + count_tDBOutput_1, new java.sql.Timestamp(queryUpdate.dataora.getTime()));
} else {
pstmt_tDBOutput_1.setNull(5 + count_tDBOutput_1, java.sql.Types.TIMESTAMP);
}


    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
            if(!whetherReject_tDBOutput_1) {
                            update_log = new update_logStruct();
                                update_log.idsensore = queryUpdate.idsensore;
                                update_log.dataora = queryUpdate.dataora;
                                update_log.valore = queryUpdate.valore;
                                update_log.stato = queryUpdate.stato;
                                update_log.idoperatore = queryUpdate.idoperatore;
            }
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    		if (ne_tDBOutput_1 != null) {
				    			throw(sqle_tDBOutput_1);
				    		}else{
				            	throw(e_tDBOutput_1);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tFlowMeter_29 main ] start
	 */

	

	
	
	currentComponent="tFlowMeter_29";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					

    count_tFlowMeter_29++; 
 


	tos_count_tFlowMeter_29++;

/**
 * [tFlowMeter_29 main ] stop
 */
	
	/**
	 * [tFlowMeter_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeter_29";

	

 



/**
 * [tFlowMeter_29 process_data_begin ] stop
 */
	
	/**
	 * [tFlowMeter_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_29";

	

 



/**
 * [tFlowMeter_29 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "UPDATE"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "tempdata"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(((String)globalMap.get("tCreateTemporaryFile_1_FILEPATH"))) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_db != null) {
						tHash_Lookup_db.endGet();
					}
					globalMap.remove( "tHash_Lookup_db" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"tempdata");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"INSERT");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				}
		    	
		    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    		if (ne_tDBOutput_3 != null) {
	    			throw(sqle_tDBOutput_3);
	    		}else{
	            	throw(e_tDBOutput_3);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"quaryInsert");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */

	
	/**
	 * [tFlowMeter_31 end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_31";

	

	tFlowMeterCatcher_1.addMessage("insert_log", new Integer(count_tFlowMeter_31), "null", "", "tFlowMeter_31");

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tFlowMeter_31", true);
end_Hash.put("tFlowMeter_31", System.currentTimeMillis());




/**
 * [tFlowMeter_31 end ] stop
 */










	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"UPDATE");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				}
		    	
		    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    		if (ne_tDBOutput_1 != null) {
	    			throw(sqle_tDBOutput_1);
	    		}else{
	            	throw(e_tDBOutput_1);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"queryUpdate");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tFlowMeter_29 end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_29";

	

	tFlowMeterCatcher_1.addMessage("update_log", new Integer(count_tFlowMeter_29), "null", "", "tFlowMeter_29");

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tFlowMeter_29", true);
end_Hash.put("tFlowMeter_29", System.currentTimeMillis());




/**
 * [tFlowMeter_29 end ] stop
 */












				}//end the resume

				
							tFlowMeterCatcher_1Process(globalMap);
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_db"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */

	
	/**
	 * [tFlowMeter_31 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeter_31";

	

 



/**
 * [tFlowMeter_31 finally ] stop
 */










	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tFlowMeter_29 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeter_29";

	

 



/**
 * [tFlowMeter_29 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class delete_logStruct implements routines.system.IPersistableRow<delete_logStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final delete_logStruct other = (delete_logStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(delete_logStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(delete_logStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(delete_logStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class queryDeleteStruct implements routines.system.IPersistableRow<queryDeleteStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final queryDeleteStruct other = (queryDeleteStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(queryDeleteStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(queryDeleteStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(queryDeleteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DELETEDStruct implements routines.system.IPersistableRow<DELETEDStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DELETEDStruct other = (DELETEDStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(DELETEDStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(DELETEDStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DELETEDStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class dbtableStruct implements routines.system.IPersistableRow<dbtableStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];

	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dbtableStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];

	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Float
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_2Process(globalMap);

		dbtableStruct dbtable = new dbtableStruct();
DELETEDStruct DELETED = new DELETEDStruct();
DELETEDStruct queryDelete = DELETED;
delete_logStruct delete_log = new delete_logStruct();







	
	/**
	 * [tFlowMeter_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeter_33", false);
		start_Hash.put("tFlowMeter_33", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeter_33";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"delete_log");
					}
				
		int tos_count_tFlowMeter_33 = 0;
		

    int count_tFlowMeter_33 = 0; 
 



/**
 * [tFlowMeter_33 begin ] stop
 */



	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"queryDelete");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("sens_data_"+TalendDate.getDate("yyyy"));
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("sens_data_"+TalendDate.getDate("yyyy"));
}

        int deleteKeyCount_tDBOutput_4 = 2;
        if(deleteKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_4 = 30000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
	    String delete_tDBOutput_4 = "DELETE FROM \"" + tableName_tDBOutput_4 + "\" WHERE \"idsensore\" = ? AND \"dataora\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(delete_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DELETED");
					}
				
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
         class Util_tLogRow_4 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[5];

        public void addRow(String[] row) {

            for (int i = 0; i < 5; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 4 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
        util_tLogRow_4.setTableName("DELETE_SHOW");
        util_tLogRow_4.addRow(new String[]{"idsensore","dataora","valore","stato","idoperatore",});        
 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dbtable");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<datatempStruct> tHash_Lookup_datatemp = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<datatempStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<datatempStruct>) 
					globalMap.get( "tHash_Lookup_datatemp" ))
					;					
					
	

datatempStruct datatempHashKey = new datatempStruct();
datatempStruct datatempDefault = new datatempStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
DELETEDStruct DELETED_tmp = new DELETEDStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select * from sens_data_"+TalendDate.getDate("yyyy");
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								dbtable.idsensore = null;
							} else {
		                          
            dbtable.idsensore = rs_tDBInput_2.getLong(1);
            if(rs_tDBInput_2.wasNull()){
                    dbtable.idsensore = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								dbtable.dataora = null;
							} else {
										
			dbtable.dataora = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 2);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								dbtable.valore = null;
							} else {
		                          
            dbtable.valore = rs_tDBInput_2.getFloat(3);
            if(rs_tDBInput_2.wasNull()){
                    dbtable.valore = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								dbtable.stato = null;
							} else {
	                         		
        	dbtable.stato = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								dbtable.idoperatore = null;
							} else {
		                          
            dbtable.idoperatore = rs_tDBInput_2.getInt(5);
            if(rs_tDBInput_2.wasNull()){
                    dbtable.idoperatore = null;
            }
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"dbtable"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "datatemp" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopdatatemp = false;
       		  	    	
       		  	    	
 							datatempStruct datatempObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    datatempHashKey.IdSensore = dbtable.idsensore ;
                        		    		

								
		                        	datatempHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_datatemp.lookup( datatempHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_datatemp.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_datatemp != null && tHash_Lookup_datatemp.getCount(datatempHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'datatemp' and it contains more one result from keys :  datatemp.IdSensore = '" + datatempHashKey.IdSensore + "'");
								} // G 071
							

							datatempStruct datatemp = null;
                    		  	 
							   
                    		  	 
	       		  	    	datatempStruct fromLookup_datatemp = null;
							datatemp = datatempDefault;
										 
							
								 
							
							
								if (tHash_Lookup_datatemp !=null && tHash_Lookup_datatemp.hasNext()) { // G 099
								
							
								
								fromLookup_datatemp = tHash_Lookup_datatemp.next();

							
							
								} // G 099
							
							

							if(fromLookup_datatemp != null) {
								datatemp = fromLookup_datatemp;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

DELETED = null;

if(!rejectedInnerJoin_tMap_4 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'DELETED'
// # Filter conditions 
if( rejectedInnerJoin_tMap_4 ) {
DELETED_tmp.idsensore = dbtable.idsensore ;
DELETED_tmp.dataora = dbtable.dataora ;
DELETED_tmp.valore = dbtable.valore ;
DELETED_tmp.stato = dbtable.stato ;
DELETED_tmp.idoperatore = dbtable.idoperatore ;
DELETED = DELETED_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "DELETED"
if(DELETED != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DELETED"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_4 = new String[5];
   				
	    		if(DELETED.idsensore != null) { //              
                 row_tLogRow_4[0]=    						    
				                String.valueOf(DELETED.idsensore)			
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.dataora != null) { //              
                 row_tLogRow_4[1]=    						
								FormatterUtils.format_Date(DELETED.dataora, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.valore != null) { //              
                 row_tLogRow_4[2]=    						
								FormatterUtils.formatUnwithE(DELETED.valore)
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.stato != null) { //              
                 row_tLogRow_4[3]=    						    
				                String.valueOf(DELETED.stato)			
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.idoperatore != null) { //              
                 row_tLogRow_4[4]=    						    
				                String.valueOf(DELETED.idoperatore)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_4.addRow(row_tLogRow_4);	
				nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 
     queryDelete = DELETED;


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"queryDelete"
						
						);
					}
					



            delete_log = null;
        whetherReject_tDBOutput_4 = false;
					
                    if(queryDelete.idsensore == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setLong(1, queryDelete.idsensore);
}

					
                    if(queryDelete.dataora != null) {
pstmt_tDBOutput_4.setTimestamp(2, new java.sql.Timestamp(queryDelete.dataora.getTime()));
} else {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.TIMESTAMP);
}

    		pstmt_tDBOutput_4.addBatch();
			nb_line_tDBOutput_4++;
			  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		
            if(!whetherReject_tDBOutput_4) {
                            delete_log = new delete_logStruct();
                                delete_log.idsensore = queryDelete.idsensore;
                                delete_log.dataora = queryDelete.dataora;
                                delete_log.valore = queryDelete.valore;
                                delete_log.stato = queryDelete.stato;
                                delete_log.idoperatore = queryDelete.idoperatore;
            }
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    	    deletedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    		if (ne_tDBOutput_4 != null) {
				    			throw(sqle_tDBOutput_4);
				    		}else{
				            	throw(e_tDBOutput_4);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
// Start of branch "delete_log"
if(delete_log != null) { 



	
	/**
	 * [tFlowMeter_33 main ] start
	 */

	

	
	
	currentComponent="tFlowMeter_33";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"delete_log"
						
						);
					}
					

    count_tFlowMeter_33++; 
 


	tos_count_tFlowMeter_33++;

/**
 * [tFlowMeter_33 main ] stop
 */
	
	/**
	 * [tFlowMeter_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeter_33";

	

 



/**
 * [tFlowMeter_33 process_data_begin ] stop
 */
	
	/**
	 * [tFlowMeter_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_33";

	

 



/**
 * [tFlowMeter_33 process_data_end ] stop
 */

} // End of branch "delete_log"




	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "DELETED"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_datatemp != null) {
						tHash_Lookup_datatemp.endGet();
					}
					globalMap.remove( "tHash_Lookup_datatemp" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dbtable");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_4 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    
                    consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
                    consoleOut_tLogRow_4.flush();
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DELETED");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				}
		    	
		    	    deletedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    		if (ne_tDBOutput_4 != null) {
	    			throw(sqle_tDBOutput_4);
	    		}else{
	            	throw(e_tDBOutput_4);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"queryDelete");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */

	
	/**
	 * [tFlowMeter_33 end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_33";

	

	tFlowMeterCatcher_1.addMessage("delete_log", new Integer(count_tFlowMeter_33), "null", "", "tFlowMeter_33");

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"delete_log");
			  	}
			  	
 

ok_Hash.put("tFlowMeter_33", true);
end_Hash.put("tFlowMeter_33", System.currentTimeMillis());




/**
 * [tFlowMeter_33 end ] stop
 */












				}//end the resume

				
							tFlowMeterCatcher_1Process(globalMap);
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFlowMeterCatcher_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_datatemp"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */

	
	/**
	 * [tFlowMeter_33 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeter_33";

	

 



/**
 * [tFlowMeter_33 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class updateLogStruct implements routines.system.IPersistableRow<updateLogStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public int duration_in_seconds;

				public int getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
			        this.duration_in_seconds = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
			        this.duration_in_seconds = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// int
				
		            	dos.writeInt(this.duration_in_seconds);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// int
				
		            	dos.writeInt(this.duration_in_seconds);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(updateLogStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insertLogStruct implements routines.system.IPersistableRow<insertLogStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public int duration_in_seconds;

				public int getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
			        this.duration_in_seconds = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
			        this.duration_in_seconds = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// int
				
		            	dos.writeInt(this.duration_in_seconds);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// int
				
		            	dos.writeInt(this.duration_in_seconds);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertLogStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class deleteLogStruct implements routines.system.IPersistableRow<deleteLogStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public int duration_in_seconds;

				public int getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
			        this.duration_in_seconds = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
			        this.duration_in_seconds = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// int
				
		            	dos.writeInt(this.duration_in_seconds);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// int
				
		            	dos.writeInt(this.duration_in_seconds);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(deleteLogStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class logsStruct implements routines.system.IPersistableRow<logsStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS.length == 0) {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(logsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		logsStruct logs = new logsStruct();
updateLogStruct updateLog = new updateLogStruct();
insertLogStruct insertLog = new insertLogStruct();
deleteLogStruct deleteLog = new deleteLogStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"updateLog");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("logs");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("logs");
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_2 = "public";
                                    if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_2 = conn_tDBOutput_2.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_2 = stmtSchema_tDBOutput_2.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_2.next()){
                                                defaultSchema_tDBOutput_2 = rsSchema_tDBOutput_2.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_2.next()) {
                                        String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
                                        String schema_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_2.equals(("logs"))
                                            && (schema_tDBOutput_2.equals(dbschema_tDBOutput_2) || ((dbschema_tDBOutput_2 ==null || dbschema_tDBOutput_2.trim().length() ==0) && defaultSchema_tDBOutput_2.equals(schema_tDBOutput_2)))) {
                                            whetherExist_tDBOutput_2 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2 + "\"(\"current_date\" TIMESTAMP  not null ,\"table_name\" VARCHAR  not null ,\"operation\" VARCHAR  not null ,\"number_of_rows\" INT4 ,\"duration_in_seconds\" INT4  not null )");
                                    }
                                }
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"current_date\",\"table_name\",\"operation\",\"number_of_rows\",\"duration_in_seconds\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */




	
	/**
	 * [tDBOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_8", false);
		start_Hash.put("tDBOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insertLog");
					}
				
		int tos_count_tDBOutput_8 = 0;
		





String dbschema_tDBOutput_8 = null;
	dbschema_tDBOutput_8 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_8 = null;
if(dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
	tableName_tDBOutput_8 = ("logs");
} else {
	tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "\".\"" + ("logs");
}


int nb_line_tDBOutput_8 = 0;
int nb_line_update_tDBOutput_8 = 0;
int nb_line_inserted_tDBOutput_8 = 0;
int nb_line_deleted_tDBOutput_8 = 0;
int nb_line_rejected_tDBOutput_8 = 0;

int deletedCount_tDBOutput_8=0;
int updatedCount_tDBOutput_8=0;
int insertedCount_tDBOutput_8=0;
int rowsToCommitCount_tDBOutput_8=0;
int rejectedCount_tDBOutput_8=0;

boolean whetherReject_tDBOutput_8 = false;

java.sql.Connection conn_tDBOutput_8 = null;
String dbUser_tDBOutput_8 = null;

	conn_tDBOutput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_8 = 10000;
   int batchSizeCounter_tDBOutput_8=0;

int count_tDBOutput_8=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_8 = conn_tDBOutput_8.getMetaData();
                                boolean whetherExist_tDBOutput_8 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_8 = dbMetaData_tDBOutput_8.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_8 = "public";
                                    if(dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_8 = conn_tDBOutput_8.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_8 = stmtSchema_tDBOutput_8.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_8.next()){
                                                defaultSchema_tDBOutput_8 = rsSchema_tDBOutput_8.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_8.next()) {
                                        String table_tDBOutput_8 = rsTable_tDBOutput_8.getString("TABLE_NAME");
                                        String schema_tDBOutput_8 = rsTable_tDBOutput_8.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_8.equals(("logs"))
                                            && (schema_tDBOutput_8.equals(dbschema_tDBOutput_8) || ((dbschema_tDBOutput_8 ==null || dbschema_tDBOutput_8.trim().length() ==0) && defaultSchema_tDBOutput_8.equals(schema_tDBOutput_8)))) {
                                            whetherExist_tDBOutput_8 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_8) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                                        stmtCreate_tDBOutput_8.execute("CREATE TABLE \"" + tableName_tDBOutput_8 + "\"(\"current_date\" TIMESTAMP  not null ,\"table_name\" VARCHAR  not null ,\"operation\" VARCHAR  not null ,\"number_of_rows\" INT4 ,\"duration_in_seconds\" INT4  not null )");
                                    }
                                }
	    String insert_tDBOutput_8 = "INSERT INTO \"" + tableName_tDBOutput_8 + "\" (\"current_date\",\"table_name\",\"operation\",\"number_of_rows\",\"duration_in_seconds\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
	    resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);
	    

 



/**
 * [tDBOutput_8 begin ] stop
 */




	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"deleteLog");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("logs");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("logs");
}


int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_5 = 10000;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5.getMetaData();
                                boolean whetherExist_tDBOutput_5 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_5 = "public";
                                    if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_5 = conn_tDBOutput_5.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_5 = stmtSchema_tDBOutput_5.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_5.next()){
                                                defaultSchema_tDBOutput_5 = rsSchema_tDBOutput_5.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_5.next()) {
                                        String table_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_NAME");
                                        String schema_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_5.equals(("logs"))
                                            && (schema_tDBOutput_5.equals(dbschema_tDBOutput_5) || ((dbschema_tDBOutput_5 ==null || dbschema_tDBOutput_5.trim().length() ==0) && defaultSchema_tDBOutput_5.equals(schema_tDBOutput_5)))) {
                                            whetherExist_tDBOutput_5 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_5) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                                        stmtCreate_tDBOutput_5.execute("CREATE TABLE \"" + tableName_tDBOutput_5 + "\"(\"current_date\" TIMESTAMP  not null ,\"table_name\" VARCHAR  not null ,\"operation\" VARCHAR  not null ,\"number_of_rows\" INT4 ,\"duration_in_seconds\" INT4  not null )");
                                    }
                                }
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"current_date\",\"table_name\",\"operation\",\"number_of_rows\",\"duration_in_seconds\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"logs");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	java.util.Date current_date;
	String table_name;
	String operation;
	int duration_in_seconds;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
updateLogStruct updateLog_tmp = new updateLogStruct();
insertLogStruct insertLog_tmp = new insertLogStruct();
deleteLogStruct deleteLog_tmp = new deleteLogStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		logs.pid = pid;
		logs.root_pid = rootPid;
		logs.father_pid = fatherPid;	
        logs.project = projectName;
        logs.job = jobName;
        logs.context = contextStr;
		logs.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		logs.moment = mcm.getMoment();
		logs.job_version = mcm.getJobVersion();
		logs.job_repository_id = mcm.getJobId();
		logs.system_pid = mcm.getSystemPid();
		logs.label = mcm.getLabel();
		logs.count = mcm.getCount();
		logs.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		logs.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"logs"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.current_date = TalendDate.getCurrentDate();
Var.table_name = "sens_data_"+TalendDate.getDate("yyyy");
Var.operation = (logs.label == "insert_log" && logs.count > 0)?
"Insert":
(logs.label == "update_log" && logs.count > 0)?
"Update" : 
(logs.label == "delete_log" && logs.count > 0)?
"Delete":
"No changes" ;
Var.duration_in_seconds = Math.toIntExact(TalendDate.getCurrentDate().getTime() - startTime)/1000;// ###############################
        // ###############################
        // # Output tables

updateLog = null;
insertLog = null;
deleteLog = null;


// # Output table : 'updateLog'
// # Filter conditions 
if( 

Var.operation.equals("Update")

 ) {
updateLog_tmp.current_date = Var.current_date ;
updateLog_tmp.table_name = Var.table_name ;
updateLog_tmp.operation = Var.operation ;
updateLog_tmp.number_of_rows = logs.count ;
updateLog_tmp.duration_in_seconds = Var.duration_in_seconds ;
updateLog = updateLog_tmp;
} // closing filter/reject

// # Output table : 'insertLog'
// # Filter conditions 
if( 

Var.operation.equals("Insert")

 ) {
insertLog_tmp.current_date = Var.current_date ;
insertLog_tmp.table_name = Var.table_name ;
insertLog_tmp.operation = Var.operation ;
insertLog_tmp.number_of_rows = logs.count ;
insertLog_tmp.duration_in_seconds = Var.duration_in_seconds ;
insertLog = insertLog_tmp;
} // closing filter/reject

// # Output table : 'deleteLog'
// # Filter conditions 
if( 

Var.operation.equals("Delete")

 ) {
deleteLog_tmp.current_date = Var.current_date ;
deleteLog_tmp.table_name = Var.table_name ;
deleteLog_tmp.operation = Var.operation ;
deleteLog_tmp.number_of_rows = logs.count ;
deleteLog_tmp.duration_in_seconds = Var.duration_in_seconds ;
deleteLog = deleteLog_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "updateLog"
if(updateLog != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"updateLog"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(updateLog.current_date != null) {
pstmt_tDBOutput_2.setTimestamp(1, new java.sql.Timestamp(updateLog.current_date.getTime()));
} else {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(updateLog.table_name == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, updateLog.table_name);
}

                    if(updateLog.operation == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, updateLog.operation);
}

                    if(updateLog.number_of_rows == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(4, updateLog.number_of_rows);
}

                    pstmt_tDBOutput_2.setInt(5, updateLog.duration_in_seconds);

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    		if (ne_tDBOutput_2 != null) {
				    			throw(sqle_tDBOutput_2);
				    		}else{
				            	throw(e_tDBOutput_2);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "updateLog"




// Start of branch "insertLog"
if(insertLog != null) { 



	
	/**
	 * [tDBOutput_8 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insertLog"
						
						);
					}
					



        whetherReject_tDBOutput_8 = false;
                    if(insertLog.current_date != null) {
pstmt_tDBOutput_8.setTimestamp(1, new java.sql.Timestamp(insertLog.current_date.getTime()));
} else {
pstmt_tDBOutput_8.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(insertLog.table_name == null) {
pstmt_tDBOutput_8.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(2, insertLog.table_name);
}

                    if(insertLog.operation == null) {
pstmt_tDBOutput_8.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(3, insertLog.operation);
}

                    if(insertLog.number_of_rows == null) {
pstmt_tDBOutput_8.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_8.setInt(4, insertLog.number_of_rows);
}

                    pstmt_tDBOutput_8.setInt(5, insertLog.duration_in_seconds);

			
    		pstmt_tDBOutput_8.addBatch();
    		nb_line_tDBOutput_8++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_8++;
    		  
    			if ((batchSize_tDBOutput_8 > 0) && (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
                try {
						int countSum_tDBOutput_8 = 0;
						    
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
				    	rowsToCommitCount_tDBOutput_8 += countSum_tDBOutput_8;
				    	
				    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
				    	
            	    	batchSizeCounter_tDBOutput_8 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_8){
globalMap.put("tDBOutput_8_ERROR_MESSAGE",e_tDBOutput_8.getMessage());
				    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
				    	String errormessage_tDBOutput_8;
						if (ne_tDBOutput_8 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
							errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
						}else{
							errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
						}
				    	
				    		if (ne_tDBOutput_8 != null) {
				    			throw(sqle_tDBOutput_8);
				    		}else{
				            	throw(e_tDBOutput_8);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_8++;

/**
 * [tDBOutput_8 main ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_end ] stop
 */

} // End of branch "insertLog"




// Start of branch "deleteLog"
if(deleteLog != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"deleteLog"
						
						);
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(deleteLog.current_date != null) {
pstmt_tDBOutput_5.setTimestamp(1, new java.sql.Timestamp(deleteLog.current_date.getTime()));
} else {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(deleteLog.table_name == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(2, deleteLog.table_name);
}

                    if(deleteLog.operation == null) {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(3, deleteLog.operation);
}

                    if(deleteLog.number_of_rows == null) {
pstmt_tDBOutput_5.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(4, deleteLog.number_of_rows);
}

                    pstmt_tDBOutput_5.setInt(5, deleteLog.duration_in_seconds);

			
    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    		if (ne_tDBOutput_5 != null) {
				    			throw(sqle_tDBOutput_5);
				    		}else{
				            	throw(e_tDBOutput_5);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "deleteLog"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"logs");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    		if (ne_tDBOutput_2 != null) {
	    			throw(sqle_tDBOutput_2);
	    		}else{
	            	throw(e_tDBOutput_2);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"updateLog");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */




	
	/**
	 * [tDBOutput_8 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



	    try {
				int countSum_tDBOutput_8 = 0;
				if (pstmt_tDBOutput_8 != null && batchSizeCounter_tDBOutput_8 > 0) {
						
					for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
					rowsToCommitCount_tDBOutput_8 += countSum_tDBOutput_8;
						
				}
		    	
		    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_8){
globalMap.put("tDBOutput_8_ERROR_MESSAGE",e_tDBOutput_8.getMessage());
	    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
	    	String errormessage_tDBOutput_8;
			if (ne_tDBOutput_8 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
				errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
			}else{
				errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
			}
	    	
	    		if (ne_tDBOutput_8 != null) {
	    			throw(sqle_tDBOutput_8);
	    		}else{
	            	throw(e_tDBOutput_8);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_8 != null) {
        		
            pstmt_tDBOutput_8.close();
            resourceMap.remove("pstmt_tDBOutput_8");
        }
    resourceMap.put("statementClosed_tDBOutput_8", true);

	nb_line_deleted_tDBOutput_8=nb_line_deleted_tDBOutput_8+ deletedCount_tDBOutput_8;
	nb_line_update_tDBOutput_8=nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
	nb_line_inserted_tDBOutput_8=nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
	nb_line_rejected_tDBOutput_8=nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;
	
        globalMap.put("tDBOutput_8_NB_LINE",nb_line_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_UPDATED",nb_line_update_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_DELETED",nb_line_deleted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insertLog");
			  	}
			  	
 

ok_Hash.put("tDBOutput_8", true);
end_Hash.put("tDBOutput_8", System.currentTimeMillis());




/**
 * [tDBOutput_8 end ] stop
 */




	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				}
		    	
		    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    		if (ne_tDBOutput_5 != null) {
	    			throw(sqle_tDBOutput_5);
	    		}else{
	            	throw(e_tDBOutput_5);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"deleteLog");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */




	
	/**
	 * [tDBOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



    if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
                if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_8")) != null) {
                    pstmtToClose_tDBOutput_8.close();
                }
    }
 



/**
 * [tDBOutput_8 finally ] stop
 */




	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class datatempStruct implements routines.system.IPersistableComparableLookupRow<datatempStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long IdSensore;

				public Long getIdSensore () {
					return this.IdSensore;
				}
				
			    public java.util.Date Data;

				public java.util.Date getData () {
					return this.Data;
				}
				
			    public Float Valore;

				public Float getValore () {
					return this.Valore;
				}
				
			    public String Stato;

				public String getStato () {
					return this.Stato;
				}
				
			    public Integer idOperatore;

				public Integer getIdOperatore () {
					return this.idOperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.IdSensore == null) ? 0 : this.IdSensore.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final datatempStruct other = (datatempStruct) obj;
		
						if (this.IdSensore == null) {
							if (other.IdSensore != null)
								return false;
						
						} else if (!this.IdSensore.equals(other.IdSensore))
						
							return false;
					

		return true;
    }

	public void copyDataTo(datatempStruct other) {

		other.IdSensore = this.IdSensore;
	            other.Data = this.Data;
	            other.Valore = this.Valore;
	            other.Stato = this.Stato;
	            other.idOperatore = this.idOperatore;
	            
	}

	public void copyKeysDataTo(datatempStruct other) {

		other.IdSensore = this.IdSensore;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IdSensore = null;
           				} else {
           			    	this.IdSensore = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IdSensore = null;
           				} else {
           			    	this.IdSensore = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.IdSensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.IdSensore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.IdSensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.IdSensore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Data = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Valore = null;
           				} else {
           			    	this.Valore = dis.readFloat();
           				}
					
						this.Stato = readString(dis,ois);
					
						this.idOperatore = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.Data = readDate(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Valore = null;
           				} else {
           			    	this.Valore = objectIn.readFloat();
           				}
					
						this.Stato = readString(dis,objectIn);
					
						this.idOperatore = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.Data, dos, oos);
					
						if(this.Valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Valore);
		            	}
					
						writeString(this.Stato, dos, oos);
					
					writeInteger(this.idOperatore, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeDate(this.Data, dos, objectOut);
					
						if(this.Valore == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Valore);
		            	}
					
						writeString(this.Stato, dos, objectOut);
					
					writeInteger(this.idOperatore, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IdSensore="+String.valueOf(IdSensore));
		sb.append(",Data="+String.valueOf(Data));
		sb.append(",Valore="+String.valueOf(Valore));
		sb.append(",Stato="+Stato);
		sb.append(",idOperatore="+String.valueOf(idOperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(datatempStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.IdSensore, other.IdSensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		datatempStruct datatemp = new datatempStruct();




	
	/**
	 * [tAdvancedHash_datatemp begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_datatemp", false);
		start_Hash.put("tAdvancedHash_datatemp", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_datatemp";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"datatemp");
					}
				
		int tos_count_tAdvancedHash_datatemp = 0;
		

			   		// connection name:datatemp
			   		// source node:tFileInputDelimited_2 - inputs:(after_tDBInput_2) outputs:(datatemp,datatemp) | target node:tAdvancedHash_datatemp - inputs:(datatemp) outputs:()
			   		// linked node: tMap_4 - inputs:(dbtable,datatemp) outputs:(DELETED)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_datatemp = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<datatempStruct> tHash_Lookup_datatemp =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<datatempStruct>getLookup(matchingModeEnum_datatemp);
	   						   
		   	   	   globalMap.put("tHash_Lookup_datatemp", tHash_Lookup_datatemp);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_datatemp begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = ((String)globalMap.get("tCreateTemporaryFile_1_FILEPATH"));
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(((String)globalMap.get("tCreateTemporaryFile_1_FILEPATH")), "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						datatemp = null;			
									
			    						datatemp = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									datatemp = new datatempStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								datatemp.IdSensore = ParserUtils.parseTo_Long(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"IdSensore", "datatemp", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									datatemp.IdSensore = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									datatemp.Data = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss.SSS");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Data", "datatemp", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									datatemp.Data = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								datatemp.Valore = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Valore", "datatemp", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									datatemp.Valore = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							datatemp.Stato = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								datatemp.idOperatore = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"idOperatore", "datatemp", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									datatemp.idOperatore = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "datatemp"
if(datatemp != null) { 



	
	/**
	 * [tAdvancedHash_datatemp main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_datatemp";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"datatemp"
						
						);
					}
					


			   
			   

					datatempStruct datatemp_HashRow = new datatempStruct();
		   	   	   
				
				datatemp_HashRow.IdSensore = datatemp.IdSensore;
				
				datatemp_HashRow.Data = datatemp.Data;
				
				datatemp_HashRow.Valore = datatemp.Valore;
				
				datatemp_HashRow.Stato = datatemp.Stato;
				
				datatemp_HashRow.idOperatore = datatemp.idOperatore;
				
			tHash_Lookup_datatemp.put(datatemp_HashRow);
			
            




 


	tos_count_tAdvancedHash_datatemp++;

/**
 * [tAdvancedHash_datatemp main ] stop
 */
	
	/**
	 * [tAdvancedHash_datatemp process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_datatemp";

	

 



/**
 * [tAdvancedHash_datatemp process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_datatemp process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_datatemp";

	

 



/**
 * [tAdvancedHash_datatemp process_data_end ] stop
 */

} // End of branch "datatemp"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)(((String)globalMap.get("tCreateTemporaryFile_1_FILEPATH"))) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_datatemp end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_datatemp";

	

tHash_Lookup_datatemp.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"datatemp");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_datatemp", true);
end_Hash.put("tAdvancedHash_datatemp", System.currentTimeMillis());




/**
 * [tAdvancedHash_datatemp end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_datatemp finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_datatemp";

	

 



/**
 * [tAdvancedHash_datatemp finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class dbStruct implements routines.system.IPersistableComparableLookupRow<dbStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_deltaIngestionCurrentYearS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Float valore;

				public Float getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.dataora == null) ? 0 : this.dataora.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final dbStruct other = (dbStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.dataora == null) {
							if (other.dataora != null)
								return false;
						
						} else if (!this.dataora.equals(other.dataora))
						
							return false;
					

		return true;
    }

	public void copyDataTo(dbStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.valore = this.valore;
	            other.stato = this.stato;
	            other.idoperatore = this.idoperatore;
	            
	}

	public void copyKeysDataTo(dbStruct other) {

		other.idsensore = this.idsensore;
	            	other.dataora = this.dataora;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_deltaIngestionCurrentYearS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
					this.dataora = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readFloat();
           				}
					
						this.stato = readString(dis,ois);
					
						this.idoperatore = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = objectIn.readFloat();
           				}
					
						this.stato = readString(dis,objectIn);
					
						this.idoperatore = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.valore);
		            	}
					
						writeString(this.stato, dos, oos);
					
					writeInteger(this.idoperatore, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						if(this.valore == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.valore);
		            	}
					
						writeString(this.stato, dos, objectOut);
					
					writeInteger(this.idoperatore, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dbStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dataora, other.dataora);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		dbStruct db = new dbStruct();




	
	/**
	 * [tAdvancedHash_db begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_db", false);
		start_Hash.put("tAdvancedHash_db", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_db";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"db");
					}
				
		int tos_count_tAdvancedHash_db = 0;
		

			   		// connection name:db
			   		// source node:tDBInput_1 - inputs:(after_tFileInputDelimited_1) outputs:(db,db) | target node:tAdvancedHash_db - inputs:(db) outputs:()
			   		// linked node: tMap_2 - inputs:(tempdata,db) outputs:(INSERT,UPDATE)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_db = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<dbStruct> tHash_Lookup_db =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<dbStruct>getLookup(matchingModeEnum_db);
	   						   
		   	   	   globalMap.put("tHash_Lookup_db", tHash_Lookup_db);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_db begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select* from sens_data_"+TalendDate.getDate("yyyy");
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								db.idsensore = null;
							} else {
		                          
            db.idsensore = rs_tDBInput_1.getLong(1);
            if(rs_tDBInput_1.wasNull()){
                    db.idsensore = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								db.dataora = null;
							} else {
										
			db.dataora = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 2);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								db.valore = null;
							} else {
		                          
            db.valore = rs_tDBInput_1.getFloat(3);
            if(rs_tDBInput_1.wasNull()){
                    db.valore = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								db.stato = null;
							} else {
	                         		
        	db.stato = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								db.idoperatore = null;
							} else {
		                          
            db.idoperatore = rs_tDBInput_1.getInt(5);
            if(rs_tDBInput_1.wasNull()){
                    db.idoperatore = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_db main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_db";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"db"
						
						);
					}
					


			   
			   

					dbStruct db_HashRow = new dbStruct();
		   	   	   
				
				db_HashRow.idsensore = db.idsensore;
				
				db_HashRow.dataora = db.dataora;
				
				db_HashRow.valore = db.valore;
				
				db_HashRow.stato = db.stato;
				
				db_HashRow.idoperatore = db.idoperatore;
				
			tHash_Lookup_db.put(db_HashRow);
			
            




 


	tos_count_tAdvancedHash_db++;

/**
 * [tAdvancedHash_db main ] stop
 */
	
	/**
	 * [tAdvancedHash_db process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_db";

	

 



/**
 * [tAdvancedHash_db process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_db process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_db";

	

 



/**
 * [tAdvancedHash_db process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_db end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_db";

	

tHash_Lookup_db.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"db");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_db", true);
end_Hash.put("tAdvancedHash_db", System.currentTimeMillis());




/**
 * [tAdvancedHash_db end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_db finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_db";

	

 



/**
 * [tAdvancedHash_db finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final deltaIngestionCurrentYearS deltaIngestionCurrentYearSClass = new deltaIngestionCurrentYearS();

        int exitCode = deltaIngestionCurrentYearSClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = deltaIngestionCurrentYearS.class.getClassLoader().getResourceAsStream("arpa_data/deltaingestioncurrentyears_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = deltaIngestionCurrentYearS.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("sensors_path_input", "id_Directory");
                        if(context.getStringValue("sensors_path_input") == null) {
                            context.sensors_path_input = null;
                        } else {
                            context.sensors_path_input=(String) context.getProperty("sensors_path_input");
                        }
                        context.setContextType("sensors_path_output", "id_Directory");
                        if(context.getStringValue("sensors_path_output") == null) {
                            context.sensors_path_output = null;
                        } else {
                            context.sensors_path_output=(String) context.getProperty("sensors_path_output");
                        }
                        context.setContextType("weather_path_input", "id_Directory");
                        if(context.getStringValue("weather_path_input") == null) {
                            context.weather_path_input = null;
                        } else {
                            context.weather_path_input=(String) context.getProperty("weather_path_input");
                        }
                        context.setContextType("weather_path_output", "id_Directory");
                        if(context.getStringValue("weather_path_output") == null) {
                            context.weather_path_output = null;
                        } else {
                            context.weather_path_output=(String) context.getProperty("weather_path_output");
                        }
                        context.setContextType("postgresWoneli_AdditionalParams", "id_String");
                        if(context.getStringValue("postgresWoneli_AdditionalParams") == null) {
                            context.postgresWoneli_AdditionalParams = null;
                        } else {
                            context.postgresWoneli_AdditionalParams=(String) context.getProperty("postgresWoneli_AdditionalParams");
                        }
                        context.setContextType("postgresWoneli_Database", "id_String");
                        if(context.getStringValue("postgresWoneli_Database") == null) {
                            context.postgresWoneli_Database = null;
                        } else {
                            context.postgresWoneli_Database=(String) context.getProperty("postgresWoneli_Database");
                        }
                        context.setContextType("postgresWoneli_Login", "id_String");
                        if(context.getStringValue("postgresWoneli_Login") == null) {
                            context.postgresWoneli_Login = null;
                        } else {
                            context.postgresWoneli_Login=(String) context.getProperty("postgresWoneli_Login");
                        }
                        context.setContextType("postgresWoneli_Password", "id_Password");
                        if(context.getStringValue("postgresWoneli_Password") == null) {
                            context.postgresWoneli_Password = null;
                        } else {
                            String pwd_postgresWoneli_Password_value = context.getProperty("postgresWoneli_Password");
                            context.postgresWoneli_Password = null;
                            if(pwd_postgresWoneli_Password_value!=null) {
                                if(context_param.containsKey("postgresWoneli_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.postgresWoneli_Password = pwd_postgresWoneli_Password_value;
                                } else if (!pwd_postgresWoneli_Password_value.isEmpty()) {
                                    try {
                                        context.postgresWoneli_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_postgresWoneli_Password_value);
                                        context.put("postgresWoneli_Password",context.postgresWoneli_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("postgresWoneli_Port", "id_String");
                        if(context.getStringValue("postgresWoneli_Port") == null) {
                            context.postgresWoneli_Port = null;
                        } else {
                            context.postgresWoneli_Port=(String) context.getProperty("postgresWoneli_Port");
                        }
                        context.setContextType("postgresWoneli_Schema", "id_String");
                        if(context.getStringValue("postgresWoneli_Schema") == null) {
                            context.postgresWoneli_Schema = null;
                        } else {
                            context.postgresWoneli_Schema=(String) context.getProperty("postgresWoneli_Schema");
                        }
                        context.setContextType("postgresWoneli_Server", "id_String");
                        if(context.getStringValue("postgresWoneli_Server") == null) {
                            context.postgresWoneli_Server = null;
                        } else {
                            context.postgresWoneli_Server=(String) context.getProperty("postgresWoneli_Server");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("sensors_path_input")) {
                context.sensors_path_input = (String) parentContextMap.get("sensors_path_input");
            }if (parentContextMap.containsKey("sensors_path_output")) {
                context.sensors_path_output = (String) parentContextMap.get("sensors_path_output");
            }if (parentContextMap.containsKey("weather_path_input")) {
                context.weather_path_input = (String) parentContextMap.get("weather_path_input");
            }if (parentContextMap.containsKey("weather_path_output")) {
                context.weather_path_output = (String) parentContextMap.get("weather_path_output");
            }if (parentContextMap.containsKey("postgresWoneli_AdditionalParams")) {
                context.postgresWoneli_AdditionalParams = (String) parentContextMap.get("postgresWoneli_AdditionalParams");
            }if (parentContextMap.containsKey("postgresWoneli_Database")) {
                context.postgresWoneli_Database = (String) parentContextMap.get("postgresWoneli_Database");
            }if (parentContextMap.containsKey("postgresWoneli_Login")) {
                context.postgresWoneli_Login = (String) parentContextMap.get("postgresWoneli_Login");
            }if (parentContextMap.containsKey("postgresWoneli_Password")) {
                context.postgresWoneli_Password = (java.lang.String) parentContextMap.get("postgresWoneli_Password");
            }if (parentContextMap.containsKey("postgresWoneli_Port")) {
                context.postgresWoneli_Port = (String) parentContextMap.get("postgresWoneli_Port");
            }if (parentContextMap.containsKey("postgresWoneli_Schema")) {
                context.postgresWoneli_Schema = (String) parentContextMap.get("postgresWoneli_Schema");
            }if (parentContextMap.containsKey("postgresWoneli_Server")) {
                context.postgresWoneli_Server = (String) parentContextMap.get("postgresWoneli_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("postgresWoneli_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_2) {
globalMap.put("tPostjob_2_SUBPROCESS_STATE", -1);

e_tPostjob_2.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : deltaIngestionCurrentYearS");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     489011 characters generated by Talend Open Studio for Data Integration 
 *     on the 7 August 2022 at 23:17:48 CEST
 ************************************************************************************************/
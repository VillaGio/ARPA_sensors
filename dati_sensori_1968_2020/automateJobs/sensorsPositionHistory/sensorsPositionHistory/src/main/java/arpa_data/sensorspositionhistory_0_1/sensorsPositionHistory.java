// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package arpa_data.sensorspositionhistory_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: sensorsPositionHistory Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class sensorsPositionHistory implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(postgres_Schema != null){
				
					this.setProperty("postgres_Schema", postgres_Schema.toString());
				
			}
			
			if(postgres_Server != null){
				
					this.setProperty("postgres_Server", postgres_Server.toString());
				
			}
			
			if(postgres_Port != null){
				
					this.setProperty("postgres_Port", postgres_Port.toString());
				
			}
			
			if(postgres_AdditionalParams != null){
				
					this.setProperty("postgres_AdditionalParams", postgres_AdditionalParams.toString());
				
			}
			
			if(postgres_Password != null){
				
					this.setProperty("postgres_Password", postgres_Password.toString());
				
			}
			
			if(postgres_Login != null){
				
					this.setProperty("postgres_Login", postgres_Login.toString());
				
			}
			
			if(postgres_Database != null){
				
					this.setProperty("postgres_Database", postgres_Database.toString());
				
			}
			
			if(postgres_woneli_Database != null){
				
					this.setProperty("postgres_woneli_Database", postgres_woneli_Database.toString());
				
			}
			
			if(postgres_woneli_Schema != null){
				
					this.setProperty("postgres_woneli_Schema", postgres_woneli_Schema.toString());
				
			}
			
			if(postgres_woneli_Password != null){
				
					this.setProperty("postgres_woneli_Password", postgres_woneli_Password.toString());
				
			}
			
			if(postgres_woneli_AdditionalParams != null){
				
					this.setProperty("postgres_woneli_AdditionalParams", postgres_woneli_AdditionalParams.toString());
				
			}
			
			if(postgres_woneli_Server != null){
				
					this.setProperty("postgres_woneli_Server", postgres_woneli_Server.toString());
				
			}
			
			if(postgres_woneli_Port != null){
				
					this.setProperty("postgres_woneli_Port", postgres_woneli_Port.toString());
				
			}
			
			if(postgres_woneli_Login != null){
				
					this.setProperty("postgres_woneli_Login", postgres_woneli_Login.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String postgres_Schema;
public String getPostgres_Schema(){
	return this.postgres_Schema;
}
public String postgres_Server;
public String getPostgres_Server(){
	return this.postgres_Server;
}
public String postgres_Port;
public String getPostgres_Port(){
	return this.postgres_Port;
}
public String postgres_AdditionalParams;
public String getPostgres_AdditionalParams(){
	return this.postgres_AdditionalParams;
}
public java.lang.String postgres_Password;
public java.lang.String getPostgres_Password(){
	return this.postgres_Password;
}
public String postgres_Login;
public String getPostgres_Login(){
	return this.postgres_Login;
}
public String postgres_Database;
public String getPostgres_Database(){
	return this.postgres_Database;
}
public String postgres_woneli_Database;
public String getPostgres_woneli_Database(){
	return this.postgres_woneli_Database;
}
public String postgres_woneli_Schema;
public String getPostgres_woneli_Schema(){
	return this.postgres_woneli_Schema;
}
public java.lang.String postgres_woneli_Password;
public java.lang.String getPostgres_woneli_Password(){
	return this.postgres_woneli_Password;
}
public String postgres_woneli_AdditionalParams;
public String getPostgres_woneli_AdditionalParams(){
	return this.postgres_woneli_AdditionalParams;
}
public String postgres_woneli_Server;
public String getPostgres_woneli_Server(){
	return this.postgres_woneli_Server;
}
public String postgres_woneli_Port;
public String getPostgres_woneli_Port(){
	return this.postgres_woneli_Port;
}
public String postgres_woneli_Login;
public String getPostgres_woneli_Login(){
	return this.postgres_woneli_Login;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "sensorsPositionHistory";
	private final String projectName = "ARPA_DATA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_tdDRQPLgEeyJvdNybQDAyw", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				sensorsPositionHistory.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(sensorsPositionHistory.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tREST_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeter_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tREST_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_target__error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_stations_check_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_stations_check__error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_target_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tREST_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tREST_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = context.postgres_woneli_AdditionalParams;
            String url_tDBConnection_1 = "jdbc:postgresql://"+context.postgres_woneli_Server+":"+context.postgres_woneli_Port+"/"+context.postgres_woneli_Database;
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = context.postgres_woneli_Login;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.postgres_woneli_Password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tDBConnection_1",context.postgres_woneli_Schema);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class to_deleteStruct implements routines.system.IPersistableRow<to_deleteStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int idsensore;

				public int getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public int idstazione;

				public int getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public Integer quota;

				public Integer getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idsensore;
						
						result = prime * result + ((this.datastart == null) ? 0 : this.datastart.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final to_deleteStruct other = (to_deleteStruct) obj;
		
						if (this.idsensore != other.idsensore)
							return false;
					
						if (this.datastart == null) {
							if (other.datastart != null)
								return false;
						
						} else if (!this.datastart.equals(other.datastart))
						
							return false;
					

		return true;
    }

	public void copyDataTo(to_deleteStruct other) {

		other.idsensore = this.idsensore;
	            other.nometiposensore = this.nometiposensore;
	            other.unitamisura = this.unitamisura;
	            other.idstazione = this.idstazione;
	            other.nomestazione = this.nomestazione;
	            other.quota = this.quota;
	            other.provincia = this.provincia;
	            other.comune = this.comune;
	            other.storico = this.storico;
	            other.datastart = this.datastart;
	            other.datastop = this.datastop;
	            other.utm_nord = this.utm_nord;
	            other.utm_est = this.utm_est;
	            other.lat = this.lat;
	            other.lng = this.lng;
	            other.coordinate = this.coordinate;
	            
	}

	public void copyKeysDataTo(to_deleteStruct other) {

		other.idsensore = this.idsensore;
	            	other.datastart = this.datastart;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			        this.idstazione = dis.readInt();
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			        this.idstazione = dis.readInt();
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// int
				
		            	dos.writeInt(this.idstazione);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// int
				
		            	dos.writeInt(this.idstazione);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+String.valueOf(quota));
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(to_deleteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.datastart, other.datastart);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class convertStruct implements routines.system.IPersistableRow<convertStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int idsensore;

				public int getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public int idstazione;

				public int getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public String quota;

				public String getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idsensore;
						
						result = prime * result + ((this.datastart == null) ? 0 : this.datastart.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final convertStruct other = (convertStruct) obj;
		
						if (this.idsensore != other.idsensore)
							return false;
					
						if (this.datastart == null) {
							if (other.datastart != null)
								return false;
						
						} else if (!this.datastart.equals(other.datastart))
						
							return false;
					

		return true;
    }

	public void copyDataTo(convertStruct other) {

		other.idsensore = this.idsensore;
	            other.nometiposensore = this.nometiposensore;
	            other.unitamisura = this.unitamisura;
	            other.idstazione = this.idstazione;
	            other.nomestazione = this.nomestazione;
	            other.quota = this.quota;
	            other.provincia = this.provincia;
	            other.comune = this.comune;
	            other.storico = this.storico;
	            other.datastart = this.datastart;
	            other.datastop = this.datastop;
	            other.utm_nord = this.utm_nord;
	            other.utm_est = this.utm_est;
	            other.lat = this.lat;
	            other.lng = this.lng;
	            other.coordinate = this.coordinate;
	            
	}

	public void copyKeysDataTo(convertStruct other) {

		other.idsensore = this.idsensore;
	            	other.datastart = this.datastart;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			        this.idstazione = dis.readInt();
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			        this.idstazione = dis.readInt();
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// int
				
		            	dos.writeInt(this.idstazione);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// int
				
		            	dos.writeInt(this.idstazione);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+quota);
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(convertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.datastart, other.datastart);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DELETEDStruct implements routines.system.IPersistableRow<DELETEDStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int idsensore;

				public int getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public int idstazione;

				public int getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public String quota;

				public String getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idsensore;
						
						result = prime * result + ((this.datastart == null) ? 0 : this.datastart.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DELETEDStruct other = (DELETEDStruct) obj;
		
						if (this.idsensore != other.idsensore)
							return false;
					
						if (this.datastart == null) {
							if (other.datastart != null)
								return false;
						
						} else if (!this.datastart.equals(other.datastart))
						
							return false;
					

		return true;
    }

	public void copyDataTo(DELETEDStruct other) {

		other.idsensore = this.idsensore;
	            other.nometiposensore = this.nometiposensore;
	            other.unitamisura = this.unitamisura;
	            other.idstazione = this.idstazione;
	            other.nomestazione = this.nomestazione;
	            other.quota = this.quota;
	            other.provincia = this.provincia;
	            other.comune = this.comune;
	            other.storico = this.storico;
	            other.datastart = this.datastart;
	            other.datastop = this.datastop;
	            other.utm_nord = this.utm_nord;
	            other.utm_est = this.utm_est;
	            other.lat = this.lat;
	            other.lng = this.lng;
	            other.coordinate = this.coordinate;
	            
	}

	public void copyKeysDataTo(DELETEDStruct other) {

		other.idsensore = this.idsensore;
	            	other.datastart = this.datastart;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			        this.idstazione = dis.readInt();
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			        this.idstazione = dis.readInt();
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// int
				
		            	dos.writeInt(this.idstazione);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// int
				
		            	dos.writeInt(this.idstazione);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+quota);
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DELETEDStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.datastart, other.datastart);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sorgente_Struct implements routines.system.IPersistableRow<sorgente_Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public int idsensore;

				public int getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public int idstazione;

				public int getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public String quota;

				public String getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			        this.idstazione = dis.readInt();
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			        this.idstazione = dis.readInt();
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// int
				
		            	dos.writeInt(this.idstazione);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// int
				
		            	dos.writeInt(this.idstazione);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+quota);
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sorgente_Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class data_dbStruct implements routines.system.IPersistableRow<data_dbStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public int idsensore;

				public int getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public int idstazione;

				public int getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public Integer quota;

				public Integer getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			        this.idstazione = dis.readInt();
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			        this.idstazione = dis.readInt();
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// int
				
		            	dos.writeInt(this.idstazione);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// int
				
		            	dos.writeInt(this.idstazione);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+String.valueOf(quota));
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(data_dbStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public int idsensore;

				public int getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public int idstazione;

				public int getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public Integer quota;

				public Integer getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			        this.idstazione = dis.readInt();
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			        this.idstazione = dis.readInt();
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// int
				
		            	dos.writeInt(this.idstazione);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// int
				
		            	dos.writeInt(this.idstazione);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+String.valueOf(quota));
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tREST_4Process(globalMap);

		data_dbStruct data_db = new data_dbStruct();
sorgente_Struct sorgente_ = new sorgente_Struct();
DELETEDStruct DELETED = new DELETEDStruct();
DELETEDStruct convert = DELETED;
to_deleteStruct to_delete = new to_deleteStruct();








	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"to_delete");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("stations");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("stations");
}

        int updateKeyCount_tDBOutput_5 = 2;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_5 == 16 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_5 = 10000;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
	    String update_tDBOutput_5 = "UPDATE \"" + tableName_tDBOutput_5 + "\" SET \"nometiposensore\" = ?,\"unitamisura\" = ?,\"idstazione\" = ?,\"nomestazione\" = ?,\"quota\" = ?,\"provincia\" = ?,\"comune\" = ?,\"storico\" = ?,\"datastop\" = ?,\"utm_nord\" = ?,\"utm_est\" = ?,\"lat\" = ?,\"lng\" = ?,\"coordinate\" = ? WHERE \"idsensore\" = ? AND \"datastart\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tConvertType_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_3", false);
		start_Hash.put("tConvertType_3", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"convert");
					}
				
		int tos_count_tConvertType_3 = 0;
		
	int nb_line_tConvertType_3 = 0;  
 



/**
 * [tConvertType_3 begin ] stop
 */



	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DELETED");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
         class Util_tLogRow_3 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[16];

        public void addRow(String[] row) {

            for (int i = 0; i < 16; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 15 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 15 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[15] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
        util_tLogRow_3.setTableName("DELETE_SHOW");
        util_tLogRow_3.addRow(new String[]{"idsensore","nometiposensore","unitamisura","idstazione","nomestazione","quota","provincia","comune","storico","datastart","datastop","utm_nord","utm_est","lat","lng","coordinate",});        
 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sorgente_");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<target_Struct> tHash_Lookup_target_ = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<target_Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<target_Struct>) 
					globalMap.get( "tHash_Lookup_target_" ))
					;					
					
	

target_Struct target_HashKey = new target_Struct();
target_Struct target_Default = new target_Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
DELETEDStruct DELETED_tmp = new DELETEDStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"data_db");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	String quota;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
sorgente_Struct sorgente__tmp = new sorgente_Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select * from stations where storico = 'N' ";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								data_db.idsensore = 0;
							} else {
		                          
            data_db.idsensore = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								data_db.nometiposensore = null;
							} else {
	                         		
        	data_db.nometiposensore = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								data_db.unitamisura = null;
							} else {
	                         		
        	data_db.unitamisura = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								data_db.idstazione = 0;
							} else {
		                          
            data_db.idstazione = rs_tDBInput_2.getInt(4);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								data_db.nomestazione = null;
							} else {
	                         		
        	data_db.nomestazione = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								data_db.quota = null;
							} else {
		                          
            data_db.quota = rs_tDBInput_2.getInt(6);
            if(rs_tDBInput_2.wasNull()){
                    data_db.quota = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								data_db.provincia = null;
							} else {
	                         		
        	data_db.provincia = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								data_db.comune = null;
							} else {
	                         		
        	data_db.comune = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								data_db.storico = null;
							} else {
	                         		
        	data_db.storico = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								data_db.datastart = null;
							} else {
										
			data_db.datastart = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 10);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								data_db.datastop = null;
							} else {
										
			data_db.datastop = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 11);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								data_db.utm_nord = null;
							} else {
		                          
            data_db.utm_nord = rs_tDBInput_2.getInt(12);
            if(rs_tDBInput_2.wasNull()){
                    data_db.utm_nord = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								data_db.utm_est = null;
							} else {
		                          
            data_db.utm_est = rs_tDBInput_2.getInt(13);
            if(rs_tDBInput_2.wasNull()){
                    data_db.utm_est = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								data_db.lat = null;
							} else {
	                         		
            data_db.lat = rs_tDBInput_2.getDouble(14);
            if(rs_tDBInput_2.wasNull()){
                    data_db.lat = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								data_db.lng = null;
							} else {
	                         		
            data_db.lng = rs_tDBInput_2.getDouble(15);
            if(rs_tDBInput_2.wasNull()){
                    data_db.lng = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								data_db.coordinate = null;
							} else {
	                         		
        	data_db.coordinate = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"data_db"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.quota = data_db.quota==null?"":data_db.quota.toString() ;// ###############################
        // ###############################
        // # Output tables

sorgente_ = null;


// # Output table : 'sorgente_'
sorgente__tmp.idsensore = data_db.idsensore;
sorgente__tmp.nometiposensore = data_db.nometiposensore;
sorgente__tmp.unitamisura = data_db.unitamisura;
sorgente__tmp.idstazione = data_db.idstazione;
sorgente__tmp.nomestazione = data_db.nomestazione;
sorgente__tmp.quota = Var.quota ;
sorgente__tmp.provincia = data_db.provincia;
sorgente__tmp.comune = data_db.comune;
sorgente__tmp.storico = data_db.storico;
sorgente__tmp.datastart = data_db.datastart;
sorgente__tmp.datastop = data_db.datastop;
sorgente__tmp.utm_nord = data_db.utm_nord;
sorgente__tmp.utm_est = data_db.utm_est;
sorgente__tmp.lat = data_db.lat;
sorgente__tmp.lng = data_db.lng;
sorgente__tmp.coordinate = data_db.coordinate;
sorgente_ = sorgente__tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "sorgente_"
if(sorgente_ != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"sorgente_"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "target_" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooptarget_ = false;
       		  	    	
       		  	    	
 							target_Struct target_ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    target_HashKey.idsensore = sorgente_.idsensore ;
                        		    		
                        		    		    target_HashKey.datastart = sorgente_.datastart  == null ? null : new java.util.Date(sorgente_.datastart .getTime());
                        		    		

								
		                        	target_HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_target_.lookup( target_HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_target_.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_target_ != null && tHash_Lookup_target_.getCount(target_HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'target_' and it contains more one result from keys :  target_.idsensore = '" + target_HashKey.idsensore + "', target_.datastart = '" + target_HashKey.datastart + "'");
								} // G 071
							

							target_Struct target_ = null;
                    		  	 
							   
                    		  	 
	       		  	    	target_Struct fromLookup_target_ = null;
							target_ = target_Default;
										 
							
								 
							
							
								if (tHash_Lookup_target_ !=null && tHash_Lookup_target_.hasNext()) { // G 099
								
							
								
								fromLookup_target_ = tHash_Lookup_target_.next();

							
							
								} // G 099
							
							

							if(fromLookup_target_ != null) {
								target_ = fromLookup_target_;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

DELETED = null;

if(!rejectedInnerJoin_tMap_6 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'DELETED'
// # Filter conditions 
if( rejectedInnerJoin_tMap_6 ) {
DELETED_tmp.idsensore = sorgente_.idsensore ;
DELETED_tmp.nometiposensore = sorgente_.nometiposensore ;
DELETED_tmp.unitamisura = sorgente_.unitamisura ;
DELETED_tmp.idstazione = sorgente_.idstazione ;
DELETED_tmp.nomestazione = sorgente_.nomestazione ;
DELETED_tmp.quota = sorgente_.quota ;
DELETED_tmp.provincia = sorgente_.provincia ;
DELETED_tmp.comune = sorgente_.comune ;
DELETED_tmp.storico = "S";
DELETED_tmp.datastart = sorgente_.datastart ;
DELETED_tmp.datastop = TalendDate.getCurrentDate();
DELETED_tmp.utm_nord = sorgente_.utm_nord ;
DELETED_tmp.utm_est = sorgente_.utm_est ;
DELETED_tmp.lat = sorgente_.lat ;
DELETED_tmp.lng = sorgente_.lng ;
DELETED_tmp.coordinate = sorgente_.coordinate ;
DELETED = DELETED_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "DELETED"
if(DELETED != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DELETED"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_3 = new String[16];
              
                 row_tLogRow_3[0]=    						    
				                String.valueOf(DELETED.idsensore)			
					          ;	
										
    			   				
	    		if(DELETED.nometiposensore != null) { //              
                 row_tLogRow_3[1]=    						    
				                String.valueOf(DELETED.nometiposensore)			
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.unitamisura != null) { //              
                 row_tLogRow_3[2]=    						    
				                String.valueOf(DELETED.unitamisura)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_3[3]=    						    
				                String.valueOf(DELETED.idstazione)			
					          ;	
										
    			   				
	    		if(DELETED.nomestazione != null) { //              
                 row_tLogRow_3[4]=    						    
				                String.valueOf(DELETED.nomestazione)			
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.quota != null) { //              
                 row_tLogRow_3[5]=    						    
				                String.valueOf(DELETED.quota)			
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.provincia != null) { //              
                 row_tLogRow_3[6]=    						    
				                String.valueOf(DELETED.provincia)			
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.comune != null) { //              
                 row_tLogRow_3[7]=    						    
				                String.valueOf(DELETED.comune)			
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.storico != null) { //              
                 row_tLogRow_3[8]=    						    
				                String.valueOf(DELETED.storico)			
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.datastart != null) { //              
                 row_tLogRow_3[9]=    						
								FormatterUtils.format_Date(DELETED.datastart, "yyyy-MM-dd HH:mm:ss.SSS")
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.datastop != null) { //              
                 row_tLogRow_3[10]=    						
								FormatterUtils.format_Date(DELETED.datastop, "yyyy-MM-dd HH:mm:ss.SSS")
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.utm_nord != null) { //              
                 row_tLogRow_3[11]=    						    
				                String.valueOf(DELETED.utm_nord)			
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.utm_est != null) { //              
                 row_tLogRow_3[12]=    						    
				                String.valueOf(DELETED.utm_est)			
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.lat != null) { //              
                 row_tLogRow_3[13]=    						
								FormatterUtils.formatUnwithE(DELETED.lat)
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.lng != null) { //              
                 row_tLogRow_3[14]=    						
								FormatterUtils.formatUnwithE(DELETED.lng)
					          ;	
							
	    		} //			
    			   				
	    		if(DELETED.coordinate != null) { //              
                 row_tLogRow_3[15]=    						    
				                String.valueOf(DELETED.coordinate)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_3.addRow(row_tLogRow_3);	
				nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 
     convert = DELETED;


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_3 main ] start
	 */

	

	
	
	currentComponent="tConvertType_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"convert"
						
						);
					}
					


  to_delete = new to_deleteStruct();
  boolean bHasError_tConvertType_3 = false;             
          try {
              to_delete.idsensore=TypeConvert.int2int(convert.idsensore);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              if ("".equals(convert.nometiposensore)){  
                convert.nometiposensore = null;
              }
              to_delete.nometiposensore=TypeConvert.String2String(convert.nometiposensore);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              if ("".equals(convert.unitamisura)){  
                convert.unitamisura = null;
              }
              to_delete.unitamisura=TypeConvert.String2String(convert.unitamisura);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              to_delete.idstazione=TypeConvert.int2int(convert.idstazione);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              if ("".equals(convert.nomestazione)){  
                convert.nomestazione = null;
              }
              to_delete.nomestazione=TypeConvert.String2String(convert.nomestazione);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              if ("".equals(convert.quota)){  
                convert.quota = null;
              }
              to_delete.quota=TypeConvert.String2Integer(convert.quota);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              if ("".equals(convert.provincia)){  
                convert.provincia = null;
              }
              to_delete.provincia=TypeConvert.String2String(convert.provincia);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              if ("".equals(convert.comune)){  
                convert.comune = null;
              }
              to_delete.comune=TypeConvert.String2String(convert.comune);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              if ("".equals(convert.storico)){  
                convert.storico = null;
              }
              to_delete.storico=TypeConvert.String2String(convert.storico);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              to_delete.datastart=TypeConvert.Date2Date(convert.datastart);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              to_delete.datastop=TypeConvert.Date2Date(convert.datastop);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              to_delete.utm_nord=TypeConvert.Integer2Integer(convert.utm_nord);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              to_delete.utm_est=TypeConvert.Integer2Integer(convert.utm_est);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              to_delete.lat=TypeConvert.Double2Double(convert.lat);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              to_delete.lng=TypeConvert.Double2Double(convert.lng);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }           
          try {
              if ("".equals(convert.coordinate)){  
                convert.coordinate = null;
              }
              to_delete.coordinate=TypeConvert.String2String(convert.coordinate);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_3_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_3 = true;            
              throw e;
          }
      if (bHasError_tConvertType_3) {to_delete = null;}

  nb_line_tConvertType_3 ++ ;

 


	tos_count_tConvertType_3++;

/**
 * [tConvertType_3 main ] stop
 */
	
	/**
	 * [tConvertType_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_3";

	

 



/**
 * [tConvertType_3 process_data_begin ] stop
 */
// Start of branch "to_delete"
if(to_delete != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"to_delete"
						
						);
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(to_delete.nometiposensore == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, to_delete.nometiposensore);
}

                    if(to_delete.unitamisura == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(2, to_delete.unitamisura);
}

                    pstmt_tDBOutput_5.setInt(3, to_delete.idstazione);

                    if(to_delete.nomestazione == null) {
pstmt_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(4, to_delete.nomestazione);
}

                    if(to_delete.quota == null) {
pstmt_tDBOutput_5.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(5, to_delete.quota);
}

                    if(to_delete.provincia == null) {
pstmt_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(6, to_delete.provincia);
}

                    if(to_delete.comune == null) {
pstmt_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(7, to_delete.comune);
}

                    if(to_delete.storico == null) {
pstmt_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(8, to_delete.storico);
}

                    if(to_delete.datastop != null) {
pstmt_tDBOutput_5.setTimestamp(9, new java.sql.Timestamp(to_delete.datastop.getTime()));
} else {
pstmt_tDBOutput_5.setNull(9, java.sql.Types.TIMESTAMP);
}

                    if(to_delete.utm_nord == null) {
pstmt_tDBOutput_5.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(10, to_delete.utm_nord);
}

                    if(to_delete.utm_est == null) {
pstmt_tDBOutput_5.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(11, to_delete.utm_est);
}

                    if(to_delete.lat == null) {
pstmt_tDBOutput_5.setNull(12, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_5.setDouble(12, to_delete.lat);
}

                    if(to_delete.lng == null) {
pstmt_tDBOutput_5.setNull(13, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_5.setDouble(13, to_delete.lng);
}

                    if(to_delete.coordinate == null) {
pstmt_tDBOutput_5.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(14, to_delete.coordinate);
}

                    pstmt_tDBOutput_5.setInt(15 + count_tDBOutput_5, to_delete.idsensore);


                    if(to_delete.datastart != null) {
pstmt_tDBOutput_5.setTimestamp(16 + count_tDBOutput_5, new java.sql.Timestamp(to_delete.datastart.getTime()));
} else {
pstmt_tDBOutput_5.setNull(16 + count_tDBOutput_5, java.sql.Types.TIMESTAMP);
}


    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    		if (ne_tDBOutput_5 != null) {
				    			throw(sqle_tDBOutput_5);
				    		}else{
				            	throw(e_tDBOutput_5);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "to_delete"




	
	/**
	 * [tConvertType_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_3";

	

 



/**
 * [tConvertType_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "DELETED"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "sorgente_"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"data_db");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_target_ != null) {
						tHash_Lookup_target_.endGet();
					}
					globalMap.remove( "tHash_Lookup_target_" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sorgente_");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_3 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    
                    consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
                    consoleOut_tLogRow_3.flush();
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DELETED");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */

	
	/**
	 * [tConvertType_3 end ] start
	 */

	

	
	
	currentComponent="tConvertType_3";

	
      globalMap.put("tConvertType_3_NB_LINE", nb_line_tConvertType_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"convert");
			  	}
			  	
 

ok_Hash.put("tConvertType_3", true);
end_Hash.put("tConvertType_3", System.currentTimeMillis());




/**
 * [tConvertType_3 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				}
		    	
		    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    		if (ne_tDBOutput_5 != null) {
	    			throw(sqle_tDBOutput_5);
	    		}else{
	            	throw(e_tDBOutput_5);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"to_delete");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tREST_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_target_"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */

	
	/**
	 * [tConvertType_3 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_3";

	

 



/**
 * [tConvertType_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class to_updateStruct implements routines.system.IPersistableRow<to_updateStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Integer idstazione;

				public Integer getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public Integer quota;

				public Integer getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Float lat;

				public Float getLat () {
					return this.lat;
				}
				
			    public Float lng;

				public Float getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.datastart == null) ? 0 : this.datastart.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final to_updateStruct other = (to_updateStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.datastart == null) {
							if (other.datastart != null)
								return false;
						
						} else if (!this.datastart.equals(other.datastart))
						
							return false;
					

		return true;
    }

	public void copyDataTo(to_updateStruct other) {

		other.idsensore = this.idsensore;
	            other.nometiposensore = this.nometiposensore;
	            other.unitamisura = this.unitamisura;
	            other.idstazione = this.idstazione;
	            other.nomestazione = this.nomestazione;
	            other.quota = this.quota;
	            other.provincia = this.provincia;
	            other.comune = this.comune;
	            other.storico = this.storico;
	            other.datastart = this.datastart;
	            other.datastop = this.datastop;
	            other.utm_nord = this.utm_nord;
	            other.utm_est = this.utm_est;
	            other.lat = this.lat;
	            other.lng = this.lng;
	            other.coordinate = this.coordinate;
	            
	}

	public void copyKeysDataTo(to_updateStruct other) {

		other.idsensore = this.idsensore;
	            	other.datastart = this.datastart;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+String.valueOf(quota));
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(to_updateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.datastart, other.datastart);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class convertedStruct implements routines.system.IPersistableRow<convertedStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Integer idstazione;

				public Integer getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public Integer quota;

				public Integer getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Float lat;

				public Float getLat () {
					return this.lat;
				}
				
			    public Float lng;

				public Float getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				
			    public Boolean update;

				public Boolean getUpdate () {
					return this.update;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.update = null;
           				} else {
           			    	this.update = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.update = null;
           				} else {
           			    	this.update = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
					// Boolean
				
						if(this.update == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.update);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
					// Boolean
				
						if(this.update == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.update);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+String.valueOf(quota));
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
		sb.append(",update="+String.valueOf(update));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(convertedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class filtered_issuesStruct implements routines.system.IPersistableRow<filtered_issuesStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.storico = readString(dis);
					
					this.datastop = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.storico = readString(dis);
					
					this.datastop = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("storico="+storico);
		sb.append(",datastop="+String.valueOf(datastop));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(filtered_issuesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class to_insertStruct implements routines.system.IPersistableRow<to_insertStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Integer idstazione;

				public Integer getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public Integer quota;

				public Integer getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Float lat;

				public Float getLat () {
					return this.lat;
				}
				
			    public Float lng;

				public Float getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final to_insertStruct other = (to_insertStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					

		return true;
    }

	public void copyDataTo(to_insertStruct other) {

		other.idsensore = this.idsensore;
	            other.nometiposensore = this.nometiposensore;
	            other.unitamisura = this.unitamisura;
	            other.idstazione = this.idstazione;
	            other.nomestazione = this.nomestazione;
	            other.quota = this.quota;
	            other.provincia = this.provincia;
	            other.comune = this.comune;
	            other.storico = this.storico;
	            other.datastart = this.datastart;
	            other.datastop = this.datastop;
	            other.utm_nord = this.utm_nord;
	            other.utm_est = this.utm_est;
	            other.lat = this.lat;
	            other.lng = this.lng;
	            other.coordinate = this.coordinate;
	            
	}

	public void copyKeysDataTo(to_insertStruct other) {

		other.idsensore = this.idsensore;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+String.valueOf(quota));
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(to_insertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class to_convertStruct implements routines.system.IPersistableRow<to_convertStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Integer idstazione;

				public Integer getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public String quota;

				public String getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Float lat;

				public Float getLat () {
					return this.lat;
				}
				
			    public Float lng;

				public Float getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final to_convertStruct other = (to_convertStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					

		return true;
    }

	public void copyDataTo(to_convertStruct other) {

		other.idsensore = this.idsensore;
	            other.nometiposensore = this.nometiposensore;
	            other.unitamisura = this.unitamisura;
	            other.idstazione = this.idstazione;
	            other.nomestazione = this.nomestazione;
	            other.quota = this.quota;
	            other.provincia = this.provincia;
	            other.comune = this.comune;
	            other.storico = this.storico;
	            other.datastart = this.datastart;
	            other.datastop = this.datastop;
	            other.utm_nord = this.utm_nord;
	            other.utm_est = this.utm_est;
	            other.lat = this.lat;
	            other.lng = this.lng;
	            other.coordinate = this.coordinate;
	            
	}

	public void copyKeysDataTo(to_convertStruct other) {

		other.idsensore = this.idsensore;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+quota);
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(to_convertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class INSERTSStruct implements routines.system.IPersistableRow<INSERTSStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Integer idstazione;

				public Integer getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public String quota;

				public String getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Float lat;

				public Float getLat () {
					return this.lat;
				}
				
			    public Float lng;

				public Float getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final INSERTSStruct other = (INSERTSStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					

		return true;
    }

	public void copyDataTo(INSERTSStruct other) {

		other.idsensore = this.idsensore;
	            other.nometiposensore = this.nometiposensore;
	            other.unitamisura = this.unitamisura;
	            other.idstazione = this.idstazione;
	            other.nomestazione = this.nomestazione;
	            other.quota = this.quota;
	            other.provincia = this.provincia;
	            other.comune = this.comune;
	            other.storico = this.storico;
	            other.datastart = this.datastart;
	            other.datastop = this.datastop;
	            other.utm_nord = this.utm_nord;
	            other.utm_est = this.utm_est;
	            other.lat = this.lat;
	            other.lng = this.lng;
	            other.coordinate = this.coordinate;
	            
	}

	public void copyKeysDataTo(INSERTSStruct other) {

		other.idsensore = this.idsensore;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+quota);
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(INSERTSStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class issuesStruct implements routines.system.IPersistableRow<issuesStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.storico = readString(dis);
					
					this.datastop = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.storico = readString(dis);
					
					this.datastop = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("storico="+storico);
		sb.append(",datastop="+String.valueOf(datastop));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(issuesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class NOT_INSERTStruct implements routines.system.IPersistableRow<NOT_INSERTStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Integer idstazione;

				public Integer getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public String quota;

				public String getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Float lat;

				public Float getLat () {
					return this.lat;
				}
				
			    public Float lng;

				public Float getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				
			    public boolean update;

				public boolean getUpdate () {
					return this.update;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final NOT_INSERTStruct other = (NOT_INSERTStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					

		return true;
    }

	public void copyDataTo(NOT_INSERTStruct other) {

		other.idsensore = this.idsensore;
	            other.nometiposensore = this.nometiposensore;
	            other.unitamisura = this.unitamisura;
	            other.idstazione = this.idstazione;
	            other.nomestazione = this.nomestazione;
	            other.quota = this.quota;
	            other.provincia = this.provincia;
	            other.comune = this.comune;
	            other.storico = this.storico;
	            other.datastart = this.datastart;
	            other.datastop = this.datastop;
	            other.utm_nord = this.utm_nord;
	            other.utm_est = this.utm_est;
	            other.lat = this.lat;
	            other.lng = this.lng;
	            other.coordinate = this.coordinate;
	            other.update = this.update;
	            
	}

	public void copyKeysDataTo(NOT_INSERTStruct other) {

		other.idsensore = this.idsensore;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
			        this.update = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
			        this.update = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.update);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.update);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+quota);
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
		sb.append(",update="+String.valueOf(update));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(NOT_INSERTStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sorgenteStruct implements routines.system.IPersistableRow<sorgenteStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Integer idstazione;

				public Integer getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public String quota;

				public String getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Float lat;

				public Float getLat () {
					return this.lat;
				}
				
			    public Float lng;

				public Float getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+quota);
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sorgenteStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class json_dataStruct implements routines.system.IPersistableRow<json_dataStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Integer idstazione;

				public Integer getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public String quota;

				public String getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Float lat;

				public Float getLat () {
					return this.lat;
				}
				
			    public Float lng;

				public Float getLng () {
					return this.lng;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+quota);
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(json_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class api_dataStruct implements routines.system.IPersistableRow<api_dataStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}
				
			    public Integer ERROR_CODE;

				public Integer getERROR_CODE () {
					return this.ERROR_CODE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
		sb.append(",ERROR_CODE="+String.valueOf(ERROR_CODE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(api_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tREST_1Struct implements routines.system.IPersistableRow<after_tREST_1Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}
				
			    public Integer ERROR_CODE;

				public Integer getERROR_CODE () {
					return this.ERROR_CODE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
		sb.append(",ERROR_CODE="+String.valueOf(ERROR_CODE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tREST_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tREST_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tREST_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);

		api_dataStruct api_data = new api_dataStruct();
json_dataStruct json_data = new json_dataStruct();
sorgenteStruct sorgente = new sorgenteStruct();
INSERTSStruct INSERTS = new INSERTSStruct();
INSERTSStruct to_convert = INSERTS;
to_insertStruct to_insert = new to_insertStruct();
issuesStruct issues = new issuesStruct();
filtered_issuesStruct filtered_issues = new filtered_issuesStruct();
NOT_INSERTStruct NOT_INSERT = new NOT_INSERTStruct();
convertedStruct converted = new convertedStruct();
to_updateStruct to_update = new to_updateStruct();









	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"to_insert");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("stations");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("stations");
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_1 = "public";
                                    if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_1.next()){
                                                defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_1.next()) {
                                        String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
                                        String schema_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_1.equals(("stations"))
                                            && (schema_tDBOutput_1.equals(dbschema_tDBOutput_1) || ((dbschema_tDBOutput_1 ==null || dbschema_tDBOutput_1.trim().length() ==0) && defaultSchema_tDBOutput_1.equals(schema_tDBOutput_1)))) {
                                            whetherExist_tDBOutput_1 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1 + "\"(\"idsensore\" INT8 ,\"nometiposensore\" VARCHAR(21)  ,\"unitamisura\" VARCHAR(5)  ,\"idstazione\" INT8 ,\"nomestazione\" VARCHAR(25)  ,\"quota\" INT8 ,\"provincia\" VARCHAR(2)  ,\"comune\" VARCHAR(14)  ,\"storico\" VARCHAR ,\"datastart\" TIMESTAMP(23)  ,\"datastop\" TIMESTAMP ,\"utm_nord\" INT8 ,\"utm_est\" INT8 ,\"lat\" FLOAT8 ,\"lng\" FLOAT8 ,\"coordinate\" VARCHAR ,primary key(\"idsensore\"))");
                                    }
                                }
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"idsensore\",\"nometiposensore\",\"unitamisura\",\"idstazione\",\"nomestazione\",\"quota\",\"provincia\",\"comune\",\"storico\",\"datastart\",\"datastop\",\"utm_nord\",\"utm_est\",\"lat\",\"lng\",\"coordinate\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tConvertType_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_2", false);
		start_Hash.put("tConvertType_2", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"to_convert");
					}
				
		int tos_count_tConvertType_2 = 0;
		
	int nb_line_tConvertType_2 = 0;  
 



/**
 * [tConvertType_2 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"INSERTS");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[16];

        public void addRow(String[] row) {

            for (int i = 0; i < 16; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 15 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 15 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[15] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("INSERT_SHOW");
        util_tLogRow_2.addRow(new String[]{"idsensore","nometiposensore","unitamisura","idstazione","nomestazione","quota","provincia","comune","storico","datastart","datastop","utm_nord","utm_est","lat","lng","coordinate",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */





	
	/**
	 * [tFlowMeter_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeter_30", false);
		start_Hash.put("tFlowMeter_30", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeter_30";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"filtered_issues");
					}
				
		int tos_count_tFlowMeter_30 = 0;
		

    int count_tFlowMeter_30 = 0; 
 



/**
 * [tFlowMeter_30 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"issues");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */






	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"to_update");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("stations");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("stations");
}

        int updateKeyCount_tDBOutput_3 = 2;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 16 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nometiposensore\" = ?,\"unitamisura\" = ?,\"idstazione\" = ?,\"nomestazione\" = ?,\"quota\" = ?,\"provincia\" = ?,\"comune\" = ?,\"storico\" = ?,\"datastop\" = ?,\"utm_nord\" = ?,\"utm_est\" = ?,\"lat\" = ?,\"lng\" = ?,\"coordinate\" = ? WHERE \"idsensore\" = ? AND \"datastart\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"converted");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
to_updateStruct to_update_tmp = new to_updateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tConvertType_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_1", false);
		start_Hash.put("tConvertType_1", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"NOT_INSERT");
					}
				
		int tos_count_tConvertType_1 = 0;
		
	int nb_line_tConvertType_1 = 0;  
 



/**
 * [tConvertType_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sorgente");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<targetStruct> tHash_Lookup_target = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<targetStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<targetStruct>) 
					globalMap.get( "tHash_Lookup_target" ))
					;					
					
	

targetStruct targetHashKey = new targetStruct();
targetStruct targetDefault = new targetStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	boolean update;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
INSERTSStruct INSERTS_tmp = new INSERTSStruct();
issuesStruct issues_tmp = new issuesStruct();
NOT_INSERTStruct NOT_INSERT_tmp = new NOT_INSERTStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"json_data");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String quota;
	java.util.Date datastart;
	java.util.Date datastop;
	String coordinate;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
sorgenteStruct sorgente_tmp = new sorgenteStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_1", false);
		start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"api_data");
					}
				
		int tos_count_tExtractJSONFields_1 = 0;
		

int nb_line_tExtractJSONFields_1 = 0;
String jsonStr_tExtractJSONFields_1 = "";

	

class JsonPathCache_tExtractJSONFields_1 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

 



/**
 * [tExtractJSONFields_1 begin ] stop
 */



	
	/**
	 * [tREST_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tREST_1", false);
		start_Hash.put("tREST_1", System.currentTimeMillis());
		
	
	currentComponent="tREST_1";

	
		int tos_count_tREST_1 = 0;
		
	

	
	String endpoint_tREST_1 = "https://www.dati.lombardia.it/resource/ib47-atvt.json";
	
	String trustStoreFile_tREST_1 = System.getProperty("javax.net.ssl.trustStore");
	String trustStoreType_tREST_1 = System.getProperty("javax.net.ssl.trustStoreType");
	String trustStorePWD_tREST_1 = System.getProperty("javax.net.ssl.trustStorePassword");
	
	String keyStoreFile_tREST_1 = System.getProperty("javax.net.ssl.keyStore");
	String keyStoreType_tREST_1 = System.getProperty("javax.net.ssl.keyStoreType");
	String keyStorePWD_tREST_1 = System.getProperty("javax.net.ssl.keyStorePassword");
	
	com.sun.jersey.api.client.config.ClientConfig config_tREST_1 = new com.sun.jersey.api.client.config.DefaultClientConfig();
	javax.net.ssl.SSLContext ctx_tREST_1 = javax.net.ssl.SSLContext.getInstance("SSL");
	
	javax.net.ssl.TrustManager[] tms_tREST_1 = null;
	if(trustStoreFile_tREST_1!=null && trustStoreType_tREST_1!=null){
		char[] password_tREST_1 = null;
		if(trustStorePWD_tREST_1!=null)
			password_tREST_1 = trustStorePWD_tREST_1.toCharArray();
		java.security.KeyStore trustStore_tREST_1 = java.security.KeyStore.getInstance(trustStoreType_tREST_1);
		trustStore_tREST_1.load(new java.io.FileInputStream(trustStoreFile_tREST_1), password_tREST_1);
		
		javax.net.ssl.TrustManagerFactory tmf_tREST_1 = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        tmf_tREST_1.init(trustStore_tREST_1);
        tms_tREST_1 = tmf_tREST_1.getTrustManagers();
	}
	
	javax.net.ssl.KeyManager[] kms_tREST_1 = null;
	if(keyStoreFile_tREST_1!=null && keyStoreType_tREST_1!=null){
		char[] password_tREST_1 = null;
		if(keyStorePWD_tREST_1!=null)
			password_tREST_1 = keyStorePWD_tREST_1.toCharArray();
		java.security.KeyStore keyStore_tREST_1 = java.security.KeyStore.getInstance(keyStoreType_tREST_1);
		keyStore_tREST_1.load(new java.io.FileInputStream(keyStoreFile_tREST_1), password_tREST_1);
		
		javax.net.ssl.KeyManagerFactory kmf_tREST_1 = javax.net.ssl.KeyManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        kmf_tREST_1.init(keyStore_tREST_1,password_tREST_1);
        kms_tREST_1 = kmf_tREST_1.getKeyManagers();
	}
	
    ctx_tREST_1.init(kms_tREST_1, tms_tREST_1 , null);
    config_tREST_1.getProperties().put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
                new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

                    public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
                        return true;
                    }
                }, ctx_tREST_1));

	com.sun.jersey.api.client.Client restClient_tREST_1 = com.sun.jersey.api.client.Client.create(config_tREST_1);
	
	java.util.Map<String, Object> headers_tREST_1 = new java.util.HashMap<String, Object>();
	
	
	Object transfer_encoding_tREST_1 = headers_tREST_1.get("Transfer-Encoding");
	if(transfer_encoding_tREST_1!=null && "chunked".equals(transfer_encoding_tREST_1)) {
		restClient_tREST_1.setChunkedEncodingSize(4096);
	}
	
	com.sun.jersey.api.client.WebResource restResource_tREST_1;
	if(endpoint_tREST_1!=null && !("").equals(endpoint_tREST_1)){
		restResource_tREST_1 = restClient_tREST_1.resource(endpoint_tREST_1);
	}else{
		throw new IllegalArgumentException("url can't be empty!");
	}
	
	com.sun.jersey.api.client.ClientResponse errorResponse_tREST_1 = null;
	String restResponse_tREST_1 = "";
	try{
		
		com.sun.jersey.api.client.WebResource.Builder builder_tREST_1 = null;
		for(java.util.Map.Entry<String, Object> header_tREST_1 : headers_tREST_1.entrySet()) {
			if(builder_tREST_1 == null) {
				builder_tREST_1 = restResource_tREST_1.header(header_tREST_1.getKey(), header_tREST_1.getValue());
			} else {
				builder_tREST_1.header(header_tREST_1.getKey(), header_tREST_1.getValue());
			}
		}
		
		
			if(builder_tREST_1!=null) {
				restResponse_tREST_1 = builder_tREST_1.get(String.class);
			} else {
				restResponse_tREST_1 = restResource_tREST_1.get(String.class);
			} 
			
		
	}catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
globalMap.put("tREST_1_ERROR_MESSAGE",ue.getMessage());
        errorResponse_tREST_1 = ue.getResponse();
    }
	
	// for output
			
				api_data = new api_dataStruct();
				if(errorResponse_tREST_1!=null){
					api_data.ERROR_CODE = errorResponse_tREST_1.getStatus();
					if(api_data.ERROR_CODE!=204){
					    api_data.Body = errorResponse_tREST_1.getEntity(String.class);
					}
				}else{
					api_data.Body = restResponse_tREST_1;
				}
			

 



/**
 * [tREST_1 begin ] stop
 */
	
	/**
	 * [tREST_1 main ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 


	tos_count_tREST_1++;

/**
 * [tREST_1 main ] stop
 */
	
	/**
	 * [tREST_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 



/**
 * [tREST_1 process_data_begin ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"api_data"
						
						);
					}
					

            if(api_data.Body!=null){// C_01
                jsonStr_tExtractJSONFields_1 = api_data.Body.toString();
   
json_data = null;

	

String loopPath_tExtractJSONFields_1 = "$.[*]";
java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_1 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
try {
	document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_1);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
	Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(compiledLoopPath_tExtractJSONFields_1,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
	} else {
		resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
	}
	
	isStructError_tExtractJSONFields_1 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",ex_tExtractJSONFields_1.getMessage());
	throw(ex_tExtractJSONFields_1);
}

String jsonPath_tExtractJSONFields_1 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

Object value_tExtractJSONFields_1 = null;

Object root_tExtractJSONFields_1 = null;
for(int i_tExtractJSONFields_1=0; isStructError_tExtractJSONFields_1 || (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1.size());i_tExtractJSONFields_1++){
	if(!isStructError_tExtractJSONFields_1){
		Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1.get(i_tExtractJSONFields_1);
            json_data = null;
	json_data = new json_dataStruct();
	nb_line_tExtractJSONFields_1++;
	try {
		jsonPath_tExtractJSONFields_1 = "idsensore";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					json_data.idsensore = ParserUtils.parseTo_Integer(value_tExtractJSONFields_1.toString());
				} else {
					json_data.idsensore = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.idsensore = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "nometiposensore";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				json_data.nometiposensore = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.nometiposensore = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "unitamisura";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				json_data.unitamisura = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.unitamisura = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "idstazione";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					json_data.idstazione = ParserUtils.parseTo_Integer(value_tExtractJSONFields_1.toString());
				} else {
					json_data.idstazione = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.idstazione = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "nomestazione";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				json_data.nomestazione = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.nomestazione = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "quota";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				json_data.quota = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.quota = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "provincia";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				json_data.provincia = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.provincia = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "comune";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				json_data.comune = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.comune = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "storico";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				json_data.storico = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.storico = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "datastart";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					json_data.datastart = ParserUtils.parseTo_Date(value_tExtractJSONFields_1.toString(), "yyyy-MM-dd'T'HH:mm:ss.SSS");
				} else {
					json_data.datastart = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.datastart = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "datastop";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					json_data.datastop = ParserUtils.parseTo_Date(value_tExtractJSONFields_1.toString(), "yyyy-MM-dd'T'HH:mm:ss.SSS");
				} else {
					json_data.datastop = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.datastop = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "utm_nord";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					json_data.utm_nord = ParserUtils.parseTo_Integer(value_tExtractJSONFields_1.toString());
				} else {
					json_data.utm_nord = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.utm_nord = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "utm_est";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					json_data.utm_est = ParserUtils.parseTo_Integer(value_tExtractJSONFields_1.toString());
				} else {
					json_data.utm_est = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.utm_est = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "lat";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					json_data.lat = ParserUtils.parseTo_Float(value_tExtractJSONFields_1.toString());
				} else {
					json_data.lat = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.lat = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "lng";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					json_data.lng = ParserUtils.parseTo_Float(value_tExtractJSONFields_1.toString());
				} else {
					json_data.lng = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			json_data.lng = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",ex_tExtractJSONFields_1.getMessage());
    	throw(ex_tExtractJSONFields_1);	
	}
	
	}
    
	isStructError_tExtractJSONFields_1 = false;
	
//}


 


	tos_count_tExtractJSONFields_1++;

/**
 * [tExtractJSONFields_1 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_begin ] stop
 */
// Start of branch "json_data"
if(json_data != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"json_data"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.quota = json_data.quota.equals("NULL")?"":json_data.quota ;
Var.datastart = json_data.datastart == null?TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS","9999-12-31 00:00:00.000") :TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS",TalendDate.formatDate("yyyy-MM-dd HH:mm:ss.SSS",json_data.datastart)) ;
Var.datastop = json_data.datastop == null?TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS","9999-12-31 00:00:00.000") :TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS",TalendDate.formatDate("yyyy-MM-dd HH:mm:ss.SSS",json_data.datastop)) ;
Var.coordinate = "("+json_data.lat + ", " + json_data.lng + ")" ;// ###############################
        // ###############################
        // # Output tables

sorgente = null;


// # Output table : 'sorgente'
sorgente_tmp.idsensore = json_data.idsensore ;
sorgente_tmp.nometiposensore = json_data.nometiposensore ;
sorgente_tmp.unitamisura = json_data.unitamisura ;
sorgente_tmp.idstazione = json_data.idstazione ;
sorgente_tmp.nomestazione = json_data.nomestazione ;
sorgente_tmp.quota = Var.quota ;
sorgente_tmp.provincia = json_data.provincia ;
sorgente_tmp.comune = json_data.comune ;
sorgente_tmp.storico = json_data.storico ;
sorgente_tmp.datastart = Var.datastart ;
sorgente_tmp.datastop = Var.datastop ;
sorgente_tmp.utm_nord = json_data.utm_nord ;
sorgente_tmp.utm_est = json_data.utm_est ;
sorgente_tmp.lat = json_data.lat ;
sorgente_tmp.lng = json_data.lng ;
sorgente_tmp.coordinate = Var.coordinate ;
sorgente = sorgente_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "sorgente"
if(sorgente != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"sorgente"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "target" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooptarget = false;
       		  	    	
       		  	    	
 							targetStruct targetObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
	                        		    	Object exprKeyValue_target__idsensore = sorgente.idsensore ;
	                        		    	if(exprKeyValue_target__idsensore == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_2 = true;
	                        		    	} else {
                        		    			targetHashKey.idsensore = (int)(Integer) exprKeyValue_target__idsensore;
                        		    		}
                        		    		
                        		    		    targetHashKey.datastart = sorgente.datastart == null ? null : new java.util.Date(sorgente.datastart.getTime());
                        		    		

								
		                        	targetHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_target.lookup( targetHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_2 || !tHash_Lookup_target.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_target != null && tHash_Lookup_target.getCount(targetHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'target' and it contains more one result from keys :  target.idsensore = '" + targetHashKey.idsensore + "', target.datastart = '" + targetHashKey.datastart + "'");
								} // G 071
							

							targetStruct target = null;
                    		  	 
							   
                    		  	 
	       		  	    	targetStruct fromLookup_target = null;
							target = targetDefault;
										 
							
								 
							
							
								if (tHash_Lookup_target !=null && tHash_Lookup_target.hasNext()) { // G 099
								
							
								
								fromLookup_target = tHash_Lookup_target.next();

							
							
								} // G 099
							
							

							if(fromLookup_target != null) {
								target = fromLookup_target;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.update = sorgente.storico.equals("S")  &&
(!sorgente.datastop.equals(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS", "9999-12-31 00:00:00.000")) && TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS", "9999-12-31 00:00:00.000").equals(target.datastop))&&
(!sorgente.nometiposensore.equals(target.nometiposensore)||
!sorgente.unitamisura.equals(target.unitamisura)||
!sorgente.idstazione.equals(target.idstazione)||
!sorgente.nomestazione.equals(target.nomestazione)|| 
!sorgente.quota.equals(target.quota)|| 
!sorgente.provincia.equals(target.provincia)|| 
!sorgente.comune.equals(target.comune)||  
!sorgente.datastart.equals(target.datastart)||
!sorgente.utm_nord.equals(target.utm_nord)|| 
!sorgente.utm_est.equals(target.utm_est)||
!sorgente.lat.equals(target.lat)|| 
!sorgente.lng.equals(target.lng) ) ;// ###############################
        // ###############################
        // # Output tables

NOT_INSERT = null;
INSERTS = null;
issues = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'NOT_INSERT'
NOT_INSERT_tmp.idsensore = sorgente.idsensore ;
NOT_INSERT_tmp.nometiposensore = sorgente.nometiposensore ;
NOT_INSERT_tmp.unitamisura = sorgente.unitamisura ;
NOT_INSERT_tmp.idstazione = sorgente.idstazione ;
NOT_INSERT_tmp.nomestazione = sorgente.nomestazione ;
NOT_INSERT_tmp.quota = sorgente.quota ;
NOT_INSERT_tmp.provincia = sorgente.provincia ;
NOT_INSERT_tmp.comune = sorgente.comune ;
NOT_INSERT_tmp.storico = sorgente.storico ;
NOT_INSERT_tmp.datastart = sorgente.datastart ;
NOT_INSERT_tmp.datastop = sorgente.datastop ;
NOT_INSERT_tmp.utm_nord = sorgente.utm_nord ;
NOT_INSERT_tmp.utm_est = sorgente.utm_est ;
NOT_INSERT_tmp.lat = sorgente.lat ;
NOT_INSERT_tmp.lng = sorgente.lng ;
NOT_INSERT_tmp.coordinate = sorgente.coordinate ;
NOT_INSERT_tmp.update = Var.update ;
NOT_INSERT = NOT_INSERT_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'INSERTS'
// # Filter conditions 
if( rejectedInnerJoin_tMap_2 ) {
INSERTS_tmp.idsensore = sorgente.idsensore ;
INSERTS_tmp.nometiposensore = sorgente.nometiposensore ;
INSERTS_tmp.unitamisura = sorgente.unitamisura ;
INSERTS_tmp.idstazione = sorgente.idstazione ;
INSERTS_tmp.nomestazione = sorgente.nomestazione ;
INSERTS_tmp.quota = sorgente.quota ;
INSERTS_tmp.provincia = sorgente.provincia ;
INSERTS_tmp.comune = sorgente.comune ;
INSERTS_tmp.storico = sorgente.storico ;
INSERTS_tmp.datastart = sorgente.datastart ;
INSERTS_tmp.datastop = sorgente.datastop ;
INSERTS_tmp.utm_nord = sorgente.utm_nord ;
INSERTS_tmp.utm_est = sorgente.utm_est ;
INSERTS_tmp.lat = sorgente.lat ;
INSERTS_tmp.lng = sorgente.lng ;
INSERTS_tmp.coordinate = sorgente.coordinate ;
INSERTS = INSERTS_tmp;
} // closing filter/reject

// # Output reject table : 'issues'
// # Filter conditions 
if( rejectedInnerJoin_tMap_2 ) {
issues_tmp.storico = sorgente.storico ;
issues_tmp.datastop = sorgente.datastop ;
issues = issues_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "INSERTS"
if(INSERTS != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"INSERTS"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[16];
   				
	    		if(INSERTS.idsensore != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(INSERTS.idsensore)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.nometiposensore != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(INSERTS.nometiposensore)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.unitamisura != null) { //              
                 row_tLogRow_2[2]=    						    
				                String.valueOf(INSERTS.unitamisura)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.idstazione != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(INSERTS.idstazione)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.nomestazione != null) { //              
                 row_tLogRow_2[4]=    						    
				                String.valueOf(INSERTS.nomestazione)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.quota != null) { //              
                 row_tLogRow_2[5]=    						    
				                String.valueOf(INSERTS.quota)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.provincia != null) { //              
                 row_tLogRow_2[6]=    						    
				                String.valueOf(INSERTS.provincia)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.comune != null) { //              
                 row_tLogRow_2[7]=    						    
				                String.valueOf(INSERTS.comune)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.storico != null) { //              
                 row_tLogRow_2[8]=    						    
				                String.valueOf(INSERTS.storico)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.datastart != null) { //              
                 row_tLogRow_2[9]=    						
								FormatterUtils.format_Date(INSERTS.datastart, "yyyy-MM-dd HH:mm:ss.SSS")
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.datastop != null) { //              
                 row_tLogRow_2[10]=    						
								FormatterUtils.format_Date(INSERTS.datastop, "yyyy-MM-dd HH:mm:ss.SSS")
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.utm_nord != null) { //              
                 row_tLogRow_2[11]=    						    
				                String.valueOf(INSERTS.utm_nord)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.utm_est != null) { //              
                 row_tLogRow_2[12]=    						    
				                String.valueOf(INSERTS.utm_est)			
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.lat != null) { //              
                 row_tLogRow_2[13]=    						
								FormatterUtils.formatUnwithE(INSERTS.lat)
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.lng != null) { //              
                 row_tLogRow_2[14]=    						
								FormatterUtils.formatUnwithE(INSERTS.lng)
					          ;	
							
	    		} //			
    			   				
	    		if(INSERTS.coordinate != null) { //              
                 row_tLogRow_2[15]=    						    
				                String.valueOf(INSERTS.coordinate)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     to_convert = INSERTS;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_2 main ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"to_convert"
						
						);
					}
					


  to_insert = new to_insertStruct();
  boolean bHasError_tConvertType_2 = false;             
          try {
              to_insert.idsensore=TypeConvert.Integer2Integer(to_convert.idsensore);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(to_convert.nometiposensore)){  
                to_convert.nometiposensore = null;
              }
              to_insert.nometiposensore=TypeConvert.String2String(to_convert.nometiposensore);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(to_convert.unitamisura)){  
                to_convert.unitamisura = null;
              }
              to_insert.unitamisura=TypeConvert.String2String(to_convert.unitamisura);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              to_insert.idstazione=TypeConvert.Integer2Integer(to_convert.idstazione);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(to_convert.nomestazione)){  
                to_convert.nomestazione = null;
              }
              to_insert.nomestazione=TypeConvert.String2String(to_convert.nomestazione);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(to_convert.quota)){  
                to_convert.quota = null;
              }
              to_insert.quota=TypeConvert.String2Integer(to_convert.quota);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(to_convert.provincia)){  
                to_convert.provincia = null;
              }
              to_insert.provincia=TypeConvert.String2String(to_convert.provincia);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(to_convert.comune)){  
                to_convert.comune = null;
              }
              to_insert.comune=TypeConvert.String2String(to_convert.comune);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(to_convert.storico)){  
                to_convert.storico = null;
              }
              to_insert.storico=TypeConvert.String2String(to_convert.storico);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              to_insert.datastart=TypeConvert.Date2Date(to_convert.datastart);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              to_insert.datastop=TypeConvert.Date2Date(to_convert.datastop);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              to_insert.utm_nord=TypeConvert.Integer2Integer(to_convert.utm_nord);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              to_insert.utm_est=TypeConvert.Integer2Integer(to_convert.utm_est);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              to_insert.lat=TypeConvert.Float2Float(to_convert.lat);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              to_insert.lng=TypeConvert.Float2Float(to_convert.lng);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(to_convert.coordinate)){  
                to_convert.coordinate = null;
              }
              to_insert.coordinate=TypeConvert.String2String(to_convert.coordinate);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_2) {to_insert = null;}

  nb_line_tConvertType_2 ++ ;

 


	tos_count_tConvertType_2++;

/**
 * [tConvertType_2 main ] stop
 */
	
	/**
	 * [tConvertType_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	

 



/**
 * [tConvertType_2 process_data_begin ] stop
 */
// Start of branch "to_insert"
if(to_insert != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"to_insert"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(to_insert.idsensore == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(1, to_insert.idsensore);
}

                    if(to_insert.nometiposensore == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, to_insert.nometiposensore);
}

                    if(to_insert.unitamisura == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, to_insert.unitamisura);
}

                    if(to_insert.idstazione == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(4, to_insert.idstazione);
}

                    if(to_insert.nomestazione == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, to_insert.nomestazione);
}

                    if(to_insert.quota == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(6, to_insert.quota);
}

                    if(to_insert.provincia == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, to_insert.provincia);
}

                    if(to_insert.comune == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, to_insert.comune);
}

                    if(to_insert.storico == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, to_insert.storico);
}

                    if(to_insert.datastart != null) {
pstmt_tDBOutput_1.setTimestamp(10, new java.sql.Timestamp(to_insert.datastart.getTime()));
} else {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.TIMESTAMP);
}

                    if(to_insert.datastop != null) {
pstmt_tDBOutput_1.setTimestamp(11, new java.sql.Timestamp(to_insert.datastop.getTime()));
} else {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.TIMESTAMP);
}

                    if(to_insert.utm_nord == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(12, to_insert.utm_nord);
}

                    if(to_insert.utm_est == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(13, to_insert.utm_est);
}

                    if(to_insert.lat == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_1.setFloat(14, to_insert.lat);
}

                    if(to_insert.lng == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_1.setFloat(15, to_insert.lng);
}

                    if(to_insert.coordinate == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, to_insert.coordinate);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    		if (ne_tDBOutput_1 != null) {
				    			throw(sqle_tDBOutput_1);
				    		}else{
				            	throw(e_tDBOutput_1);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "to_insert"




	
	/**
	 * [tConvertType_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	

 



/**
 * [tConvertType_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "INSERTS"




// Start of branch "issues"
if(issues != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"issues"
						
						);
					}
					

          filtered_issues = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
      ope_tFilterRow_1.matches((// code sample : use issues to define the condition.
// issues.columnName1.equals("foo") ||!(issues.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
issues.storico.equals("S") && issues.datastop.equals(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS","9999-12-31 00:00:00.000"))
			), "advanced condition failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(filtered_issues == null){ 
                filtered_issues = new filtered_issuesStruct();
              }
               filtered_issues.storico = issues.storico;
               filtered_issues.datastop = issues.datastop;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "filtered_issues"
if(filtered_issues != null) { 



	
	/**
	 * [tFlowMeter_30 main ] start
	 */

	

	
	
	currentComponent="tFlowMeter_30";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"filtered_issues"
						
						);
					}
					

    count_tFlowMeter_30++; 
 


	tos_count_tFlowMeter_30++;

/**
 * [tFlowMeter_30 main ] stop
 */
	
	/**
	 * [tFlowMeter_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeter_30";

	

 



/**
 * [tFlowMeter_30 process_data_begin ] stop
 */
	
	/**
	 * [tFlowMeter_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_30";

	

 



/**
 * [tFlowMeter_30 process_data_end ] stop
 */

} // End of branch "filtered_issues"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "issues"




// Start of branch "NOT_INSERT"
if(NOT_INSERT != null) { 



	
	/**
	 * [tConvertType_1 main ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"NOT_INSERT"
						
						);
					}
					


  converted = new convertedStruct();
  boolean bHasError_tConvertType_1 = false;             
          try {
              converted.idsensore=TypeConvert.Integer2Integer(NOT_INSERT.idsensore);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(NOT_INSERT.nometiposensore)){  
                NOT_INSERT.nometiposensore = null;
              }
              converted.nometiposensore=TypeConvert.String2String(NOT_INSERT.nometiposensore);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(NOT_INSERT.unitamisura)){  
                NOT_INSERT.unitamisura = null;
              }
              converted.unitamisura=TypeConvert.String2String(NOT_INSERT.unitamisura);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              converted.idstazione=TypeConvert.Integer2Integer(NOT_INSERT.idstazione);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(NOT_INSERT.nomestazione)){  
                NOT_INSERT.nomestazione = null;
              }
              converted.nomestazione=TypeConvert.String2String(NOT_INSERT.nomestazione);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(NOT_INSERT.quota)){  
                NOT_INSERT.quota = null;
              }
              converted.quota=TypeConvert.String2Integer(NOT_INSERT.quota);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(NOT_INSERT.provincia)){  
                NOT_INSERT.provincia = null;
              }
              converted.provincia=TypeConvert.String2String(NOT_INSERT.provincia);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(NOT_INSERT.comune)){  
                NOT_INSERT.comune = null;
              }
              converted.comune=TypeConvert.String2String(NOT_INSERT.comune);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(NOT_INSERT.storico)){  
                NOT_INSERT.storico = null;
              }
              converted.storico=TypeConvert.String2String(NOT_INSERT.storico);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              converted.datastart=TypeConvert.Date2Date(NOT_INSERT.datastart);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              converted.datastop=TypeConvert.Date2Date(NOT_INSERT.datastop);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              converted.utm_nord=TypeConvert.Integer2Integer(NOT_INSERT.utm_nord);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              converted.utm_est=TypeConvert.Integer2Integer(NOT_INSERT.utm_est);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              converted.lat=TypeConvert.Float2Float(NOT_INSERT.lat);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              converted.lng=TypeConvert.Float2Float(NOT_INSERT.lng);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(NOT_INSERT.coordinate)){  
                NOT_INSERT.coordinate = null;
              }
              converted.coordinate=TypeConvert.String2String(NOT_INSERT.coordinate);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              converted.update=TypeConvert.boolean2Boolean(NOT_INSERT.update);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_1) {converted = null;}

  nb_line_tConvertType_1 ++ ;

 


	tos_count_tConvertType_1++;

/**
 * [tConvertType_1 main ] stop
 */
	
	/**
	 * [tConvertType_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 process_data_begin ] stop
 */
// Start of branch "converted"
if(converted != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"converted"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

to_update = null;


// # Output table : 'to_update'
// # Filter conditions 
if( 

converted.update == true

 ) {
to_update_tmp.idsensore = converted.idsensore ;
to_update_tmp.nometiposensore = converted.nometiposensore ;
to_update_tmp.unitamisura = converted.unitamisura ;
to_update_tmp.idstazione = converted.idstazione ;
to_update_tmp.nomestazione = converted.nomestazione ;
to_update_tmp.quota = converted.quota ;
to_update_tmp.provincia = converted.provincia ;
to_update_tmp.comune = converted.comune ;
to_update_tmp.storico = converted.storico ;
to_update_tmp.datastart = converted.datastart ;
to_update_tmp.datastop = converted.datastop ;
to_update_tmp.utm_nord = converted.utm_nord ;
to_update_tmp.utm_est = converted.utm_est ;
to_update_tmp.lat = converted.lat ;
to_update_tmp.lng = converted.lng ;
to_update_tmp.coordinate = converted.coordinate ;
to_update = to_update_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "to_update"
if(to_update != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"to_update"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(to_update.nometiposensore == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, to_update.nometiposensore);
}

                    if(to_update.unitamisura == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, to_update.unitamisura);
}

                    if(to_update.idstazione == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(3, to_update.idstazione);
}

                    if(to_update.nomestazione == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, to_update.nomestazione);
}

                    if(to_update.quota == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(5, to_update.quota);
}

                    if(to_update.provincia == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, to_update.provincia);
}

                    if(to_update.comune == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, to_update.comune);
}

                    if(to_update.storico == null) {
pstmt_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(8, to_update.storico);
}

                    if(to_update.datastop != null) {
pstmt_tDBOutput_3.setTimestamp(9, new java.sql.Timestamp(to_update.datastop.getTime()));
} else {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.TIMESTAMP);
}

                    if(to_update.utm_nord == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(10, to_update.utm_nord);
}

                    if(to_update.utm_est == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(11, to_update.utm_est);
}

                    if(to_update.lat == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_3.setFloat(12, to_update.lat);
}

                    if(to_update.lng == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_3.setFloat(13, to_update.lng);
}

                    if(to_update.coordinate == null) {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(14, to_update.coordinate);
}

                    if(to_update.idsensore == null) {
pstmt_tDBOutput_3.setNull(15 + count_tDBOutput_3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(15 + count_tDBOutput_3, to_update.idsensore);
}


                    if(to_update.datastart != null) {
pstmt_tDBOutput_3.setTimestamp(16 + count_tDBOutput_3, new java.sql.Timestamp(to_update.datastart.getTime()));
} else {
pstmt_tDBOutput_3.setNull(16 + count_tDBOutput_3, java.sql.Types.TIMESTAMP);
}


    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    		if (ne_tDBOutput_3 != null) {
				    			throw(sqle_tDBOutput_3);
				    		}else{
				            	throw(e_tDBOutput_3);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "to_update"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "converted"




	
	/**
	 * [tConvertType_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 process_data_end ] stop
 */

} // End of branch "NOT_INSERT"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sorgente"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "json_data"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_end ] stop
 */



	
	/**
	 * [tREST_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 



/**
 * [tREST_1 process_data_end ] stop
 */
	
	/**
	 * [tREST_1 end ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 

ok_Hash.put("tREST_1", true);
end_Hash.put("tREST_1", System.currentTimeMillis());




/**
 * [tREST_1 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
   globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"api_data");
			  	}
			  	
 

ok_Hash.put("tExtractJSONFields_1", true);
end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());




/**
 * [tExtractJSONFields_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"json_data");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_target != null) {
						tHash_Lookup_target.endGet();
					}
					globalMap.remove( "tHash_Lookup_target" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sorgente");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"INSERTS");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tConvertType_2 end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	
      globalMap.put("tConvertType_2_NB_LINE", nb_line_tConvertType_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"to_convert");
			  	}
			  	
 

ok_Hash.put("tConvertType_2", true);
end_Hash.put("tConvertType_2", System.currentTimeMillis());




/**
 * [tConvertType_2 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    		if (ne_tDBOutput_1 != null) {
	    			throw(sqle_tDBOutput_1);
	    		}else{
	            	throw(e_tDBOutput_1);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"to_insert");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */










	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"issues");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tFlowMeter_30 end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_30";

	

	tFlowMeterCatcher_1.addMessage("Issues ", new Integer(count_tFlowMeter_30), "null", "", "tFlowMeter_30");

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"filtered_issues");
			  	}
			  	
 

ok_Hash.put("tFlowMeter_30", true);
end_Hash.put("tFlowMeter_30", System.currentTimeMillis());




/**
 * [tFlowMeter_30 end ] stop
 */







	
	/**
	 * [tConvertType_1 end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	
      globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"NOT_INSERT");
			  	}
			  	
 

ok_Hash.put("tConvertType_1", true);
end_Hash.put("tConvertType_1", System.currentTimeMillis());




/**
 * [tConvertType_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"converted");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				}
		    	
		    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    		if (ne_tDBOutput_3 != null) {
	    			throw(sqle_tDBOutput_3);
	    		}else{
	            	throw(e_tDBOutput_3);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"to_update");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */


















				}//end the resume

				
							tFlowMeterCatcher_1Process(globalMap);
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_target"); 
				     			
				try{
					
	
	/**
	 * [tREST_1 finally ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 



/**
 * [tREST_1 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tConvertType_2 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_2";

	

 



/**
 * [tConvertType_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */










	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tFlowMeter_30 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeter_30";

	

 



/**
 * [tFlowMeter_30 finally ] stop
 */







	
	/**
	 * [tConvertType_1 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tREST_1_SUBPROCESS_STATE", 1);
	}
	


public static class target_Struct implements routines.system.IPersistableComparableLookupRow<target_Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Integer idstazione;

				public Integer getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public String quota;

				public String getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Float lat;

				public Float getLat () {
					return this.lat;
				}
				
			    public Float lng;

				public Float getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
						result = prime * result + ((this.datastart == null) ? 0 : this.datastart.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final target_Struct other = (target_Struct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					
						if (this.datastart == null) {
							if (other.datastart != null)
								return false;
						
						} else if (!this.datastart.equals(other.datastart))
						
							return false;
					

		return true;
    }

	public void copyDataTo(target_Struct other) {

		other.idsensore = this.idsensore;
	            other.nometiposensore = this.nometiposensore;
	            other.unitamisura = this.unitamisura;
	            other.idstazione = this.idstazione;
	            other.nomestazione = this.nomestazione;
	            other.quota = this.quota;
	            other.provincia = this.provincia;
	            other.comune = this.comune;
	            other.storico = this.storico;
	            other.datastart = this.datastart;
	            other.datastop = this.datastop;
	            other.utm_nord = this.utm_nord;
	            other.utm_est = this.utm_est;
	            other.lat = this.lat;
	            other.lng = this.lng;
	            other.coordinate = this.coordinate;
	            
	}

	public void copyKeysDataTo(target_Struct other) {

		other.idsensore = this.idsensore;
	            	other.datastart = this.datastart;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.datastart = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.datastart = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nometiposensore = readString(dis,ois);
					
						this.unitamisura = readString(dis,ois);
					
						this.idstazione = readInteger(dis,ois);
					
						this.nomestazione = readString(dis,ois);
					
						this.quota = readString(dis,ois);
					
						this.provincia = readString(dis,ois);
					
						this.comune = readString(dis,ois);
					
						this.storico = readString(dis,ois);
					
						this.datastop = readDate(dis,ois);
					
						this.utm_nord = readInteger(dis,ois);
					
						this.utm_est = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
						this.coordinate = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.nometiposensore = readString(dis,objectIn);
					
						this.unitamisura = readString(dis,objectIn);
					
						this.idstazione = readInteger(dis,objectIn);
					
						this.nomestazione = readString(dis,objectIn);
					
						this.quota = readString(dis,objectIn);
					
						this.provincia = readString(dis,objectIn);
					
						this.comune = readString(dis,objectIn);
					
						this.storico = readString(dis,objectIn);
					
						this.datastop = readDate(dis,objectIn);
					
						this.utm_nord = readInteger(dis,objectIn);
					
						this.utm_est = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = objectIn.readFloat();
           				}
					
						this.coordinate = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nometiposensore, dos, oos);
					
						writeString(this.unitamisura, dos, oos);
					
					writeInteger(this.idstazione, dos, oos);
					
						writeString(this.nomestazione, dos, oos);
					
						writeString(this.quota, dos, oos);
					
						writeString(this.provincia, dos, oos);
					
						writeString(this.comune, dos, oos);
					
						writeString(this.storico, dos, oos);
					
						writeDate(this.datastop, dos, oos);
					
					writeInteger(this.utm_nord, dos, oos);
					
					writeInteger(this.utm_est, dos, oos);
					
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
						writeString(this.coordinate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.nometiposensore, dos, objectOut);
					
						writeString(this.unitamisura, dos, objectOut);
					
					writeInteger(this.idstazione, dos, objectOut);
					
						writeString(this.nomestazione, dos, objectOut);
					
						writeString(this.quota, dos, objectOut);
					
						writeString(this.provincia, dos, objectOut);
					
						writeString(this.comune, dos, objectOut);
					
						writeString(this.storico, dos, objectOut);
					
						writeDate(this.datastop, dos, objectOut);
					
					writeInteger(this.utm_nord, dos, objectOut);
					
					writeInteger(this.utm_est, dos, objectOut);
					
						if(this.lat == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.lat);
		            	}
					
						if(this.lng == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.lng);
		            	}
					
						writeString(this.coordinate, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+quota);
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(target_Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.datastart, other.datastart);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class data_jsonStruct implements routines.system.IPersistableRow<data_jsonStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Integer idstazione;

				public Integer getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public String quota;

				public String getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Float lat;

				public Float getLat () {
					return this.lat;
				}
				
			    public Float lng;

				public Float getLng () {
					return this.lng;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
					this.quota = readString(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// String
				
						writeString(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Float
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lat);
		            	}
					
					// Float
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.lng);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+quota);
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(data_jsonStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class data_apiStruct implements routines.system.IPersistableRow<data_apiStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}
				
			    public Integer ERROR_CODE;

				public Integer getERROR_CODE () {
					return this.ERROR_CODE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
		sb.append(",ERROR_CODE="+String.valueOf(ERROR_CODE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(data_apiStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tREST_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tREST_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		data_apiStruct data_api = new data_apiStruct();
data_jsonStruct data_json = new data_jsonStruct();
target_Struct target_ = new target_Struct();






	
	/**
	 * [tAdvancedHash_target_ begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_target_", false);
		start_Hash.put("tAdvancedHash_target_", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_target_";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"target_");
					}
				
		int tos_count_tAdvancedHash_target_ = 0;
		

			   		// connection name:target_
			   		// source node:tMap_7 - inputs:(data_json) outputs:(target_,target_) | target node:tAdvancedHash_target_ - inputs:(target_) outputs:()
			   		// linked node: tMap_6 - inputs:(sorgente_,target_) outputs:(DELETED)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_target_ = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<target_Struct> tHash_Lookup_target_ =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<target_Struct>getLookup(matchingModeEnum_target_);
	   						   
		   	   	   globalMap.put("tHash_Lookup_target_", tHash_Lookup_target_);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_target_ begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"data_json");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
	String quota;
	java.util.Date datastart;
	java.util.Date datastop;
	String coordinate;
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
target_Struct target__tmp = new target_Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_4", false);
		start_Hash.put("tExtractJSONFields_4", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"data_api");
					}
				
		int tos_count_tExtractJSONFields_4 = 0;
		

int nb_line_tExtractJSONFields_4 = 0;
String jsonStr_tExtractJSONFields_4 = "";

	

class JsonPathCache_tExtractJSONFields_4 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_4 jsonPathCache_tExtractJSONFields_4 = new JsonPathCache_tExtractJSONFields_4();

 



/**
 * [tExtractJSONFields_4 begin ] stop
 */



	
	/**
	 * [tREST_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tREST_4", false);
		start_Hash.put("tREST_4", System.currentTimeMillis());
		
	
	currentComponent="tREST_4";

	
		int tos_count_tREST_4 = 0;
		
	

	
	String endpoint_tREST_4 = "https://www.dati.lombardia.it/resource/ib47-atvt.json";
	
	String trustStoreFile_tREST_4 = System.getProperty("javax.net.ssl.trustStore");
	String trustStoreType_tREST_4 = System.getProperty("javax.net.ssl.trustStoreType");
	String trustStorePWD_tREST_4 = System.getProperty("javax.net.ssl.trustStorePassword");
	
	String keyStoreFile_tREST_4 = System.getProperty("javax.net.ssl.keyStore");
	String keyStoreType_tREST_4 = System.getProperty("javax.net.ssl.keyStoreType");
	String keyStorePWD_tREST_4 = System.getProperty("javax.net.ssl.keyStorePassword");
	
	com.sun.jersey.api.client.config.ClientConfig config_tREST_4 = new com.sun.jersey.api.client.config.DefaultClientConfig();
	javax.net.ssl.SSLContext ctx_tREST_4 = javax.net.ssl.SSLContext.getInstance("SSL");
	
	javax.net.ssl.TrustManager[] tms_tREST_4 = null;
	if(trustStoreFile_tREST_4!=null && trustStoreType_tREST_4!=null){
		char[] password_tREST_4 = null;
		if(trustStorePWD_tREST_4!=null)
			password_tREST_4 = trustStorePWD_tREST_4.toCharArray();
		java.security.KeyStore trustStore_tREST_4 = java.security.KeyStore.getInstance(trustStoreType_tREST_4);
		trustStore_tREST_4.load(new java.io.FileInputStream(trustStoreFile_tREST_4), password_tREST_4);
		
		javax.net.ssl.TrustManagerFactory tmf_tREST_4 = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        tmf_tREST_4.init(trustStore_tREST_4);
        tms_tREST_4 = tmf_tREST_4.getTrustManagers();
	}
	
	javax.net.ssl.KeyManager[] kms_tREST_4 = null;
	if(keyStoreFile_tREST_4!=null && keyStoreType_tREST_4!=null){
		char[] password_tREST_4 = null;
		if(keyStorePWD_tREST_4!=null)
			password_tREST_4 = keyStorePWD_tREST_4.toCharArray();
		java.security.KeyStore keyStore_tREST_4 = java.security.KeyStore.getInstance(keyStoreType_tREST_4);
		keyStore_tREST_4.load(new java.io.FileInputStream(keyStoreFile_tREST_4), password_tREST_4);
		
		javax.net.ssl.KeyManagerFactory kmf_tREST_4 = javax.net.ssl.KeyManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        kmf_tREST_4.init(keyStore_tREST_4,password_tREST_4);
        kms_tREST_4 = kmf_tREST_4.getKeyManagers();
	}
	
    ctx_tREST_4.init(kms_tREST_4, tms_tREST_4 , null);
    config_tREST_4.getProperties().put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
                new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

                    public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
                        return true;
                    }
                }, ctx_tREST_4));

	com.sun.jersey.api.client.Client restClient_tREST_4 = com.sun.jersey.api.client.Client.create(config_tREST_4);
	
	java.util.Map<String, Object> headers_tREST_4 = new java.util.HashMap<String, Object>();
	
	
	Object transfer_encoding_tREST_4 = headers_tREST_4.get("Transfer-Encoding");
	if(transfer_encoding_tREST_4!=null && "chunked".equals(transfer_encoding_tREST_4)) {
		restClient_tREST_4.setChunkedEncodingSize(4096);
	}
	
	com.sun.jersey.api.client.WebResource restResource_tREST_4;
	if(endpoint_tREST_4!=null && !("").equals(endpoint_tREST_4)){
		restResource_tREST_4 = restClient_tREST_4.resource(endpoint_tREST_4);
	}else{
		throw new IllegalArgumentException("url can't be empty!");
	}
	
	com.sun.jersey.api.client.ClientResponse errorResponse_tREST_4 = null;
	String restResponse_tREST_4 = "";
	try{
		
		com.sun.jersey.api.client.WebResource.Builder builder_tREST_4 = null;
		for(java.util.Map.Entry<String, Object> header_tREST_4 : headers_tREST_4.entrySet()) {
			if(builder_tREST_4 == null) {
				builder_tREST_4 = restResource_tREST_4.header(header_tREST_4.getKey(), header_tREST_4.getValue());
			} else {
				builder_tREST_4.header(header_tREST_4.getKey(), header_tREST_4.getValue());
			}
		}
		
		
			if(builder_tREST_4!=null) {
				restResponse_tREST_4 = builder_tREST_4.get(String.class);
			} else {
				restResponse_tREST_4 = restResource_tREST_4.get(String.class);
			} 
			
		
	}catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
globalMap.put("tREST_4_ERROR_MESSAGE",ue.getMessage());
        errorResponse_tREST_4 = ue.getResponse();
    }
	
	// for output
			
				data_api = new data_apiStruct();
				if(errorResponse_tREST_4!=null){
					data_api.ERROR_CODE = errorResponse_tREST_4.getStatus();
					if(data_api.ERROR_CODE!=204){
					    data_api.Body = errorResponse_tREST_4.getEntity(String.class);
					}
				}else{
					data_api.Body = restResponse_tREST_4;
				}
			

 



/**
 * [tREST_4 begin ] stop
 */
	
	/**
	 * [tREST_4 main ] start
	 */

	

	
	
	currentComponent="tREST_4";

	

 


	tos_count_tREST_4++;

/**
 * [tREST_4 main ] stop
 */
	
	/**
	 * [tREST_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tREST_4";

	

 



/**
 * [tREST_4 process_data_begin ] stop
 */

	
	/**
	 * [tExtractJSONFields_4 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"data_api"
						
						);
					}
					

            if(data_api.Body!=null){// C_01
                jsonStr_tExtractJSONFields_4 = data_api.Body.toString();
   
data_json = null;

	

String loopPath_tExtractJSONFields_4 = "$.[*]";
java.util.List<Object> resultset_tExtractJSONFields_4 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_4 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_4 = null;
try {
	document_tExtractJSONFields_4 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_4);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(loopPath_tExtractJSONFields_4);
	Object result_tExtractJSONFields_4 = document_tExtractJSONFields_4.read(compiledLoopPath_tExtractJSONFields_4,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_4 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_4 = (net.minidev.json.JSONArray) result_tExtractJSONFields_4;
	} else {
		resultset_tExtractJSONFields_4.add(result_tExtractJSONFields_4);
	}
	
	isStructError_tExtractJSONFields_4 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",ex_tExtractJSONFields_4.getMessage());
	throw(ex_tExtractJSONFields_4);
}

String jsonPath_tExtractJSONFields_4 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_4 = null;

Object value_tExtractJSONFields_4 = null;

Object root_tExtractJSONFields_4 = null;
for(int i_tExtractJSONFields_4=0; isStructError_tExtractJSONFields_4 || (i_tExtractJSONFields_4 < resultset_tExtractJSONFields_4.size());i_tExtractJSONFields_4++){
	if(!isStructError_tExtractJSONFields_4){
		Object row_tExtractJSONFields_4 = resultset_tExtractJSONFields_4.get(i_tExtractJSONFields_4);
            data_json = null;
	data_json = new data_jsonStruct();
	nb_line_tExtractJSONFields_4++;
	try {
		jsonPath_tExtractJSONFields_4 = "idsensore";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				if(value_tExtractJSONFields_4 != null && !value_tExtractJSONFields_4.toString().isEmpty()) {
					data_json.idsensore = ParserUtils.parseTo_Integer(value_tExtractJSONFields_4.toString());
				} else {
					data_json.idsensore = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.idsensore = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "nometiposensore";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				data_json.nometiposensore = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.nometiposensore = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "unitamisura";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				data_json.unitamisura = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.unitamisura = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "idstazione";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				if(value_tExtractJSONFields_4 != null && !value_tExtractJSONFields_4.toString().isEmpty()) {
					data_json.idstazione = ParserUtils.parseTo_Integer(value_tExtractJSONFields_4.toString());
				} else {
					data_json.idstazione = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.idstazione = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "nomestazione";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				data_json.nomestazione = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.nomestazione = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "quota";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				data_json.quota = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.quota = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "provincia";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				data_json.provincia = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.provincia = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "comune";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				data_json.comune = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.comune = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "storico";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				data_json.storico = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.storico = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "datastart";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				if(value_tExtractJSONFields_4 != null && !value_tExtractJSONFields_4.toString().isEmpty()) {
					data_json.datastart = ParserUtils.parseTo_Date(value_tExtractJSONFields_4.toString(), "yyyy-MM-dd'T'HH:mm:ss.SSS");
				} else {
					data_json.datastart = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.datastart = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "datastop";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				if(value_tExtractJSONFields_4 != null && !value_tExtractJSONFields_4.toString().isEmpty()) {
					data_json.datastop = ParserUtils.parseTo_Date(value_tExtractJSONFields_4.toString(), "yyyy-MM-dd'T'HH:mm:ss.SSS");
				} else {
					data_json.datastop = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.datastop = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "utm_nord";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				if(value_tExtractJSONFields_4 != null && !value_tExtractJSONFields_4.toString().isEmpty()) {
					data_json.utm_nord = ParserUtils.parseTo_Integer(value_tExtractJSONFields_4.toString());
				} else {
					data_json.utm_nord = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.utm_nord = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "utm_est";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				if(value_tExtractJSONFields_4 != null && !value_tExtractJSONFields_4.toString().isEmpty()) {
					data_json.utm_est = ParserUtils.parseTo_Integer(value_tExtractJSONFields_4.toString());
				} else {
					data_json.utm_est = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.utm_est = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "lat";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				if(value_tExtractJSONFields_4 != null && !value_tExtractJSONFields_4.toString().isEmpty()) {
					data_json.lat = ParserUtils.parseTo_Float(value_tExtractJSONFields_4.toString());
				} else {
					data_json.lat = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.lat = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "lng";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				if(value_tExtractJSONFields_4 != null && !value_tExtractJSONFields_4.toString().isEmpty()) {
					data_json.lng = ParserUtils.parseTo_Float(value_tExtractJSONFields_4.toString());
				} else {
					data_json.lng = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			data_json.lng = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",ex_tExtractJSONFields_4.getMessage());
    	throw(ex_tExtractJSONFields_4);	
	}
	
	}
    
	isStructError_tExtractJSONFields_4 = false;
	
//}


 


	tos_count_tExtractJSONFields_4++;

/**
 * [tExtractJSONFields_4 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_4";

	

 



/**
 * [tExtractJSONFields_4 process_data_begin ] stop
 */
// Start of branch "data_json"
if(data_json != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"data_json"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;
Var.quota = data_json.quota.equals("NULL")?"":data_json.quota ;
Var.datastart = data_json.datastart == null?TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS","9999-12-31 00:00:00.000") :TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS",TalendDate.formatDate("yyyy-MM-dd HH:mm:ss.SSS",data_json.datastart)) ;
Var.datastop = data_json.datastop == null?TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS","9999-12-31 00:00:00.000") :TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS",TalendDate.formatDate("yyyy-MM-dd HH:mm:ss.SSS",data_json.datastop)) ;
Var.coordinate = "("+data_json.lat + ", " + data_json.lng + ")" ;// ###############################
        // ###############################
        // # Output tables

target_ = null;


// # Output table : 'target_'
target__tmp.idsensore = data_json.idsensore ;
target__tmp.nometiposensore = data_json.nometiposensore ;
target__tmp.unitamisura = data_json.unitamisura ;
target__tmp.idstazione = data_json.idstazione ;
target__tmp.nomestazione = data_json.nomestazione ;
target__tmp.quota = Var.quota ;
target__tmp.provincia = data_json.provincia ;
target__tmp.comune = data_json.comune ;
target__tmp.storico = data_json.storico ;
target__tmp.datastart = Var.datastart ;
target__tmp.datastop = Var.datastop ;
target__tmp.utm_nord = data_json.utm_nord ;
target__tmp.utm_est = data_json.utm_est ;
target__tmp.lat = data_json.lat ;
target__tmp.lng = data_json.lng ;
target__tmp.coordinate = Var.coordinate ;
target_ = target__tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "target_"
if(target_ != null) { 



	
	/**
	 * [tAdvancedHash_target_ main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target_";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"target_"
						
						);
					}
					


			   
			   

					target_Struct target__HashRow = new target_Struct();
		   	   	   
				
				target__HashRow.idsensore = target_.idsensore;
				
				target__HashRow.nometiposensore = target_.nometiposensore;
				
				target__HashRow.unitamisura = target_.unitamisura;
				
				target__HashRow.idstazione = target_.idstazione;
				
				target__HashRow.nomestazione = target_.nomestazione;
				
				target__HashRow.quota = target_.quota;
				
				target__HashRow.provincia = target_.provincia;
				
				target__HashRow.comune = target_.comune;
				
				target__HashRow.storico = target_.storico;
				
				target__HashRow.datastart = target_.datastart;
				
				target__HashRow.datastop = target_.datastop;
				
				target__HashRow.utm_nord = target_.utm_nord;
				
				target__HashRow.utm_est = target_.utm_est;
				
				target__HashRow.lat = target_.lat;
				
				target__HashRow.lng = target_.lng;
				
				target__HashRow.coordinate = target_.coordinate;
				
			tHash_Lookup_target_.put(target__HashRow);
			
            




 


	tos_count_tAdvancedHash_target_++;

/**
 * [tAdvancedHash_target_ main ] stop
 */
	
	/**
	 * [tAdvancedHash_target_ process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target_";

	

 



/**
 * [tAdvancedHash_target_ process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_target_ process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target_";

	

 



/**
 * [tAdvancedHash_target_ process_data_end ] stop
 */

} // End of branch "target_"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "data_json"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_4";

	

 



/**
 * [tExtractJSONFields_4 process_data_end ] stop
 */



	
	/**
	 * [tREST_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tREST_4";

	

 



/**
 * [tREST_4 process_data_end ] stop
 */
	
	/**
	 * [tREST_4 end ] start
	 */

	

	
	
	currentComponent="tREST_4";

	

 

ok_Hash.put("tREST_4", true);
end_Hash.put("tREST_4", System.currentTimeMillis());




/**
 * [tREST_4 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_4 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_4";

	
   globalMap.put("tExtractJSONFields_4_NB_LINE", nb_line_tExtractJSONFields_4);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"data_api");
			  	}
			  	
 

ok_Hash.put("tExtractJSONFields_4", true);
end_Hash.put("tExtractJSONFields_4", System.currentTimeMillis());




/**
 * [tExtractJSONFields_4 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"data_json");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_target_ end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target_";

	

tHash_Lookup_target_.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"target_");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_target_", true);
end_Hash.put("tAdvancedHash_target_", System.currentTimeMillis());




/**
 * [tAdvancedHash_target_ end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tREST_4 finally ] start
	 */

	

	
	
	currentComponent="tREST_4";

	

 



/**
 * [tREST_4 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_4 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_4";

	

 



/**
 * [tExtractJSONFields_4 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_target_ finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target_";

	

 



/**
 * [tAdvancedHash_target_ finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tREST_4_SUBPROCESS_STATE", 1);
	}
	


public static class num_issuesStruct implements routines.system.IPersistableRow<num_issuesStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(num_issuesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		num_issuesStruct num_issues = new num_issuesStruct();




	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"num_issues");
					}
				
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
         class Util_tLogRow_4 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[15];

        public void addRow(String[] row) {

            for (int i = 0; i < 15; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 14 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 14 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[14] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
        util_tLogRow_4.setTableName("ISSUES");
        util_tLogRow_4.addRow(new String[]{"moment","pid","father_pid","root_pid","system_pid","project","job","job_repository_id","job_version","context","origin","label","count","reference","thresholds",});        
 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		num_issues.pid = pid;
		num_issues.root_pid = rootPid;
		num_issues.father_pid = fatherPid;	
        num_issues.project = projectName;
        num_issues.job = jobName;
        num_issues.context = contextStr;
		num_issues.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		num_issues.moment = mcm.getMoment();
		num_issues.job_version = mcm.getJobVersion();
		num_issues.job_repository_id = mcm.getJobId();
		num_issues.system_pid = mcm.getSystemPid();
		num_issues.label = mcm.getLabel();
		num_issues.count = mcm.getCount();
		num_issues.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		num_issues.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"num_issues"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_4 = new String[15];
   				
	    		if(num_issues.moment != null) { //              
                 row_tLogRow_4[0]=    						
								FormatterUtils.format_Date(num_issues.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.pid != null) { //              
                 row_tLogRow_4[1]=    						    
				                String.valueOf(num_issues.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.father_pid != null) { //              
                 row_tLogRow_4[2]=    						    
				                String.valueOf(num_issues.father_pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.root_pid != null) { //              
                 row_tLogRow_4[3]=    						    
				                String.valueOf(num_issues.root_pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.system_pid != null) { //              
                 row_tLogRow_4[4]=    						    
				                String.valueOf(num_issues.system_pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.project != null) { //              
                 row_tLogRow_4[5]=    						    
				                String.valueOf(num_issues.project)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.job != null) { //              
                 row_tLogRow_4[6]=    						    
				                String.valueOf(num_issues.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.job_repository_id != null) { //              
                 row_tLogRow_4[7]=    						    
				                String.valueOf(num_issues.job_repository_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.job_version != null) { //              
                 row_tLogRow_4[8]=    						    
				                String.valueOf(num_issues.job_version)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.context != null) { //              
                 row_tLogRow_4[9]=    						    
				                String.valueOf(num_issues.context)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.origin != null) { //              
                 row_tLogRow_4[10]=    						    
				                String.valueOf(num_issues.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.label != null) { //              
                 row_tLogRow_4[11]=    						    
				                String.valueOf(num_issues.label)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.count != null) { //              
                 row_tLogRow_4[12]=    						    
				                String.valueOf(num_issues.count)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.reference != null) { //              
                 row_tLogRow_4[13]=    						    
				                String.valueOf(num_issues.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(num_issues.thresholds != null) { //              
                 row_tLogRow_4[14]=    						    
				                String.valueOf(num_issues.thresholds)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_4.addRow(row_tLogRow_4);	
				nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_4 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    
                    consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
                    consoleOut_tLogRow_4.flush();
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"num_issues");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());

   			if (num_issues.count > 0
) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tDBRow_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tLogRow_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
        resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);


 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

query_tDBRow_1 = "insert into stations_check\nselect idsensore, storico from stations where storico='S' and datastop='9999-12-31 00:00:00"
+".000'::timestamp;";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				globalMap.put("tDBRow_1_ERROR_MESSAGE", e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

	
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFileInputDelimited_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class get_table_nameStruct implements routines.system.IPersistableRow<get_table_nameStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public String tablename;

				public String getTablename () {
					return this.tablename;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.tablename = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.tablename = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tablename,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.tablename,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("tablename="+tablename);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(get_table_nameStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		get_table_nameStruct get_table_name = new get_table_nameStruct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"get_table_name");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = "C:/Users/giorg/OneDrive/Desktop/Final Thesis/ARPA_sensors/dati_stazioni/tablesNames.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("C:/Users/giorg/OneDrive/Desktop/Final Thesis/ARPA_sensors/dati_stazioni/tablesNames.txt", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						get_table_name = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									get_table_name = new get_table_nameStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							get_table_name.tablename = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					get_table_name = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "get_table_name"
if(get_table_name != null) { 



	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"get_table_name"
						
						);
					}
					


    	            
            globalMap.put("get_table_name.tablename", get_table_name.tablename);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("sens_data", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("stations_check", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("update", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tDBInput_3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("registerDate", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("critical_sensors", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("sorted", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("stations_check", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


String foo = "bar";
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

   			if (((Integer)globalMap.get("tFlowToIterate_1_CURRENT_ITERATION")) == 1 || ((Integer)globalMap.get("tDBInput_4_NB_LINE"))!=0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tDBInput_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tJava_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_1);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "get_table_name"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("C:/Users/giorg/OneDrive/Desktop/Final Thesis/ARPA_sensors/dati_stazioni/tablesNames.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"get_table_name");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class updateStruct implements routines.system.IPersistableRow<updateStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date ultima_acquisizione;

				public java.util.Date getUltima_acquisizione () {
					return this.ultima_acquisizione;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final updateStruct other = (updateStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					

		return true;
    }

	public void copyDataTo(updateStruct other) {

		other.idsensore = this.idsensore;
	            other.ultima_acquisizione = this.ultima_acquisizione;
	            other.datastop = this.datastop;
	            other.storico = this.storico;
	            
	}

	public void copyKeysDataTo(updateStruct other) {

		other.idsensore = this.idsensore;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.ultima_acquisizione = readDate(dis);
					
					this.datastop = readDate(dis);
					
					this.storico = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.ultima_acquisizione = readDate(dis);
					
					this.datastop = readDate(dis);
					
					this.storico = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// java.util.Date
				
						writeDate(this.ultima_acquisizione,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// String
				
						writeString(this.storico,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// java.util.Date
				
						writeDate(this.ultima_acquisizione,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// String
				
						writeString(this.storico,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",ultima_acquisizione="+String.valueOf(ultima_acquisizione));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",storico="+storico);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(updateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class registerDateStruct implements routines.system.IPersistableRow<registerDateStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date ultima_acquisizione;

				public java.util.Date getUltima_acquisizione () {
					return this.ultima_acquisizione;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final registerDateStruct other = (registerDateStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					

		return true;
    }

	public void copyDataTo(registerDateStruct other) {

		other.idsensore = this.idsensore;
	            other.ultima_acquisizione = this.ultima_acquisizione;
	            other.datastop = this.datastop;
	            other.storico = this.storico;
	            
	}

	public void copyKeysDataTo(registerDateStruct other) {

		other.idsensore = this.idsensore;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.ultima_acquisizione = readDate(dis);
					
					this.datastop = readDate(dis);
					
					this.storico = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.ultima_acquisizione = readDate(dis);
					
					this.datastop = readDate(dis);
					
					this.storico = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// java.util.Date
				
						writeDate(this.ultima_acquisizione,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// String
				
						writeString(this.storico,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// java.util.Date
				
						writeDate(this.ultima_acquisizione,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// String
				
						writeString(this.storico,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",ultima_acquisizione="+String.valueOf(ultima_acquisizione));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",storico="+storico);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(registerDateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public int idsensore;

				public int getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public java.util.Date ultima_acquisizione;

				public java.util.Date getUltima_acquisizione () {
					return this.ultima_acquisizione;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.dataora = readDate(dis);
					
					this.ultima_acquisizione = readDate(dis);
					
					this.datastop = readDate(dis);
					
					this.storico = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.dataora = readDate(dis);
					
					this.ultima_acquisizione = readDate(dis);
					
					this.datastop = readDate(dis);
					
					this.storico = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// java.util.Date
				
						writeDate(this.ultima_acquisizione,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// String
				
						writeString(this.storico,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// java.util.Date
				
						writeDate(this.ultima_acquisizione,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// String
				
						writeString(this.storico,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",ultima_acquisizione="+String.valueOf(ultima_acquisizione));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",storico="+storico);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortedStruct implements routines.system.IPersistableRow<sortedStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int idsensore;

				public int getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public java.util.Date ultima_acquisizione;

				public java.util.Date getUltima_acquisizione () {
					return this.ultima_acquisizione;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idsensore;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sortedStruct other = (sortedStruct) obj;
		
						if (this.idsensore != other.idsensore)
							return false;
					

		return true;
    }

	public void copyDataTo(sortedStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.ultima_acquisizione = this.ultima_acquisizione;
	            other.datastop = this.datastop;
	            other.storico = this.storico;
	            
	}

	public void copyKeysDataTo(sortedStruct other) {

		other.idsensore = this.idsensore;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.dataora = readDate(dis);
					
					this.ultima_acquisizione = readDate(dis);
					
					this.datastop = readDate(dis);
					
					this.storico = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.dataora = readDate(dis);
					
					this.ultima_acquisizione = readDate(dis);
					
					this.datastop = readDate(dis);
					
					this.storico = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// java.util.Date
				
						writeDate(this.ultima_acquisizione,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// String
				
						writeString(this.storico,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// java.util.Date
				
						writeDate(this.ultima_acquisizione,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// String
				
						writeString(this.storico,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",ultima_acquisizione="+String.valueOf(ultima_acquisizione));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",storico="+storico);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortedStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int idsensore;

				public int getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public java.util.Date ultima_acquisizione;

				public java.util.Date getUltima_acquisizione () {
					return this.ultima_acquisizione;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idsensore;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtSortRow_1 other = (OnRowsEndStructtSortRow_1) obj;
		
						if (this.idsensore != other.idsensore)
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtSortRow_1 other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.ultima_acquisizione = this.ultima_acquisizione;
	            other.datastop = this.datastop;
	            other.storico = this.storico;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtSortRow_1 other) {

		other.idsensore = this.idsensore;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.dataora = readDate(dis);
					
					this.ultima_acquisizione = readDate(dis);
					
					this.datastop = readDate(dis);
					
					this.storico = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.dataora = readDate(dis);
					
					this.ultima_acquisizione = readDate(dis);
					
					this.datastop = readDate(dis);
					
					this.storico = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// java.util.Date
				
						writeDate(this.ultima_acquisizione,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// String
				
						writeString(this.storico,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// java.util.Date
				
						writeDate(this.ultima_acquisizione,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// String
				
						writeString(this.storico,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",ultima_acquisizione="+String.valueOf(ultima_acquisizione));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",storico="+storico);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class critical_sensorsStruct implements routines.system.IPersistableRow<critical_sensorsStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int idsensore;

				public int getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public java.util.Date ultima_acquisizione;

				public java.util.Date getUltima_acquisizione () {
					return this.ultima_acquisizione;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idsensore;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final critical_sensorsStruct other = (critical_sensorsStruct) obj;
		
						if (this.idsensore != other.idsensore)
							return false;
					

		return true;
    }

	public void copyDataTo(critical_sensorsStruct other) {

		other.idsensore = this.idsensore;
	            other.dataora = this.dataora;
	            other.ultima_acquisizione = this.ultima_acquisizione;
	            other.datastop = this.datastop;
	            other.storico = this.storico;
	            
	}

	public void copyKeysDataTo(critical_sensorsStruct other) {

		other.idsensore = this.idsensore;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.dataora = readDate(dis);
					
					this.ultima_acquisizione = readDate(dis);
					
					this.datastop = readDate(dis);
					
					this.storico = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.dataora = readDate(dis);
					
					this.ultima_acquisizione = readDate(dis);
					
					this.datastop = readDate(dis);
					
					this.storico = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// java.util.Date
				
						writeDate(this.ultima_acquisizione,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// String
				
						writeString(this.storico,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// java.util.Date
				
						writeDate(this.ultima_acquisizione,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// String
				
						writeString(this.storico,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",ultima_acquisizione="+String.valueOf(ultima_acquisizione));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",storico="+storico);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(critical_sensorsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sens_dataStruct implements routines.system.IPersistableRow<sens_dataStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Double valore;

				public Double getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readDouble();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readDouble();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Double
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Double
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sens_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public java.util.Date dataora;

				public java.util.Date getDataora () {
					return this.dataora;
				}
				
			    public Double valore;

				public Double getValore () {
					return this.valore;
				}
				
			    public String stato;

				public String getStato () {
					return this.stato;
				}
				
			    public Integer idoperatore;

				public Integer getIdoperatore () {
					return this.idoperatore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readDouble();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
					this.dataora = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valore = null;
           				} else {
           			    	this.valore = dis.readDouble();
           				}
					
					this.stato = readString(dis);
					
						this.idoperatore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Double
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
					// java.util.Date
				
						writeDate(this.dataora,dos);
					
					// Double
				
						if(this.valore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.valore);
		            	}
					
					// String
				
						writeString(this.stato,dos);
					
					// Integer
				
						writeInteger(this.idoperatore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",dataora="+String.valueOf(dataora));
		sb.append(",valore="+String.valueOf(valore));
		sb.append(",stato="+stato);
		sb.append(",idoperatore="+String.valueOf(idoperatore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);

		sens_dataStruct sens_data = new sens_dataStruct();
critical_sensorsStruct critical_sensors = new critical_sensorsStruct();
sortedStruct sorted = new sortedStruct();
row9Struct row9 = new row9Struct();
registerDateStruct registerDate = new registerDateStruct();
registerDateStruct update = registerDate;





	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"critical_sensors");
					}
				
		int tos_count_tSortRow_1_SortOut = 0;
		


class Comparablecritical_sensorsStruct extends critical_sensorsStruct implements Comparable<Comparablecritical_sensorsStruct> {
	
	public int compareTo(Comparablecritical_sensorsStruct other) {

		if(this.idsensore != other.idsensore){
						
				return this.idsensore > other.idsensore ? 1 : -1;
							
		}
		if(this.dataora == null && other.dataora != null){
			return 1;
						
		}else if(this.dataora != null && other.dataora == null){
			return -1;
						
		}else if(this.dataora != null && other.dataora != null){
			if(!this.dataora.equals(other.dataora)){
				return other.dataora.compareTo(this.dataora);
			}
		}
		return 0;
	}
}

java.util.List<Comparablecritical_sensorsStruct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablecritical_sensorsStruct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sens_data");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stations_checkStruct> tHash_Lookup_stations_check = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stations_checkStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stations_checkStruct>) 
					globalMap.get( "tHash_Lookup_stations_check" ))
					;					
					
	

stations_checkStruct stations_checkHashKey = new stations_checkStruct();
stations_checkStruct stations_checkDefault = new stations_checkStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
critical_sensorsStruct critical_sensors_tmp = new critical_sensorsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "select * from "+((String)globalMap.get("get_table_name.tablename"));
		    

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								sens_data.idsensore = null;
							} else {
		                          
            sens_data.idsensore = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    sens_data.idsensore = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								sens_data.dataora = null;
							} else {
										
			sens_data.dataora = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 2);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								sens_data.valore = null;
							} else {
	                         		
            sens_data.valore = rs_tDBInput_3.getDouble(3);
            if(rs_tDBInput_3.wasNull()){
                    sens_data.valore = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								sens_data.stato = null;
							} else {
	                         		
        	sens_data.stato = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								sens_data.idoperatore = null;
							} else {
		                          
            sens_data.idoperatore = rs_tDBInput_3.getInt(5);
            if(rs_tDBInput_3.wasNull()){
                    sens_data.idoperatore = null;
            }
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"sens_data"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "stations_check" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopstations_check = false;
       		  	    	
       		  	    	
 							stations_checkStruct stations_checkObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    stations_checkHashKey.idsensore = sens_data.idsensore ;
                        		    		

								
		                        	stations_checkHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_stations_check.lookup( stations_checkHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_stations_check.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
	
		  								forceLoopstations_check = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopstations_check = true;
			           		  	} // G 21
                    		  	
                    		

							stations_checkStruct stations_check = null;
                    		  	 
							

								while ((tHash_Lookup_stations_check != null && tHash_Lookup_stations_check.hasNext()) || forceLoopstations_check) { // G_TM_M_043

								
									 // CALL close loop of lookup 'stations_check'
									
                    		  	 
							   
                    		  	 
	       		  	    	stations_checkStruct fromLookup_stations_check = null;
							stations_check = stations_checkDefault;
										 
							
								
								if(!forceLoopstations_check) { // G 46
								
							
								 
							
								
								fromLookup_stations_check = tHash_Lookup_stations_check.next();

							

							if(fromLookup_stations_check != null) {
								stations_check = fromLookup_stations_check;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopstations_check = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

critical_sensors = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'critical_sensors'
critical_sensors_tmp.idsensore = sens_data.idsensore ;
critical_sensors_tmp.dataora = sens_data.dataora ;
critical_sensors_tmp.ultima_acquisizione = stations_check.ultima_acquisizione ;
critical_sensors_tmp.datastop = stations_check.datastop ;
critical_sensors_tmp.storico = stations_check.storico ;
critical_sensors = critical_sensors_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "critical_sensors"
if(critical_sensors != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"critical_sensors"
						
						);
					}
					



	Comparablecritical_sensorsStruct arrayRowtSortRow_1_SortOut = new Comparablecritical_sensorsStruct();

	arrayRowtSortRow_1_SortOut.idsensore = critical_sensors.idsensore;
	arrayRowtSortRow_1_SortOut.dataora = critical_sensors.dataora;
	arrayRowtSortRow_1_SortOut.ultima_acquisizione = critical_sensors.ultima_acquisizione;
	arrayRowtSortRow_1_SortOut.datastop = critical_sensors.datastop;
	arrayRowtSortRow_1_SortOut.storico = critical_sensors.storico;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */

} // End of branch "critical_sensors"



	
		} // close loop of lookup 'stations_check' // G_TM_M_043
	
	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_stations_check != null) {
						tHash_Lookup_stations_check.endGet();
					}
					globalMap.remove( "tHash_Lookup_stations_check" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sens_data");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

critical_sensorsStruct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablecritical_sensorsStruct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"critical_sensors");
			  	}
			  	
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */





	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("stations_check");
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("stations_check");
}

        int updateKeyCount_tDBOutput_6 = 1;
        if(updateKeyCount_tDBOutput_6 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_6 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rowsToCommitCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	conn_tDBOutput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_6 = 10000;
   int batchSizeCounter_tDBOutput_6=0;

int count_tDBOutput_6=0;
	    String update_tDBOutput_6 = "UPDATE \"" + tableName_tDBOutput_6 + "\" SET \"ultima_acquisizione\" = ?,\"datastop\" = ?,\"storico\" = ? WHERE \"idsensore\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(update_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tLogRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_5", false);
		start_Hash.put("tLogRow_5", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"registerDate");
					}
				
		int tos_count_tLogRow_5 = 0;
		

	///////////////////////
	
         class Util_tLogRow_5 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[4];

        public void addRow(String[] row) {

            for (int i = 0; i < 4; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 3 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 3 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[3] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_5 util_tLogRow_5 = new Util_tLogRow_5();
        util_tLogRow_5.setTableName("SENSORS_CHECK");
        util_tLogRow_5.addRow(new String[]{"idsensore","ultima_acquisizione","datastop","storico",});        
 		StringBuilder strBuffer_tLogRow_5 = null;
		int nb_line_tLogRow_5 = 0;
///////////////////////    			



 



/**
 * [tLogRow_5 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
	java.util.Date datastop;
	String storico;
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
registerDateStruct registerDate_tmp = new registerDateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sorted");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					int idsensore;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
									result = prime * result + (int) this.idsensore;
									
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.idsensore != other.idsensore) 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	
		int tos_count_tSortRow_1_SortIn = 0;
		


critical_sensorsStruct[] array_tSortRow_1_SortIn = (critical_sensorsStruct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

critical_sensorsStruct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	sorted.idsensore = current_tSortRow_1_SortIn.idsensore;
	sorted.dataora = current_tSortRow_1_SortIn.dataora;
	sorted.ultima_acquisizione = current_tSortRow_1_SortIn.ultima_acquisizione;
	sorted.datastop = current_tSortRow_1_SortIn.datastop;
	sorted.storico = current_tSortRow_1_SortIn.storico;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"sorted"
						
						);
					}
					
row9 = null;			
finder_tUniqRow_1.idsensore = sorted.idsensore;	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
new_tUniqRow_1.idsensore = sorted.idsensore;
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row9 == null){ 
	
	row9 = new row9Struct();
}row9.idsensore = sorted.idsensore;			row9.dataora = sorted.dataora;			row9.ultima_acquisizione = sorted.ultima_acquisizione;			row9.datastop = sorted.datastop;			row9.storico = sorted.storico;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;
Var.datastop = Integer.parseInt(StringHandling.RIGHT((String)globalMap.get("get_table_name.tablename"),4))== 2022?
TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS", "9999-12-31 00:00:00.000"):
TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS", 
StringHandling.RIGHT((String)globalMap.get("get_table_name.tablename"),4)+"-12-31 12:00:00.000") ;
Var.storico = Var.datastop.equals(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss.SSS", "9999-12-31 00:00:00.000"))?"N": row9.storico ;// ###############################
        // ###############################
        // # Output tables

registerDate = null;


// # Output table : 'registerDate'
registerDate_tmp.idsensore = row9.idsensore ;
registerDate_tmp.ultima_acquisizione = row9.dataora ;
registerDate_tmp.datastop = Var.datastop ;
registerDate_tmp.storico =  Var.storico ;
registerDate = registerDate_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "registerDate"
if(registerDate != null) { 



	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"registerDate"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_5 = new String[4];
   				
	    		if(registerDate.idsensore != null) { //              
                 row_tLogRow_5[0]=    						    
				                String.valueOf(registerDate.idsensore)			
					          ;	
							
	    		} //			
    			   				
	    		if(registerDate.ultima_acquisizione != null) { //              
                 row_tLogRow_5[1]=    						
								FormatterUtils.format_Date(registerDate.ultima_acquisizione, "yyyy-MM-dd HH:mm:ss.SSS")
					          ;	
							
	    		} //			
    			   				
	    		if(registerDate.datastop != null) { //              
                 row_tLogRow_5[2]=    						
								FormatterUtils.format_Date(registerDate.datastop, "yyyy-MM-dd HH:mm:ss.SSS")
					          ;	
							
	    		} //			
    			   				
	    		if(registerDate.storico != null) { //              
                 row_tLogRow_5[3]=    						    
				                String.valueOf(registerDate.storico)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_5.addRow(row_tLogRow_5);	
				nb_line_tLogRow_5++;
//////

//////                    
                    
///////////////////////    			

 
     update = registerDate;


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update"
						
						);
					}
					



        whetherReject_tDBOutput_6 = false;
                    if(update.ultima_acquisizione != null) {
pstmt_tDBOutput_6.setTimestamp(1, new java.sql.Timestamp(update.ultima_acquisizione.getTime()));
} else {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(update.datastop != null) {
pstmt_tDBOutput_6.setTimestamp(2, new java.sql.Timestamp(update.datastop.getTime()));
} else {
pstmt_tDBOutput_6.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update.storico == null) {
pstmt_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(3, update.storico);
}

                    if(update.idsensore == null) {
pstmt_tDBOutput_6.setNull(4 + count_tDBOutput_6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_6.setInt(4 + count_tDBOutput_6, update.idsensore);
}


    		pstmt_tDBOutput_6.addBatch();
    		nb_line_tDBOutput_6++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_6++;
    		  
    			if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
						int countSum_tDBOutput_6 = 0;
						    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
				    	rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    		updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            	    	batchSizeCounter_tDBOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
				    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
				    	String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						}else{
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}
				    	
				    		if (ne_tDBOutput_6 != null) {
				    			throw(sqle_tDBOutput_6);
				    		}else{
				            	throw(e_tDBOutput_6);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */

} // End of branch "registerDate"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sorted");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tLogRow_5 end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_5 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_5);
                    }
                    
                    consoleOut_tLogRow_5.println(util_tLogRow_5.format().toString());
                    consoleOut_tLogRow_5.flush();
//////
globalMap.put("tLogRow_5_NB_LINE",nb_line_tLogRow_5);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"registerDate");
			  	}
			  	
 

ok_Hash.put("tLogRow_5", true);
end_Hash.put("tLogRow_5", System.currentTimeMillis());




/**
 * [tLogRow_5 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



	    try {
				int countSum_tDBOutput_6 = 0;
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						
					for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
						
				}
		    	
		    		updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
	    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
	    	String errormessage_tDBOutput_6;
			if (ne_tDBOutput_6 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
				errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
			}else{
				errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
			}
	    	
	    		if (ne_tDBOutput_6 != null) {
	    			throw(sqle_tDBOutput_6);
	    		}else{
	            	throw(e_tDBOutput_6);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_stations_check"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tLogRow_5 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class solve_issuesStruct implements routines.system.IPersistableRow<solve_issuesStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public long idsensore;

				public long getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Long idstazione;

				public Long getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public Long quota;

				public Long getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Long utm_nord;

				public Long getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Long utm_est;

				public Long getUtm_est () {
					return this.utm_est;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readLong();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idstazione = null;
           				} else {
           			    	this.idstazione = dis.readLong();
           				}
					
					this.nomestazione = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quota = null;
           				} else {
           			    	this.quota = dis.readLong();
           				}
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.utm_nord = null;
           				} else {
           			    	this.utm_nord = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.utm_est = null;
           				} else {
           			    	this.utm_est = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readLong();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idstazione = null;
           				} else {
           			    	this.idstazione = dis.readLong();
           				}
					
					this.nomestazione = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quota = null;
           				} else {
           			    	this.quota = dis.readLong();
           				}
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.utm_nord = null;
           				} else {
           			    	this.utm_nord = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.utm_est = null;
           				} else {
           			    	this.utm_est = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Long
				
						if(this.idstazione == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idstazione);
		            	}
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Long
				
						if(this.quota == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.quota);
		            	}
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Long
				
						if(this.utm_nord == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.utm_nord);
		            	}
					
					// Long
				
						if(this.utm_est == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.utm_est);
		            	}
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Long
				
						if(this.idstazione == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idstazione);
		            	}
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Long
				
						if(this.quota == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.quota);
		            	}
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Long
				
						if(this.utm_nord == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.utm_nord);
		            	}
					
					// Long
				
						if(this.utm_est == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.utm_est);
		            	}
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+String.valueOf(quota));
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(solve_issuesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class stationsStruct implements routines.system.IPersistableRow<stationsStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public long idsensore;

				public long getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Long idstazione;

				public Long getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public Long quota;

				public Long getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Long utm_nord;

				public Long getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Long utm_est;

				public Long getUtm_est () {
					return this.utm_est;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readLong();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idstazione = null;
           				} else {
           			    	this.idstazione = dis.readLong();
           				}
					
					this.nomestazione = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quota = null;
           				} else {
           			    	this.quota = dis.readLong();
           				}
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.utm_nord = null;
           				} else {
           			    	this.utm_nord = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.utm_est = null;
           				} else {
           			    	this.utm_est = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readLong();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idstazione = null;
           				} else {
           			    	this.idstazione = dis.readLong();
           				}
					
					this.nomestazione = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quota = null;
           				} else {
           			    	this.quota = dis.readLong();
           				}
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.utm_nord = null;
           				} else {
           			    	this.utm_nord = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.utm_est = null;
           				} else {
           			    	this.utm_est = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Long
				
						if(this.idstazione == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idstazione);
		            	}
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Long
				
						if(this.quota == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.quota);
		            	}
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Long
				
						if(this.utm_nord == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.utm_nord);
		            	}
					
					// Long
				
						if(this.utm_est == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.utm_est);
		            	}
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Long
				
						if(this.idstazione == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idstazione);
		            	}
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Long
				
						if(this.quota == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.quota);
		            	}
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Long
				
						if(this.utm_nord == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.utm_nord);
		            	}
					
					// Long
				
						if(this.utm_est == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.utm_est);
		            	}
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+String.valueOf(quota));
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stationsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_5Struct implements routines.system.IPersistableRow<after_tDBInput_5Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public long idsensore;

				public long getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Long idstazione;

				public Long getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public Long quota;

				public Long getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Long utm_nord;

				public Long getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Long utm_est;

				public Long getUtm_est () {
					return this.utm_est;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readLong();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idstazione = null;
           				} else {
           			    	this.idstazione = dis.readLong();
           				}
					
					this.nomestazione = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quota = null;
           				} else {
           			    	this.quota = dis.readLong();
           				}
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.utm_nord = null;
           				} else {
           			    	this.utm_nord = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.utm_est = null;
           				} else {
           			    	this.utm_est = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readLong();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idstazione = null;
           				} else {
           			    	this.idstazione = dis.readLong();
           				}
					
					this.nomestazione = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quota = null;
           				} else {
           			    	this.quota = dis.readLong();
           				}
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.utm_nord = null;
           				} else {
           			    	this.utm_nord = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.utm_est = null;
           				} else {
           			    	this.utm_est = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Long
				
						if(this.idstazione == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idstazione);
		            	}
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Long
				
						if(this.quota == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.quota);
		            	}
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Long
				
						if(this.utm_nord == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.utm_nord);
		            	}
					
					// Long
				
						if(this.utm_est == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.utm_est);
		            	}
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Long
				
						if(this.idstazione == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idstazione);
		            	}
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Long
				
						if(this.quota == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.quota);
		            	}
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Long
				
						if(this.utm_nord == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.utm_nord);
		            	}
					
					// Long
				
						if(this.utm_est == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.utm_est);
		            	}
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+String.valueOf(quota));
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_6Process(globalMap);

		stationsStruct stations = new stationsStruct();
solve_issuesStruct solve_issues = new solve_issuesStruct();





	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"solve_issues");
					}
				
		int tos_count_tDBOutput_7 = 0;
		





String dbschema_tDBOutput_7 = null;
	dbschema_tDBOutput_7 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_7 = null;
if(dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
	tableName_tDBOutput_7 = ("stations");
} else {
	tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\"" + ("stations");
}

        int updateKeyCount_tDBOutput_7 = 2;
        if(updateKeyCount_tDBOutput_7 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_7 == 16 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;
int rowsToCommitCount_tDBOutput_7=0;
int rejectedCount_tDBOutput_7=0;

boolean whetherReject_tDBOutput_7 = false;

java.sql.Connection conn_tDBOutput_7 = null;
String dbUser_tDBOutput_7 = null;

	conn_tDBOutput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_7 = 10000;
   int batchSizeCounter_tDBOutput_7=0;

int count_tDBOutput_7=0;
	    String update_tDBOutput_7 = "UPDATE \"" + tableName_tDBOutput_7 + "\" SET \"nometiposensore\" = ?,\"unitamisura\" = ?,\"idstazione\" = ?,\"nomestazione\" = ?,\"quota\" = ?,\"provincia\" = ?,\"comune\" = ?,\"storico\" = ?,\"datastop\" = ?,\"utm_nord\" = ?,\"utm_est\" = ?,\"lat\" = ?,\"lng\" = ?,\"coordinate\" = ? WHERE \"idsensore\" = ? AND \"datastart\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(update_tDBOutput_7);
	    resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
	    

 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"stations");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stations_check_Struct> tHash_Lookup_stations_check_ = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stations_check_Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stations_check_Struct>) 
					globalMap.get( "tHash_Lookup_stations_check_" ))
					;					
					
	

stations_check_Struct stations_check_HashKey = new stations_check_Struct();
stations_check_Struct stations_check_Default = new stations_check_Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
solve_issuesStruct solve_issues_tmp = new solve_issuesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "select * from stations";
		    

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								stations.idsensore = 0;
							} else {
		                          
            stations.idsensore = rs_tDBInput_5.getLong(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								stations.nometiposensore = null;
							} else {
	                         		
        	stations.nometiposensore = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								stations.unitamisura = null;
							} else {
	                         		
        	stations.unitamisura = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								stations.idstazione = null;
							} else {
		                          
            stations.idstazione = rs_tDBInput_5.getLong(4);
            if(rs_tDBInput_5.wasNull()){
                    stations.idstazione = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								stations.nomestazione = null;
							} else {
	                         		
        	stations.nomestazione = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								stations.quota = null;
							} else {
		                          
            stations.quota = rs_tDBInput_5.getLong(6);
            if(rs_tDBInput_5.wasNull()){
                    stations.quota = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								stations.provincia = null;
							} else {
	                         		
        	stations.provincia = routines.system.JDBCUtil.getString(rs_tDBInput_5, 7, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								stations.comune = null;
							} else {
	                         		
        	stations.comune = routines.system.JDBCUtil.getString(rs_tDBInput_5, 8, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								stations.storico = null;
							} else {
	                         		
        	stations.storico = routines.system.JDBCUtil.getString(rs_tDBInput_5, 9, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 10) {
								stations.datastart = null;
							} else {
										
			stations.datastart = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 10);
		                    }
							if(colQtyInRs_tDBInput_5 < 11) {
								stations.datastop = null;
							} else {
										
			stations.datastop = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 11);
		                    }
							if(colQtyInRs_tDBInput_5 < 12) {
								stations.utm_nord = null;
							} else {
		                          
            stations.utm_nord = rs_tDBInput_5.getLong(12);
            if(rs_tDBInput_5.wasNull()){
                    stations.utm_nord = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 13) {
								stations.utm_est = null;
							} else {
		                          
            stations.utm_est = rs_tDBInput_5.getLong(13);
            if(rs_tDBInput_5.wasNull()){
                    stations.utm_est = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 14) {
								stations.lat = null;
							} else {
	                         		
            stations.lat = rs_tDBInput_5.getDouble(14);
            if(rs_tDBInput_5.wasNull()){
                    stations.lat = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 15) {
								stations.lng = null;
							} else {
	                         		
            stations.lng = rs_tDBInput_5.getDouble(15);
            if(rs_tDBInput_5.wasNull()){
                    stations.lng = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 16) {
								stations.coordinate = null;
							} else {
	                         		
        	stations.coordinate = routines.system.JDBCUtil.getString(rs_tDBInput_5, 16, false);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"stations"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "stations_check_" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopstations_check_ = false;
       		  	    	
       		  	    	
 							stations_check_Struct stations_check_ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    stations_check_HashKey.idsensore = stations.idsensore ;
                        		    		

								
		                        	stations_check_HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_stations_check_.lookup( stations_check_HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_stations_check_.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_10 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_stations_check_ != null && tHash_Lookup_stations_check_.getCount(stations_check_HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'stations_check_' and it contains more one result from keys :  stations_check_.idsensore = '" + stations_check_HashKey.idsensore + "'");
								} // G 071
							

							stations_check_Struct stations_check_ = null;
                    		  	 
							   
                    		  	 
	       		  	    	stations_check_Struct fromLookup_stations_check_ = null;
							stations_check_ = stations_check_Default;
										 
							
								 
							
							
								if (tHash_Lookup_stations_check_ !=null && tHash_Lookup_stations_check_.hasNext()) { // G 099
								
							
								
								fromLookup_stations_check_ = tHash_Lookup_stations_check_.next();

							
							
								} // G 099
							
							

							if(fromLookup_stations_check_ != null) {
								stations_check_ = fromLookup_stations_check_;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

solve_issues = null;

if(!rejectedInnerJoin_tMap_10 ) {

// # Output table : 'solve_issues'
solve_issues_tmp.idsensore = stations.idsensore ;
solve_issues_tmp.nometiposensore = stations.nometiposensore ;
solve_issues_tmp.unitamisura = stations.unitamisura ;
solve_issues_tmp.idstazione = stations.idstazione ;
solve_issues_tmp.nomestazione = stations.nomestazione ;
solve_issues_tmp.quota = stations.quota ;
solve_issues_tmp.provincia = stations.provincia ;
solve_issues_tmp.comune = stations.comune ;
solve_issues_tmp.storico = stations_check_.storico ;
solve_issues_tmp.datastart = stations.datastart ;
solve_issues_tmp.datastop = stations_check_.datastop ;
solve_issues_tmp.utm_nord = stations.utm_nord ;
solve_issues_tmp.utm_est = stations.utm_est ;
solve_issues_tmp.lat = stations.lat ;
solve_issues_tmp.lng = stations.lng ;
solve_issues_tmp.coordinate = stations.coordinate ;
solve_issues = solve_issues_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "solve_issues"
if(solve_issues != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"solve_issues"
						
						);
					}
					



        whetherReject_tDBOutput_7 = false;
                    if(solve_issues.nometiposensore == null) {
pstmt_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(1, solve_issues.nometiposensore);
}

                    if(solve_issues.unitamisura == null) {
pstmt_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(2, solve_issues.unitamisura);
}

                    if(solve_issues.idstazione == null) {
pstmt_tDBOutput_7.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setLong(3, solve_issues.idstazione);
}

                    if(solve_issues.nomestazione == null) {
pstmt_tDBOutput_7.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(4, solve_issues.nomestazione);
}

                    if(solve_issues.quota == null) {
pstmt_tDBOutput_7.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setLong(5, solve_issues.quota);
}

                    if(solve_issues.provincia == null) {
pstmt_tDBOutput_7.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(6, solve_issues.provincia);
}

                    if(solve_issues.comune == null) {
pstmt_tDBOutput_7.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(7, solve_issues.comune);
}

                    if(solve_issues.storico == null) {
pstmt_tDBOutput_7.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(8, solve_issues.storico);
}

                    if(solve_issues.datastop != null) {
pstmt_tDBOutput_7.setTimestamp(9, new java.sql.Timestamp(solve_issues.datastop.getTime()));
} else {
pstmt_tDBOutput_7.setNull(9, java.sql.Types.TIMESTAMP);
}

                    if(solve_issues.utm_nord == null) {
pstmt_tDBOutput_7.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setLong(10, solve_issues.utm_nord);
}

                    if(solve_issues.utm_est == null) {
pstmt_tDBOutput_7.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setLong(11, solve_issues.utm_est);
}

                    if(solve_issues.lat == null) {
pstmt_tDBOutput_7.setNull(12, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_7.setDouble(12, solve_issues.lat);
}

                    if(solve_issues.lng == null) {
pstmt_tDBOutput_7.setNull(13, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_7.setDouble(13, solve_issues.lng);
}

                    if(solve_issues.coordinate == null) {
pstmt_tDBOutput_7.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(14, solve_issues.coordinate);
}

                    pstmt_tDBOutput_7.setLong(15 + count_tDBOutput_7, solve_issues.idsensore);


                    if(solve_issues.datastart != null) {
pstmt_tDBOutput_7.setTimestamp(16 + count_tDBOutput_7, new java.sql.Timestamp(solve_issues.datastart.getTime()));
} else {
pstmt_tDBOutput_7.setNull(16 + count_tDBOutput_7, java.sql.Types.TIMESTAMP);
}


    		pstmt_tDBOutput_7.addBatch();
    		nb_line_tDBOutput_7++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_7++;
    		  
    			if ((batchSize_tDBOutput_7 > 0) && (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
                try {
						int countSum_tDBOutput_7 = 0;
						    
						for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}
				    	rowsToCommitCount_tDBOutput_7 += countSum_tDBOutput_7;
				    	
				    		updatedCount_tDBOutput_7 += countSum_tDBOutput_7;
				    	
            	    	batchSizeCounter_tDBOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_7){
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e_tDBOutput_7.getMessage());
				    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
				    	String errormessage_tDBOutput_7;
						if (ne_tDBOutput_7 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
							errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
						}else{
							errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
						}
				    	
				    		if (ne_tDBOutput_7 != null) {
				    			throw(sqle_tDBOutput_7);
				    		}else{
				            	throw(e_tDBOutput_7);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "solve_issues"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_stations_check_ != null) {
						tHash_Lookup_stations_check_.endGet();
					}
					globalMap.remove( "tHash_Lookup_stations_check_" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"stations");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



	    try {
				int countSum_tDBOutput_7 = 0;
				if (pstmt_tDBOutput_7 != null && batchSizeCounter_tDBOutput_7 > 0) {
						
					for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
					rowsToCommitCount_tDBOutput_7 += countSum_tDBOutput_7;
						
				}
		    	
		    		updatedCount_tDBOutput_7 += countSum_tDBOutput_7;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_7){
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e_tDBOutput_7.getMessage());
	    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
	    	String errormessage_tDBOutput_7;
			if (ne_tDBOutput_7 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
				errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
			}else{
				errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
			}
	    	
	    		if (ne_tDBOutput_7 != null) {
	    			throw(sqle_tDBOutput_7);
	    		}else{
	            	throw(e_tDBOutput_7);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_7 != null) {
        		
            pstmt_tDBOutput_7.close();
            resourceMap.remove("pstmt_tDBOutput_7");
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"solve_issues");
			  	}
			  	
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());




/**
 * [tDBOutput_7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_stations_check_"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class stations_checkStruct implements routines.system.IPersistableComparableLookupRow<stations_checkStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer idsensore;

				public Integer getIdsensore () {
					return this.idsensore;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date ultima_acquisizione;

				public java.util.Date getUltima_acquisizione () {
					return this.ultima_acquisizione;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final stations_checkStruct other = (stations_checkStruct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					

		return true;
    }

	public void copyDataTo(stations_checkStruct other) {

		other.idsensore = this.idsensore;
	            other.storico = this.storico;
	            other.ultima_acquisizione = this.ultima_acquisizione;
	            other.datastop = this.datastop;
	            
	}

	public void copyKeysDataTo(stations_checkStruct other) {

		other.idsensore = this.idsensore;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
						this.idsensore = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.idsensore,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.storico = readString(dis,ois);
					
						this.ultima_acquisizione = readDate(dis,ois);
					
						this.datastop = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.storico = readString(dis,objectIn);
					
						this.ultima_acquisizione = readDate(dis,objectIn);
					
						this.datastop = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.storico, dos, oos);
					
						writeDate(this.ultima_acquisizione, dos, oos);
					
						writeDate(this.datastop, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.storico, dos, objectOut);
					
						writeDate(this.ultima_acquisizione, dos, objectOut);
					
						writeDate(this.datastop, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",storico="+storico);
		sb.append(",ultima_acquisizione="+String.valueOf(ultima_acquisizione));
		sb.append(",datastop="+String.valueOf(datastop));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stations_checkStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		stations_checkStruct stations_check = new stations_checkStruct();




	
	/**
	 * [tAdvancedHash_stations_check begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_stations_check", false);
		start_Hash.put("tAdvancedHash_stations_check", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_stations_check";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"stations_check");
					}
				
		int tos_count_tAdvancedHash_stations_check = 0;
		

			   		// connection name:stations_check
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_3) outputs:(stations_check,stations_check) | target node:tAdvancedHash_stations_check - inputs:(stations_check) outputs:()
			   		// linked node: tMap_8 - inputs:(sens_data,stations_check) outputs:(critical_sensors)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_stations_check = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stations_checkStruct> tHash_Lookup_stations_check =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<stations_checkStruct>getLookup(matchingModeEnum_stations_check);
	   						   
		   	   	   globalMap.put("tHash_Lookup_stations_check", tHash_Lookup_stations_check);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_stations_check begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "select * from stations_check where datastop IS NULL";
		    

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								stations_check.idsensore = null;
							} else {
		                          
            stations_check.idsensore = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    stations_check.idsensore = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								stations_check.storico = null;
							} else {
	                         		
        	stations_check.storico = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								stations_check.ultima_acquisizione = null;
							} else {
										
			stations_check.ultima_acquisizione = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 3);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								stations_check.datastop = null;
							} else {
										
			stations_check.datastop = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 4);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_stations_check main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stations_check";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"stations_check"
						
						);
					}
					


			   
			   

					stations_checkStruct stations_check_HashRow = new stations_checkStruct();
		   	   	   
				
				stations_check_HashRow.idsensore = stations_check.idsensore;
				
				stations_check_HashRow.storico = stations_check.storico;
				
				stations_check_HashRow.ultima_acquisizione = stations_check.ultima_acquisizione;
				
				stations_check_HashRow.datastop = stations_check.datastop;
				
			tHash_Lookup_stations_check.put(stations_check_HashRow);
			
            




 


	tos_count_tAdvancedHash_stations_check++;

/**
 * [tAdvancedHash_stations_check main ] stop
 */
	
	/**
	 * [tAdvancedHash_stations_check process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stations_check";

	

 



/**
 * [tAdvancedHash_stations_check process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_stations_check process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stations_check";

	

 



/**
 * [tAdvancedHash_stations_check process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_stations_check end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stations_check";

	

tHash_Lookup_stations_check.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"stations_check");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_stations_check", true);
end_Hash.put("tAdvancedHash_stations_check", System.currentTimeMillis());




/**
 * [tAdvancedHash_stations_check end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_stations_check finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stations_check";

	

 



/**
 * [tAdvancedHash_stations_check finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class stations_check_Struct implements routines.system.IPersistableComparableLookupRow<stations_check_Struct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long idsensore;

				public Long getIdsensore () {
					return this.idsensore;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date ultima_acquisizione;

				public java.util.Date getUltima_acquisizione () {
					return this.ultima_acquisizione;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idsensore == null) ? 0 : this.idsensore.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final stations_check_Struct other = (stations_check_Struct) obj;
		
						if (this.idsensore == null) {
							if (other.idsensore != null)
								return false;
						
						} else if (!this.idsensore.equals(other.idsensore))
						
							return false;
					

		return true;
    }

	public void copyDataTo(stations_check_Struct other) {

		other.idsensore = this.idsensore;
	            other.storico = this.storico;
	            other.ultima_acquisizione = this.ultima_acquisizione;
	            other.datastop = this.datastop;
	            
	}

	public void copyKeysDataTo(stations_check_Struct other) {

		other.idsensore = this.idsensore;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.idsensore = null;
           				} else {
           			    	this.idsensore = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.idsensore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.idsensore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.storico = readString(dis,ois);
					
						this.ultima_acquisizione = readDate(dis,ois);
					
						this.datastop = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.storico = readString(dis,objectIn);
					
						this.ultima_acquisizione = readDate(dis,objectIn);
					
						this.datastop = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.storico, dos, oos);
					
						writeDate(this.ultima_acquisizione, dos, oos);
					
						writeDate(this.datastop, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.storico, dos, objectOut);
					
						writeDate(this.ultima_acquisizione, dos, objectOut);
					
						writeDate(this.datastop, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",storico="+storico);
		sb.append(",ultima_acquisizione="+String.valueOf(ultima_acquisizione));
		sb.append(",datastop="+String.valueOf(datastop));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stations_check_Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		stations_check_Struct stations_check_ = new stations_check_Struct();




	
	/**
	 * [tAdvancedHash_stations_check_ begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_stations_check_", false);
		start_Hash.put("tAdvancedHash_stations_check_", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_stations_check_";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"stations_check_");
					}
				
		int tos_count_tAdvancedHash_stations_check_ = 0;
		

			   		// connection name:stations_check_
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_5) outputs:(stations_check_,stations_check_) | target node:tAdvancedHash_stations_check_ - inputs:(stations_check_) outputs:()
			   		// linked node: tMap_10 - inputs:(stations,stations_check_) outputs:(solve_issues)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_stations_check_ = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stations_check_Struct> tHash_Lookup_stations_check_ =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<stations_check_Struct>getLookup(matchingModeEnum_stations_check_);
	   						   
		   	   	   globalMap.put("tHash_Lookup_stations_check_", tHash_Lookup_stations_check_);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_stations_check_ begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "select * from stations_check";
		    

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								stations_check_.idsensore = null;
							} else {
		                          
            stations_check_.idsensore = rs_tDBInput_6.getLong(1);
            if(rs_tDBInput_6.wasNull()){
                    stations_check_.idsensore = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								stations_check_.storico = null;
							} else {
	                         		
        	stations_check_.storico = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								stations_check_.ultima_acquisizione = null;
							} else {
										
			stations_check_.ultima_acquisizione = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 3);
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								stations_check_.datastop = null;
							} else {
										
			stations_check_.datastop = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 4);
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_stations_check_ main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stations_check_";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"stations_check_"
						
						);
					}
					


			   
			   

					stations_check_Struct stations_check__HashRow = new stations_check_Struct();
		   	   	   
				
				stations_check__HashRow.idsensore = stations_check_.idsensore;
				
				stations_check__HashRow.storico = stations_check_.storico;
				
				stations_check__HashRow.ultima_acquisizione = stations_check_.ultima_acquisizione;
				
				stations_check__HashRow.datastop = stations_check_.datastop;
				
			tHash_Lookup_stations_check_.put(stations_check__HashRow);
			
            




 


	tos_count_tAdvancedHash_stations_check_++;

/**
 * [tAdvancedHash_stations_check_ main ] stop
 */
	
	/**
	 * [tAdvancedHash_stations_check_ process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stations_check_";

	

 



/**
 * [tAdvancedHash_stations_check_ process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_stations_check_ process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stations_check_";

	

 



/**
 * [tAdvancedHash_stations_check_ process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_stations_check_ end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stations_check_";

	

tHash_Lookup_stations_check_.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"stations_check_");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_stations_check_", true);
end_Hash.put("tAdvancedHash_stations_check_", System.currentTimeMillis());




/**
 * [tAdvancedHash_stations_check_ end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_stations_check_ finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stations_check_";

	

 



/**
 * [tAdvancedHash_stations_check_ finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


String foo = "bar";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class insertPresentStruct implements routines.system.IPersistableRow<insertPresentStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public Integer duration_in_seconds;

				public Integer getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertPresentStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insertLogTableStruct implements routines.system.IPersistableRow<insertLogTableStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public Integer duration_in_seconds;

				public Integer getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertLogTableStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		insertLogTableStruct insertLogTable = new insertLogTableStruct();
insertPresentStruct insertPresent = new insertPresentStruct();





	
	/**
	 * [tDBOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_9", false);
		start_Hash.put("tDBOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insertPresent");
					}
				
		int tos_count_tDBOutput_9 = 0;
		





String dbschema_tDBOutput_9 = null;
	dbschema_tDBOutput_9 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_9 = null;
if(dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
	tableName_tDBOutput_9 = ("logs");
} else {
	tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "\".\"" + ("logs");
}


int nb_line_tDBOutput_9 = 0;
int nb_line_update_tDBOutput_9 = 0;
int nb_line_inserted_tDBOutput_9 = 0;
int nb_line_deleted_tDBOutput_9 = 0;
int nb_line_rejected_tDBOutput_9 = 0;

int deletedCount_tDBOutput_9=0;
int updatedCount_tDBOutput_9=0;
int insertedCount_tDBOutput_9=0;
int rowsToCommitCount_tDBOutput_9=0;
int rejectedCount_tDBOutput_9=0;

boolean whetherReject_tDBOutput_9 = false;

java.sql.Connection conn_tDBOutput_9 = null;
String dbUser_tDBOutput_9 = null;

	conn_tDBOutput_9 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_9 = 10000;
   int batchSizeCounter_tDBOutput_9=0;

int count_tDBOutput_9=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_9 = conn_tDBOutput_9.getMetaData();
                                boolean whetherExist_tDBOutput_9 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_9 = dbMetaData_tDBOutput_9.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_9 = "public";
                                    if(dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_9 = conn_tDBOutput_9.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_9 = stmtSchema_tDBOutput_9.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_9.next()){
                                                defaultSchema_tDBOutput_9 = rsSchema_tDBOutput_9.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_9.next()) {
                                        String table_tDBOutput_9 = rsTable_tDBOutput_9.getString("TABLE_NAME");
                                        String schema_tDBOutput_9 = rsTable_tDBOutput_9.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_9.equals(("logs"))
                                            && (schema_tDBOutput_9.equals(dbschema_tDBOutput_9) || ((dbschema_tDBOutput_9 ==null || dbschema_tDBOutput_9.trim().length() ==0) && defaultSchema_tDBOutput_9.equals(schema_tDBOutput_9)))) {
                                            whetherExist_tDBOutput_9 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_9) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
                                        stmtCreate_tDBOutput_9.execute("CREATE TABLE \"" + tableName_tDBOutput_9 + "\"(\"current_date\" TIMESTAMP ,\"table_name\" VARCHAR ,\"operation\" VARCHAR ,\"number_of_rows\" INT8 ,\"duration_in_seconds\" INT8 )");
                                    }
                                }
	    String insert_tDBOutput_9 = "INSERT INTO \"" + tableName_tDBOutput_9 + "\" (\"current_date\",\"table_name\",\"operation\",\"number_of_rows\",\"duration_in_seconds\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
	    resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);
	    

 



/**
 * [tDBOutput_9 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insertLogTable");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
	boolean insert_check;
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
insertPresentStruct insertPresent_tmp = new insertPresentStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";

	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		insertLogTable.current_date = TalendDate.getCurrentDate();
    	            	        	            	
    	            		insertLogTable.table_name = "stations";
    	            	        	            	
    	            		insertLogTable.operation = "Insert";
    	            	        	            	
    	            		insertLogTable.number_of_rows = ((Integer)globalMap.get("tDBOutput_1_NB_LINE"));
    	            	        	            	
    	            		insertLogTable.duration_in_seconds = Math.toIntExact(TalendDate.getCurrentDate().getTime() - startTime)/1000;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insertLogTable"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;
Var.insert_check = ((Integer)globalMap.get("tDBOutput_1_NB_LINE"))> 0 ;// ###############################
        // ###############################
        // # Output tables

insertPresent = null;


// # Output table : 'insertPresent'
// # Filter conditions 
if( 

Var.insert_check == true

 ) {
insertPresent_tmp.current_date = insertLogTable.current_date;
insertPresent_tmp.table_name = insertLogTable.table_name;
insertPresent_tmp.operation = insertLogTable.operation;
insertPresent_tmp.number_of_rows = insertLogTable.number_of_rows;
insertPresent_tmp.duration_in_seconds = insertLogTable.duration_in_seconds;
insertPresent = insertPresent_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "insertPresent"
if(insertPresent != null) { 



	
	/**
	 * [tDBOutput_9 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insertPresent"
						
						);
					}
					



        whetherReject_tDBOutput_9 = false;
                    if(insertPresent.current_date != null) {
pstmt_tDBOutput_9.setTimestamp(1, new java.sql.Timestamp(insertPresent.current_date.getTime()));
} else {
pstmt_tDBOutput_9.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(insertPresent.table_name == null) {
pstmt_tDBOutput_9.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(2, insertPresent.table_name);
}

                    if(insertPresent.operation == null) {
pstmt_tDBOutput_9.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(3, insertPresent.operation);
}

                    if(insertPresent.number_of_rows == null) {
pstmt_tDBOutput_9.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_9.setInt(4, insertPresent.number_of_rows);
}

                    if(insertPresent.duration_in_seconds == null) {
pstmt_tDBOutput_9.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_9.setInt(5, insertPresent.duration_in_seconds);
}

			
    		pstmt_tDBOutput_9.addBatch();
    		nb_line_tDBOutput_9++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_9++;
    		  
    			if ((batchSize_tDBOutput_9 > 0) && (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {
                try {
						int countSum_tDBOutput_9 = 0;
						    
						for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}
				    	rowsToCommitCount_tDBOutput_9 += countSum_tDBOutput_9;
				    	
				    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
				    	
            	    	batchSizeCounter_tDBOutput_9 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_9){
globalMap.put("tDBOutput_9_ERROR_MESSAGE",e_tDBOutput_9.getMessage());
				    	java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),sqle_tDBOutput_9=null;
				    	String errormessage_tDBOutput_9;
						if (ne_tDBOutput_9 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_9 = new java.sql.SQLException(e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(), ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
							errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
						}else{
							errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
						}
				    	
				    		if (ne_tDBOutput_9 != null) {
				    			throw(sqle_tDBOutput_9);
				    		}else{
				            	throw(e_tDBOutput_9);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_9++;

/**
 * [tDBOutput_9 main ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_end ] stop
 */

} // End of branch "insertPresent"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insertLogTable");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tDBOutput_9 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



	    try {
				int countSum_tDBOutput_9 = 0;
				if (pstmt_tDBOutput_9 != null && batchSizeCounter_tDBOutput_9 > 0) {
						
					for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}
					rowsToCommitCount_tDBOutput_9 += countSum_tDBOutput_9;
						
				}
		    	
		    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_9){
globalMap.put("tDBOutput_9_ERROR_MESSAGE",e_tDBOutput_9.getMessage());
	    	java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),sqle_tDBOutput_9=null;
	    	String errormessage_tDBOutput_9;
			if (ne_tDBOutput_9 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_9 = new java.sql.SQLException(e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(), ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
				errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
			}else{
				errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
			}
	    	
	    		if (ne_tDBOutput_9 != null) {
	    			throw(sqle_tDBOutput_9);
	    		}else{
	            	throw(e_tDBOutput_9);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_9 != null) {
        		
            pstmt_tDBOutput_9.close();
            resourceMap.remove("pstmt_tDBOutput_9");
        }
    resourceMap.put("statementClosed_tDBOutput_9", true);

	nb_line_deleted_tDBOutput_9=nb_line_deleted_tDBOutput_9+ deletedCount_tDBOutput_9;
	nb_line_update_tDBOutput_9=nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
	nb_line_inserted_tDBOutput_9=nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
	nb_line_rejected_tDBOutput_9=nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;
	
        globalMap.put("tDBOutput_9_NB_LINE",nb_line_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_UPDATED",nb_line_update_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_DELETED",nb_line_deleted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insertPresent");
			  	}
			  	
 

ok_Hash.put("tDBOutput_9", true);
end_Hash.put("tDBOutput_9", System.currentTimeMillis());




/**
 * [tDBOutput_9 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tDBOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



    if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
                if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_9")) != null) {
                    pstmtToClose_tDBOutput_9.close();
                }
    }
 



/**
 * [tDBOutput_9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class updatePresentStruct implements routines.system.IPersistableRow<updatePresentStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public Integer duration_in_seconds;

				public Integer getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(updatePresentStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class updateLogTableStruct implements routines.system.IPersistableRow<updateLogTableStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public Integer duration_in_seconds;

				public Integer getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(updateLogTableStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		updateLogTableStruct updateLogTable = new updateLogTableStruct();
updatePresentStruct updatePresent = new updatePresentStruct();





	
	/**
	 * [tDBOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_8", false);
		start_Hash.put("tDBOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"updatePresent");
					}
				
		int tos_count_tDBOutput_8 = 0;
		





String dbschema_tDBOutput_8 = null;
	dbschema_tDBOutput_8 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_8 = null;
if(dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
	tableName_tDBOutput_8 = ("logs");
} else {
	tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "\".\"" + ("logs");
}


int nb_line_tDBOutput_8 = 0;
int nb_line_update_tDBOutput_8 = 0;
int nb_line_inserted_tDBOutput_8 = 0;
int nb_line_deleted_tDBOutput_8 = 0;
int nb_line_rejected_tDBOutput_8 = 0;

int deletedCount_tDBOutput_8=0;
int updatedCount_tDBOutput_8=0;
int insertedCount_tDBOutput_8=0;
int rowsToCommitCount_tDBOutput_8=0;
int rejectedCount_tDBOutput_8=0;

boolean whetherReject_tDBOutput_8 = false;

java.sql.Connection conn_tDBOutput_8 = null;
String dbUser_tDBOutput_8 = null;

	conn_tDBOutput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_8 = 10000;
   int batchSizeCounter_tDBOutput_8=0;

int count_tDBOutput_8=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_8 = conn_tDBOutput_8.getMetaData();
                                boolean whetherExist_tDBOutput_8 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_8 = dbMetaData_tDBOutput_8.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_8 = "public";
                                    if(dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_8 = conn_tDBOutput_8.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_8 = stmtSchema_tDBOutput_8.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_8.next()){
                                                defaultSchema_tDBOutput_8 = rsSchema_tDBOutput_8.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_8.next()) {
                                        String table_tDBOutput_8 = rsTable_tDBOutput_8.getString("TABLE_NAME");
                                        String schema_tDBOutput_8 = rsTable_tDBOutput_8.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_8.equals(("logs"))
                                            && (schema_tDBOutput_8.equals(dbschema_tDBOutput_8) || ((dbschema_tDBOutput_8 ==null || dbschema_tDBOutput_8.trim().length() ==0) && defaultSchema_tDBOutput_8.equals(schema_tDBOutput_8)))) {
                                            whetherExist_tDBOutput_8 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_8) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                                        stmtCreate_tDBOutput_8.execute("CREATE TABLE \"" + tableName_tDBOutput_8 + "\"(\"current_date\" TIMESTAMP ,\"table_name\" VARCHAR ,\"operation\" VARCHAR ,\"number_of_rows\" INT8 ,\"duration_in_seconds\" INT8 )");
                                    }
                                }
	    String insert_tDBOutput_8 = "INSERT INTO \"" + tableName_tDBOutput_8 + "\" (\"current_date\",\"table_name\",\"operation\",\"number_of_rows\",\"duration_in_seconds\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
	    resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);
	    

 



/**
 * [tDBOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"updateLogTable");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
	boolean update_check;
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
updatePresentStruct updatePresent_tmp = new updatePresentStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		updateLogTable.current_date = TalendDate.getCurrentDate();
    	            	        	            	
    	            		updateLogTable.table_name = "stations";
    	            	        	            	
    	            		updateLogTable.operation = "Update";
    	            	        	            	
    	            		updateLogTable.number_of_rows = ((Integer)globalMap.get("tDBOutput_3_NB_LINE"));
    	            	        	            	
    	            		updateLogTable.duration_in_seconds = Math.toIntExact(TalendDate.getCurrentDate().getTime() - startTime)/1000;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"updateLogTable"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;
Var.update_check = ((Integer)globalMap.get("tDBOutput_3_NB_LINE"))> 0 ;// ###############################
        // ###############################
        // # Output tables

updatePresent = null;


// # Output table : 'updatePresent'
// # Filter conditions 
if( 

Var.update_check == true

 ) {
updatePresent_tmp.current_date = updateLogTable.current_date ;
updatePresent_tmp.table_name = updateLogTable.table_name ;
updatePresent_tmp.operation = updateLogTable.operation ;
updatePresent_tmp.number_of_rows = updateLogTable.number_of_rows ;
updatePresent_tmp.duration_in_seconds = updateLogTable.duration_in_seconds ;
updatePresent = updatePresent_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "updatePresent"
if(updatePresent != null) { 



	
	/**
	 * [tDBOutput_8 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"updatePresent"
						
						);
					}
					



        whetherReject_tDBOutput_8 = false;
                    if(updatePresent.current_date != null) {
pstmt_tDBOutput_8.setTimestamp(1, new java.sql.Timestamp(updatePresent.current_date.getTime()));
} else {
pstmt_tDBOutput_8.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(updatePresent.table_name == null) {
pstmt_tDBOutput_8.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(2, updatePresent.table_name);
}

                    if(updatePresent.operation == null) {
pstmt_tDBOutput_8.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(3, updatePresent.operation);
}

                    if(updatePresent.number_of_rows == null) {
pstmt_tDBOutput_8.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_8.setInt(4, updatePresent.number_of_rows);
}

                    if(updatePresent.duration_in_seconds == null) {
pstmt_tDBOutput_8.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_8.setInt(5, updatePresent.duration_in_seconds);
}

			
    		pstmt_tDBOutput_8.addBatch();
    		nb_line_tDBOutput_8++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_8++;
    		  
    			if ((batchSize_tDBOutput_8 > 0) && (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
                try {
						int countSum_tDBOutput_8 = 0;
						    
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
				    	rowsToCommitCount_tDBOutput_8 += countSum_tDBOutput_8;
				    	
				    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
				    	
            	    	batchSizeCounter_tDBOutput_8 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_8){
globalMap.put("tDBOutput_8_ERROR_MESSAGE",e_tDBOutput_8.getMessage());
				    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
				    	String errormessage_tDBOutput_8;
						if (ne_tDBOutput_8 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
							errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
						}else{
							errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
						}
				    	
				    		if (ne_tDBOutput_8 != null) {
				    			throw(sqle_tDBOutput_8);
				    		}else{
				            	throw(e_tDBOutput_8);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_8++;

/**
 * [tDBOutput_8 main ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_end ] stop
 */

} // End of branch "updatePresent"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"updateLogTable");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tDBOutput_8 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



	    try {
				int countSum_tDBOutput_8 = 0;
				if (pstmt_tDBOutput_8 != null && batchSizeCounter_tDBOutput_8 > 0) {
						
					for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
					rowsToCommitCount_tDBOutput_8 += countSum_tDBOutput_8;
						
				}
		    	
		    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_8){
globalMap.put("tDBOutput_8_ERROR_MESSAGE",e_tDBOutput_8.getMessage());
	    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
	    	String errormessage_tDBOutput_8;
			if (ne_tDBOutput_8 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
				errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
			}else{
				errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
			}
	    	
	    		if (ne_tDBOutput_8 != null) {
	    			throw(sqle_tDBOutput_8);
	    		}else{
	            	throw(e_tDBOutput_8);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_8 != null) {
        		
            pstmt_tDBOutput_8.close();
            resourceMap.remove("pstmt_tDBOutput_8");
        }
    resourceMap.put("statementClosed_tDBOutput_8", true);

	nb_line_deleted_tDBOutput_8=nb_line_deleted_tDBOutput_8+ deletedCount_tDBOutput_8;
	nb_line_update_tDBOutput_8=nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
	nb_line_inserted_tDBOutput_8=nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
	nb_line_rejected_tDBOutput_8=nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;
	
        globalMap.put("tDBOutput_8_NB_LINE",nb_line_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_UPDATED",nb_line_update_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_DELETED",nb_line_deleted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"updatePresent");
			  	}
			  	
 

ok_Hash.put("tDBOutput_8", true);
end_Hash.put("tDBOutput_8", System.currentTimeMillis());




/**
 * [tDBOutput_8 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tDBOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



    if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
                if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_8")) != null) {
                    pstmtToClose_tDBOutput_8.close();
                }
    }
 



/**
 * [tDBOutput_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class deletePresentStruct implements routines.system.IPersistableRow<deletePresentStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public Integer duration_in_seconds;

				public Integer getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(deletePresentStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class deleteLogTableStruct implements routines.system.IPersistableRow<deleteLogTableStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Integer number_of_rows;

				public Integer getNumber_of_rows () {
					return this.number_of_rows;
				}
				
			    public Integer duration_in_seconds;

				public Integer getDuration_in_seconds () {
					return this.duration_in_seconds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
					this.current_date = readDate(dis);
					
					this.table_name = readString(dis);
					
					this.operation = readString(dis);
					
						this.number_of_rows = readInteger(dis);
					
						this.duration_in_seconds = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.table_name,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Integer
				
						writeInteger(this.number_of_rows,dos);
					
					// Integer
				
						writeInteger(this.duration_in_seconds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("current_date="+String.valueOf(current_date));
		sb.append(",table_name="+table_name);
		sb.append(",operation="+operation);
		sb.append(",number_of_rows="+String.valueOf(number_of_rows));
		sb.append(",duration_in_seconds="+String.valueOf(duration_in_seconds));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(deleteLogTableStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		deleteLogTableStruct deleteLogTable = new deleteLogTableStruct();
deletePresentStruct deletePresent = new deletePresentStruct();





	
	/**
	 * [tDBOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_10", false);
		start_Hash.put("tDBOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"deletePresent");
					}
				
		int tos_count_tDBOutput_10 = 0;
		





String dbschema_tDBOutput_10 = null;
	dbschema_tDBOutput_10 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_10 = null;
if(dbschema_tDBOutput_10 == null || dbschema_tDBOutput_10.trim().length() == 0) {
	tableName_tDBOutput_10 = ("logs");
} else {
	tableName_tDBOutput_10 = dbschema_tDBOutput_10 + "\".\"" + ("logs");
}


int nb_line_tDBOutput_10 = 0;
int nb_line_update_tDBOutput_10 = 0;
int nb_line_inserted_tDBOutput_10 = 0;
int nb_line_deleted_tDBOutput_10 = 0;
int nb_line_rejected_tDBOutput_10 = 0;

int deletedCount_tDBOutput_10=0;
int updatedCount_tDBOutput_10=0;
int insertedCount_tDBOutput_10=0;
int rowsToCommitCount_tDBOutput_10=0;
int rejectedCount_tDBOutput_10=0;

boolean whetherReject_tDBOutput_10 = false;

java.sql.Connection conn_tDBOutput_10 = null;
String dbUser_tDBOutput_10 = null;

	conn_tDBOutput_10 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_10 = 10000;
   int batchSizeCounter_tDBOutput_10=0;

int count_tDBOutput_10=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_10 = conn_tDBOutput_10.getMetaData();
                                boolean whetherExist_tDBOutput_10 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_10 = dbMetaData_tDBOutput_10.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_10 = "public";
                                    if(dbschema_tDBOutput_10 == null || dbschema_tDBOutput_10.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_10 = conn_tDBOutput_10.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_10 = stmtSchema_tDBOutput_10.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_10.next()){
                                                defaultSchema_tDBOutput_10 = rsSchema_tDBOutput_10.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_10.next()) {
                                        String table_tDBOutput_10 = rsTable_tDBOutput_10.getString("TABLE_NAME");
                                        String schema_tDBOutput_10 = rsTable_tDBOutput_10.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_10.equals(("logs"))
                                            && (schema_tDBOutput_10.equals(dbschema_tDBOutput_10) || ((dbschema_tDBOutput_10 ==null || dbschema_tDBOutput_10.trim().length() ==0) && defaultSchema_tDBOutput_10.equals(schema_tDBOutput_10)))) {
                                            whetherExist_tDBOutput_10 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_10) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
                                        stmtCreate_tDBOutput_10.execute("CREATE TABLE \"" + tableName_tDBOutput_10 + "\"(\"current_date\" TIMESTAMP ,\"table_name\" VARCHAR ,\"operation\" VARCHAR ,\"number_of_rows\" INT8 ,\"duration_in_seconds\" INT8 )");
                                    }
                                }
	    String insert_tDBOutput_10 = "INSERT INTO \"" + tableName_tDBOutput_10 + "\" (\"current_date\",\"table_name\",\"operation\",\"number_of_rows\",\"duration_in_seconds\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(insert_tDBOutput_10);
	    resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);
	    

 



/**
 * [tDBOutput_10 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"deleteLogTable");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
	boolean check_delete;
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
deletePresentStruct deletePresent_tmp = new deletePresentStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";

	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		deleteLogTable.current_date = TalendDate.getCurrentDate();
    	            	        	            	
    	            		deleteLogTable.table_name = "sens_data_2022";
    	            	        	            	
    	            		deleteLogTable.operation = "Delete";
    	            	        	            	
    	            		deleteLogTable.number_of_rows = ((Integer)globalMap.get("tDBOutput_5_NB_LINE"));
    	            	        	            	
    	            		deleteLogTable.duration_in_seconds = Math.toIntExact(TalendDate.getCurrentDate().getTime() - startTime)/1000;
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"deleteLogTable"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;
Var.check_delete = ((Integer)globalMap.get("tDBOutput_5_NB_LINE"))> 0 ;// ###############################
        // ###############################
        // # Output tables

deletePresent = null;


// # Output table : 'deletePresent'
// # Filter conditions 
if( 

Var.check_delete == true

 ) {
deletePresent_tmp.current_date = deleteLogTable.current_date;
deletePresent_tmp.table_name = deleteLogTable.table_name;
deletePresent_tmp.operation = deleteLogTable.operation;
deletePresent_tmp.number_of_rows = deleteLogTable.number_of_rows;
deletePresent_tmp.duration_in_seconds = deleteLogTable.duration_in_seconds;
deletePresent = deletePresent_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "deletePresent"
if(deletePresent != null) { 



	
	/**
	 * [tDBOutput_10 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"deletePresent"
						
						);
					}
					



        whetherReject_tDBOutput_10 = false;
                    if(deletePresent.current_date != null) {
pstmt_tDBOutput_10.setTimestamp(1, new java.sql.Timestamp(deletePresent.current_date.getTime()));
} else {
pstmt_tDBOutput_10.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(deletePresent.table_name == null) {
pstmt_tDBOutput_10.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(2, deletePresent.table_name);
}

                    if(deletePresent.operation == null) {
pstmt_tDBOutput_10.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(3, deletePresent.operation);
}

                    if(deletePresent.number_of_rows == null) {
pstmt_tDBOutput_10.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_10.setInt(4, deletePresent.number_of_rows);
}

                    if(deletePresent.duration_in_seconds == null) {
pstmt_tDBOutput_10.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_10.setInt(5, deletePresent.duration_in_seconds);
}

			
    		pstmt_tDBOutput_10.addBatch();
    		nb_line_tDBOutput_10++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_10++;
    		  
            if(!whetherReject_tDBOutput_10) {
            }
    			if ((batchSize_tDBOutput_10 > 0) && (batchSize_tDBOutput_10 <= batchSizeCounter_tDBOutput_10)) {
                try {
						int countSum_tDBOutput_10 = 0;
						    
						for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
						}
				    	rowsToCommitCount_tDBOutput_10 += countSum_tDBOutput_10;
				    	
				    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
				    	
            	    	batchSizeCounter_tDBOutput_10 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_10){
globalMap.put("tDBOutput_10_ERROR_MESSAGE",e_tDBOutput_10.getMessage());
				    	java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),sqle_tDBOutput_10=null;
				    	String errormessage_tDBOutput_10;
						if (ne_tDBOutput_10 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_10 = new java.sql.SQLException(e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(), ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
							errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
						}else{
							errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
						}
				    	
				    		if (ne_tDBOutput_10 != null) {
				    			throw(sqle_tDBOutput_10);
				    		}else{
				            	throw(e_tDBOutput_10);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_10++;

/**
 * [tDBOutput_10 main ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_end ] stop
 */

} // End of branch "deletePresent"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"deleteLogTable");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tDBOutput_10 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



	    try {
				int countSum_tDBOutput_10 = 0;
				if (pstmt_tDBOutput_10 != null && batchSizeCounter_tDBOutput_10 > 0) {
						
					for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
						countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}
					rowsToCommitCount_tDBOutput_10 += countSum_tDBOutput_10;
						
				}
		    	
		    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_10){
globalMap.put("tDBOutput_10_ERROR_MESSAGE",e_tDBOutput_10.getMessage());
	    	java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),sqle_tDBOutput_10=null;
	    	String errormessage_tDBOutput_10;
			if (ne_tDBOutput_10 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_10 = new java.sql.SQLException(e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(), ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
				errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
			}else{
				errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
			}
	    	
	    		if (ne_tDBOutput_10 != null) {
	    			throw(sqle_tDBOutput_10);
	    		}else{
	            	throw(e_tDBOutput_10);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_10 != null) {
        		
            pstmt_tDBOutput_10.close();
            resourceMap.remove("pstmt_tDBOutput_10");
        }
    resourceMap.put("statementClosed_tDBOutput_10", true);

	nb_line_deleted_tDBOutput_10=nb_line_deleted_tDBOutput_10+ deletedCount_tDBOutput_10;
	nb_line_update_tDBOutput_10=nb_line_update_tDBOutput_10 + updatedCount_tDBOutput_10;
	nb_line_inserted_tDBOutput_10=nb_line_inserted_tDBOutput_10 + insertedCount_tDBOutput_10;
	nb_line_rejected_tDBOutput_10=nb_line_rejected_tDBOutput_10 + rejectedCount_tDBOutput_10;
	
        globalMap.put("tDBOutput_10_NB_LINE",nb_line_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_UPDATED",nb_line_update_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_DELETED",nb_line_deleted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_10);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"deletePresent");
			  	}
			  	
 

ok_Hash.put("tDBOutput_10", true);
end_Hash.put("tDBOutput_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tDBCommit_1Process(globalMap);



/**
 * [tDBOutput_10 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tDBOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



    if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
                if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_10")) != null) {
                    pstmtToClose_tDBOutput_10.close();
                }
    }
 



/**
 * [tDBOutput_10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_1.commit();
			
	
		}finally{
			
			conn_tDBCommit_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    }
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	


public static class targetStruct implements routines.system.IPersistableComparableLookupRow<targetStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int idsensore;

				public int getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Integer idstazione;

				public Integer getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public String quota;

				public String getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.idsensore;
						
						result = prime * result + ((this.datastart == null) ? 0 : this.datastart.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final targetStruct other = (targetStruct) obj;
		
						if (this.idsensore != other.idsensore)
							return false;
					
						if (this.datastart == null) {
							if (other.datastart != null)
								return false;
						
						} else if (!this.datastart.equals(other.datastart))
						
							return false;
					

		return true;
    }

	public void copyDataTo(targetStruct other) {

		other.idsensore = this.idsensore;
	            other.nometiposensore = this.nometiposensore;
	            other.unitamisura = this.unitamisura;
	            other.idstazione = this.idstazione;
	            other.nomestazione = this.nomestazione;
	            other.quota = this.quota;
	            other.provincia = this.provincia;
	            other.comune = this.comune;
	            other.storico = this.storico;
	            other.datastart = this.datastart;
	            other.datastop = this.datastop;
	            other.utm_nord = this.utm_nord;
	            other.utm_est = this.utm_est;
	            other.lat = this.lat;
	            other.lng = this.lng;
	            other.coordinate = this.coordinate;
	            
	}

	public void copyKeysDataTo(targetStruct other) {

		other.idsensore = this.idsensore;
	            	other.datastart = this.datastart;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.datastart = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.datastart = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nometiposensore = readString(dis,ois);
					
						this.unitamisura = readString(dis,ois);
					
						this.idstazione = readInteger(dis,ois);
					
						this.nomestazione = readString(dis,ois);
					
						this.quota = readString(dis,ois);
					
						this.provincia = readString(dis,ois);
					
						this.comune = readString(dis,ois);
					
						this.storico = readString(dis,ois);
					
						this.datastop = readDate(dis,ois);
					
						this.utm_nord = readInteger(dis,ois);
					
						this.utm_est = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
						this.coordinate = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.nometiposensore = readString(dis,objectIn);
					
						this.unitamisura = readString(dis,objectIn);
					
						this.idstazione = readInteger(dis,objectIn);
					
						this.nomestazione = readString(dis,objectIn);
					
						this.quota = readString(dis,objectIn);
					
						this.provincia = readString(dis,objectIn);
					
						this.comune = readString(dis,objectIn);
					
						this.storico = readString(dis,objectIn);
					
						this.datastop = readDate(dis,objectIn);
					
						this.utm_nord = readInteger(dis,objectIn);
					
						this.utm_est = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = objectIn.readDouble();
           				}
					
						this.coordinate = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nometiposensore, dos, oos);
					
						writeString(this.unitamisura, dos, oos);
					
					writeInteger(this.idstazione, dos, oos);
					
						writeString(this.nomestazione, dos, oos);
					
						writeString(this.quota, dos, oos);
					
						writeString(this.provincia, dos, oos);
					
						writeString(this.comune, dos, oos);
					
						writeString(this.storico, dos, oos);
					
						writeDate(this.datastop, dos, oos);
					
					writeInteger(this.utm_nord, dos, oos);
					
					writeInteger(this.utm_est, dos, oos);
					
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
						writeString(this.coordinate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.nometiposensore, dos, objectOut);
					
						writeString(this.unitamisura, dos, objectOut);
					
					writeInteger(this.idstazione, dos, objectOut);
					
						writeString(this.nomestazione, dos, objectOut);
					
						writeString(this.quota, dos, objectOut);
					
						writeString(this.provincia, dos, objectOut);
					
						writeString(this.comune, dos, objectOut);
					
						writeString(this.storico, dos, objectOut);
					
						writeDate(this.datastop, dos, objectOut);
					
					writeInteger(this.utm_nord, dos, objectOut);
					
					writeInteger(this.utm_est, dos, objectOut);
					
						if(this.lat == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.lat);
		            	}
					
						if(this.lng == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.lng);
		            	}
					
						writeString(this.coordinate, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+quota);
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(targetStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idsensore, other.idsensore);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.datastart, other.datastart);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class db_dataStruct implements routines.system.IPersistableRow<db_dataStruct> {
    final static byte[] commonByteArrayLock_ARPA_DATA_sensorsPositionHistory = new byte[0];
    static byte[] commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[0];

	
			    public int idsensore;

				public int getIdsensore () {
					return this.idsensore;
				}
				
			    public String nometiposensore;

				public String getNometiposensore () {
					return this.nometiposensore;
				}
				
			    public String unitamisura;

				public String getUnitamisura () {
					return this.unitamisura;
				}
				
			    public Integer idstazione;

				public Integer getIdstazione () {
					return this.idstazione;
				}
				
			    public String nomestazione;

				public String getNomestazione () {
					return this.nomestazione;
				}
				
			    public Integer quota;

				public Integer getQuota () {
					return this.quota;
				}
				
			    public String provincia;

				public String getProvincia () {
					return this.provincia;
				}
				
			    public String comune;

				public String getComune () {
					return this.comune;
				}
				
			    public String storico;

				public String getStorico () {
					return this.storico;
				}
				
			    public java.util.Date datastart;

				public java.util.Date getDatastart () {
					return this.datastart;
				}
				
			    public java.util.Date datastop;

				public java.util.Date getDatastop () {
					return this.datastop;
				}
				
			    public Integer utm_nord;

				public Integer getUtm_nord () {
					return this.utm_nord;
				}
				
			    public Integer utm_est;

				public Integer getUtm_est () {
					return this.utm_est;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public String coordinate;

				public String getCoordinate () {
					return this.coordinate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ARPA_DATA_sensorsPositionHistory.length) {
				if(length < 1024 && commonByteArray_ARPA_DATA_sensorsPositionHistory.length == 0) {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[1024];
				} else {
   					commonByteArray_ARPA_DATA_sensorsPositionHistory = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length);
			strReturn = new String(commonByteArray_ARPA_DATA_sensorsPositionHistory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ARPA_DATA_sensorsPositionHistory) {

        	try {

        		int length = 0;
		
			        this.idsensore = dis.readInt();
					
					this.nometiposensore = readString(dis);
					
					this.unitamisura = readString(dis);
					
						this.idstazione = readInteger(dis);
					
					this.nomestazione = readString(dis);
					
						this.quota = readInteger(dis);
					
					this.provincia = readString(dis);
					
					this.comune = readString(dis);
					
					this.storico = readString(dis);
					
					this.datastart = readDate(dis);
					
					this.datastop = readDate(dis);
					
						this.utm_nord = readInteger(dis);
					
						this.utm_est = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
					this.coordinate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idsensore);
					
					// String
				
						writeString(this.nometiposensore,dos);
					
					// String
				
						writeString(this.unitamisura,dos);
					
					// Integer
				
						writeInteger(this.idstazione,dos);
					
					// String
				
						writeString(this.nomestazione,dos);
					
					// Integer
				
						writeInteger(this.quota,dos);
					
					// String
				
						writeString(this.provincia,dos);
					
					// String
				
						writeString(this.comune,dos);
					
					// String
				
						writeString(this.storico,dos);
					
					// java.util.Date
				
						writeDate(this.datastart,dos);
					
					// java.util.Date
				
						writeDate(this.datastop,dos);
					
					// Integer
				
						writeInteger(this.utm_nord,dos);
					
					// Integer
				
						writeInteger(this.utm_est,dos);
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// String
				
						writeString(this.coordinate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idsensore="+String.valueOf(idsensore));
		sb.append(",nometiposensore="+nometiposensore);
		sb.append(",unitamisura="+unitamisura);
		sb.append(",idstazione="+String.valueOf(idstazione));
		sb.append(",nomestazione="+nomestazione);
		sb.append(",quota="+String.valueOf(quota));
		sb.append(",provincia="+provincia);
		sb.append(",comune="+comune);
		sb.append(",storico="+storico);
		sb.append(",datastart="+String.valueOf(datastart));
		sb.append(",datastop="+String.valueOf(datastop));
		sb.append(",utm_nord="+String.valueOf(utm_nord));
		sb.append(",utm_est="+String.valueOf(utm_est));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",coordinate="+coordinate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(db_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		db_dataStruct db_data = new db_dataStruct();
targetStruct target = new targetStruct();





	
	/**
	 * [tAdvancedHash_target begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_target", false);
		start_Hash.put("tAdvancedHash_target", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_target";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"target");
					}
				
		int tos_count_tAdvancedHash_target = 0;
		

			   		// connection name:target
			   		// source node:tMap_3 - inputs:(db_data) outputs:(target,target) | target node:tAdvancedHash_target - inputs:(target) outputs:()
			   		// linked node: tMap_2 - inputs:(sorgente,target) outputs:(INSERTS,issues,NOT_INSERT)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_target = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<targetStruct> tHash_Lookup_target =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<targetStruct>getLookup(matchingModeEnum_target);
	   						   
		   	   	   globalMap.put("tHash_Lookup_target", tHash_Lookup_target);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_target begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"db_data");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	String quota;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
targetStruct target_tmp = new targetStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select * from stations";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								db_data.idsensore = 0;
							} else {
		                          
            db_data.idsensore = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								db_data.nometiposensore = null;
							} else {
	                         		
        	db_data.nometiposensore = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								db_data.unitamisura = null;
							} else {
	                         		
        	db_data.unitamisura = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								db_data.idstazione = null;
							} else {
		                          
            db_data.idstazione = rs_tDBInput_1.getInt(4);
            if(rs_tDBInput_1.wasNull()){
                    db_data.idstazione = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								db_data.nomestazione = null;
							} else {
	                         		
        	db_data.nomestazione = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								db_data.quota = null;
							} else {
		                          
            db_data.quota = rs_tDBInput_1.getInt(6);
            if(rs_tDBInput_1.wasNull()){
                    db_data.quota = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								db_data.provincia = null;
							} else {
	                         		
        	db_data.provincia = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								db_data.comune = null;
							} else {
	                         		
        	db_data.comune = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								db_data.storico = null;
							} else {
	                         		
        	db_data.storico = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								db_data.datastart = null;
							} else {
										
			db_data.datastart = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 10);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								db_data.datastop = null;
							} else {
										
			db_data.datastop = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 11);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								db_data.utm_nord = null;
							} else {
		                          
            db_data.utm_nord = rs_tDBInput_1.getInt(12);
            if(rs_tDBInput_1.wasNull()){
                    db_data.utm_nord = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								db_data.utm_est = null;
							} else {
		                          
            db_data.utm_est = rs_tDBInput_1.getInt(13);
            if(rs_tDBInput_1.wasNull()){
                    db_data.utm_est = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								db_data.lat = null;
							} else {
	                         		
            db_data.lat = rs_tDBInput_1.getDouble(14);
            if(rs_tDBInput_1.wasNull()){
                    db_data.lat = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								db_data.lng = null;
							} else {
	                         		
            db_data.lng = rs_tDBInput_1.getDouble(15);
            if(rs_tDBInput_1.wasNull()){
                    db_data.lng = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								db_data.coordinate = null;
							} else {
	                         		
        	db_data.coordinate = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"db_data"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.quota = db_data.quota==null?"":db_data.quota.toString() ;// ###############################
        // ###############################
        // # Output tables

target = null;


// # Output table : 'target'
target_tmp.idsensore = db_data.idsensore ;
target_tmp.nometiposensore = db_data.nometiposensore ;
target_tmp.unitamisura = db_data.unitamisura ;
target_tmp.idstazione = db_data.idstazione ;
target_tmp.nomestazione = db_data.nomestazione ;
target_tmp.quota = Var.quota ;
target_tmp.provincia = db_data.provincia ;
target_tmp.comune = db_data.comune ;
target_tmp.storico = db_data.storico ;
target_tmp.datastart = db_data.datastart ;
target_tmp.datastop = db_data.datastop ;
target_tmp.utm_nord = db_data.utm_nord ;
target_tmp.utm_est = db_data.utm_est ;
target_tmp.lat = db_data.lat ;
target_tmp.lng = db_data.lng ;
target_tmp.coordinate = db_data.coordinate ;
target = target_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "target"
if(target != null) { 



	
	/**
	 * [tAdvancedHash_target main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"target"
						
						);
					}
					


			   
			   

					targetStruct target_HashRow = new targetStruct();
		   	   	   
				
				target_HashRow.idsensore = target.idsensore;
				
				target_HashRow.nometiposensore = target.nometiposensore;
				
				target_HashRow.unitamisura = target.unitamisura;
				
				target_HashRow.idstazione = target.idstazione;
				
				target_HashRow.nomestazione = target.nomestazione;
				
				target_HashRow.quota = target.quota;
				
				target_HashRow.provincia = target.provincia;
				
				target_HashRow.comune = target.comune;
				
				target_HashRow.storico = target.storico;
				
				target_HashRow.datastart = target.datastart;
				
				target_HashRow.datastop = target.datastop;
				
				target_HashRow.utm_nord = target.utm_nord;
				
				target_HashRow.utm_est = target.utm_est;
				
				target_HashRow.lat = target.lat;
				
				target_HashRow.lng = target.lng;
				
				target_HashRow.coordinate = target.coordinate;
				
			tHash_Lookup_target.put(target_HashRow);
			
            




 


	tos_count_tAdvancedHash_target++;

/**
 * [tAdvancedHash_target main ] stop
 */
	
	/**
	 * [tAdvancedHash_target process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target";

	

 



/**
 * [tAdvancedHash_target process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_target process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target";

	

 



/**
 * [tAdvancedHash_target process_data_end ] stop
 */

} // End of branch "target"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"db_data");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_target end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target";

	

tHash_Lookup_target.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"target");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_target", true);
end_Hash.put("tAdvancedHash_target", System.currentTimeMillis());




/**
 * [tAdvancedHash_target end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_target finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target";

	

 



/**
 * [tAdvancedHash_target finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final sensorsPositionHistory sensorsPositionHistoryClass = new sensorsPositionHistory();

        int exitCode = sensorsPositionHistoryClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = sensorsPositionHistory.class.getClassLoader().getResourceAsStream("arpa_data/sensorspositionhistory_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = sensorsPositionHistory.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("postgres_Schema", "id_String");
                        if(context.getStringValue("postgres_Schema") == null) {
                            context.postgres_Schema = null;
                        } else {
                            context.postgres_Schema=(String) context.getProperty("postgres_Schema");
                        }
                        context.setContextType("postgres_Server", "id_String");
                        if(context.getStringValue("postgres_Server") == null) {
                            context.postgres_Server = null;
                        } else {
                            context.postgres_Server=(String) context.getProperty("postgres_Server");
                        }
                        context.setContextType("postgres_Port", "id_String");
                        if(context.getStringValue("postgres_Port") == null) {
                            context.postgres_Port = null;
                        } else {
                            context.postgres_Port=(String) context.getProperty("postgres_Port");
                        }
                        context.setContextType("postgres_AdditionalParams", "id_String");
                        if(context.getStringValue("postgres_AdditionalParams") == null) {
                            context.postgres_AdditionalParams = null;
                        } else {
                            context.postgres_AdditionalParams=(String) context.getProperty("postgres_AdditionalParams");
                        }
                        context.setContextType("postgres_Password", "id_Password");
                        if(context.getStringValue("postgres_Password") == null) {
                            context.postgres_Password = null;
                        } else {
                            String pwd_postgres_Password_value = context.getProperty("postgres_Password");
                            context.postgres_Password = null;
                            if(pwd_postgres_Password_value!=null) {
                                if(context_param.containsKey("postgres_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.postgres_Password = pwd_postgres_Password_value;
                                } else if (!pwd_postgres_Password_value.isEmpty()) {
                                    try {
                                        context.postgres_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_postgres_Password_value);
                                        context.put("postgres_Password",context.postgres_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("postgres_Login", "id_String");
                        if(context.getStringValue("postgres_Login") == null) {
                            context.postgres_Login = null;
                        } else {
                            context.postgres_Login=(String) context.getProperty("postgres_Login");
                        }
                        context.setContextType("postgres_Database", "id_String");
                        if(context.getStringValue("postgres_Database") == null) {
                            context.postgres_Database = null;
                        } else {
                            context.postgres_Database=(String) context.getProperty("postgres_Database");
                        }
                        context.setContextType("postgres_woneli_Database", "id_String");
                        if(context.getStringValue("postgres_woneli_Database") == null) {
                            context.postgres_woneli_Database = null;
                        } else {
                            context.postgres_woneli_Database=(String) context.getProperty("postgres_woneli_Database");
                        }
                        context.setContextType("postgres_woneli_Schema", "id_String");
                        if(context.getStringValue("postgres_woneli_Schema") == null) {
                            context.postgres_woneli_Schema = null;
                        } else {
                            context.postgres_woneli_Schema=(String) context.getProperty("postgres_woneli_Schema");
                        }
                        context.setContextType("postgres_woneli_Password", "id_Password");
                        if(context.getStringValue("postgres_woneli_Password") == null) {
                            context.postgres_woneli_Password = null;
                        } else {
                            String pwd_postgres_woneli_Password_value = context.getProperty("postgres_woneli_Password");
                            context.postgres_woneli_Password = null;
                            if(pwd_postgres_woneli_Password_value!=null) {
                                if(context_param.containsKey("postgres_woneli_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.postgres_woneli_Password = pwd_postgres_woneli_Password_value;
                                } else if (!pwd_postgres_woneli_Password_value.isEmpty()) {
                                    try {
                                        context.postgres_woneli_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_postgres_woneli_Password_value);
                                        context.put("postgres_woneli_Password",context.postgres_woneli_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("postgres_woneli_AdditionalParams", "id_String");
                        if(context.getStringValue("postgres_woneli_AdditionalParams") == null) {
                            context.postgres_woneli_AdditionalParams = null;
                        } else {
                            context.postgres_woneli_AdditionalParams=(String) context.getProperty("postgres_woneli_AdditionalParams");
                        }
                        context.setContextType("postgres_woneli_Server", "id_String");
                        if(context.getStringValue("postgres_woneli_Server") == null) {
                            context.postgres_woneli_Server = null;
                        } else {
                            context.postgres_woneli_Server=(String) context.getProperty("postgres_woneli_Server");
                        }
                        context.setContextType("postgres_woneli_Port", "id_String");
                        if(context.getStringValue("postgres_woneli_Port") == null) {
                            context.postgres_woneli_Port = null;
                        } else {
                            context.postgres_woneli_Port=(String) context.getProperty("postgres_woneli_Port");
                        }
                        context.setContextType("postgres_woneli_Login", "id_String");
                        if(context.getStringValue("postgres_woneli_Login") == null) {
                            context.postgres_woneli_Login = null;
                        } else {
                            context.postgres_woneli_Login=(String) context.getProperty("postgres_woneli_Login");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("postgres_Schema")) {
                context.postgres_Schema = (String) parentContextMap.get("postgres_Schema");
            }if (parentContextMap.containsKey("postgres_Server")) {
                context.postgres_Server = (String) parentContextMap.get("postgres_Server");
            }if (parentContextMap.containsKey("postgres_Port")) {
                context.postgres_Port = (String) parentContextMap.get("postgres_Port");
            }if (parentContextMap.containsKey("postgres_AdditionalParams")) {
                context.postgres_AdditionalParams = (String) parentContextMap.get("postgres_AdditionalParams");
            }if (parentContextMap.containsKey("postgres_Password")) {
                context.postgres_Password = (java.lang.String) parentContextMap.get("postgres_Password");
            }if (parentContextMap.containsKey("postgres_Login")) {
                context.postgres_Login = (String) parentContextMap.get("postgres_Login");
            }if (parentContextMap.containsKey("postgres_Database")) {
                context.postgres_Database = (String) parentContextMap.get("postgres_Database");
            }if (parentContextMap.containsKey("postgres_woneli_Database")) {
                context.postgres_woneli_Database = (String) parentContextMap.get("postgres_woneli_Database");
            }if (parentContextMap.containsKey("postgres_woneli_Schema")) {
                context.postgres_woneli_Schema = (String) parentContextMap.get("postgres_woneli_Schema");
            }if (parentContextMap.containsKey("postgres_woneli_Password")) {
                context.postgres_woneli_Password = (java.lang.String) parentContextMap.get("postgres_woneli_Password");
            }if (parentContextMap.containsKey("postgres_woneli_AdditionalParams")) {
                context.postgres_woneli_AdditionalParams = (String) parentContextMap.get("postgres_woneli_AdditionalParams");
            }if (parentContextMap.containsKey("postgres_woneli_Server")) {
                context.postgres_woneli_Server = (String) parentContextMap.get("postgres_woneli_Server");
            }if (parentContextMap.containsKey("postgres_woneli_Port")) {
                context.postgres_woneli_Port = (String) parentContextMap.get("postgres_woneli_Port");
            }if (parentContextMap.containsKey("postgres_woneli_Login")) {
                context.postgres_woneli_Login = (String) parentContextMap.get("postgres_woneli_Login");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("postgres_Password");
			parametersToEncrypt.add("postgres_woneli_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : sensorsPositionHistory");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1001870 characters generated by Talend Open Studio for Data Integration 
 *     on the 10 July 2022 at 13:10:13 CEST
 ************************************************************************************************/